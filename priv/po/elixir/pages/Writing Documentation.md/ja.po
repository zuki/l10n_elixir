msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-01-27 15:49+0900\n"
"Last-Translator: 小田 照敬 <k-1@air13.local>\n"
"Language-Team: Japanese <translation-team-ja@lists.sourceforge.net>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:1
msgid "# Writing Documentation"
msgstr "# ドキュメントの書法"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:3
msgid ""
"Elixir treats documentation as a first-class citizen. This means "
"documentation should be easy to write and easy to read. In this document you "
"will learn how to write documentation in Elixir, covering constructs like "
"module attributes, style practices and doctests."
msgstr ""
"Elixirはドキュメントを第一級市民(first-class citizen)として扱います。これはド"
"キュメントは書きやすく、読みやすくなければならないことを意味します。このド"
"キュメントでは、モジュール属性やスタイルプラクティス、doctestなどの構成子をカ"
"バーし、Elixirにおけるドキュメントの書き方を学びます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:5
msgid "## Markdown"
msgstr "## Markdown"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:7
msgid ""
"Elixir documentation is written using Markdown. There are plenty of guides "
"on Markdown online, we recommend the ones available at GitHub as a getting "
"started point:"
msgstr ""
"ElixirドキュメントはMarkdownを使って書かれています。Markdownに関するガイドは"
"オンライン上にたくさんありますが、Githubのものから開始することを勧めます:"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:9
msgid ""
"  * https://help.github.com/articles/markdown-basics/\n"
"  * https://help.github.com/articles/github-flavored-markdown/"
msgstr ""
"  * https://help.github.com/articles/markdown-basics/\n"
"  * https://help.github.com/articles/github-flavored-markdown/"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:12
msgid "## Module Attributes"
msgstr "## モジュール属性"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:14
msgid ""
"Documentation in Elixir is usually attached to module attributes. Let's see "
"an example:"
msgstr ""
"Elixirのドキュメントは、通常モジュール属性にひも付けられています。例を見てみ"
"ましょう:"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:37
msgid ""
"The `@moduledoc` attribute is used to add documentation to the module. "
"`@doc` is used before a function to provide documentation for it. Besides "
"the attributes above, `@typedoc` can also be used to attach documentation to "
"types defined as part of typespecs."
msgstr ""
"`@moduledoc`属性はモジュールにドキュメントを追加するのに使われます。`@doc`は"
"関数の前に置いて、関数のドキュメントを提供します。これ以外の属性では、型仕様"
"のページで定義した型にドキュメントをひも付けるのに`@typedoc`を使用できます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:39
msgid "## Function Arguments"
msgstr "## 関数の引数"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:41
msgid ""
"When documenting a function, argument names are inferred by the compiler. "
"For example:"
msgstr "関数を文書化する際、引数名はコンパイラによって推論されます。たとえば:"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:47
msgid ""
"The compiler will infer this argument as `map`. Sometimes the inference will "
"be suboptimal, especially if the function contains multiple clauses with the "
"argument matching on different values each time. You can specify the proper "
"names for documentation by declaring only the function head at any moment "
"before the implementation:"
msgstr ""
"コンパイラはこの引数を`map`だと推論します。推論が最適でない場合も時にありま"
"す。特に、関数がマッチングの度に異なる値にマッチする引数を持つ複数の節を含ん"
"でいる場合です。実装前にすぐにでも関数の頭だけでも宣言することによりドキュメ"
"ントに適切な名前を指定することができます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:54
msgid "## Recommendations"
msgstr "## 推奨"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:56
msgid "When writing documentation:"
msgstr "ドキュメントを書く際には:"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:58
msgid ""
"  * Keep the first paragraph of the documentation concise and simple, "
"typically one-line. Tools like [ExDoc](https://github.com/elixir-lang/"
"ex_doc/) use the first line to generate a summary."
msgstr ""
"  * ドキュメントの最初の段落は、簡潔かつシンプルにして、通常は一行にしてくだ"
"さい。[ExDoc](https://github.com/elixir-lang/ex_doc/)などのツールは最初の行を"
"使って要約をを生成するからです。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:60
msgid "  * Reference modules by their full name."
msgstr "  * 完全名でモジュールを参照してください。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:62
msgid ""
"  Markdown uses backticks (`` ` ``) to quote code. Elixir builds on top of "
"that to automatically generate links when module or function names are "
"referenced. For this reason, always use full module names. If you have a "
"module called `MyApp.Hello`, always reference it as `` `MyApp.Hello` `` and "
"never as `` `Hello` ``."
msgstr ""
"Markdownはバックティック(`` ` ``)をコードの引用に使います。Elixirはこれを使っ"
"て、モジュール名や関数名が参照された際に、自動的にリンクを生成します。そのた"
"め、常に完全なモジュール名を使ってください。`MyApp.Hello`というモジュールがあ"
"る場合は、それを常に`` `MyApp.Hello` `` で参照し、けっして`` `Hello` ``では参"
"照しないでください。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:64
msgid ""
"  * Reference functions by name and arity if they are local, as in `` "
"`world/1` ``, or by module, name and arity if pointing to an external "
"module: `` `MyApp.Hello.world/1` ``."
msgstr ""
"  * 関数は、ローカルの場合は`` `world/1` ``のように名前とアリティで参照してく"
"ださい。外部モジュールの関数を参照する場合は`` `MyApp.Hello.world/1` ``のよう"
"にモジュール、名前、アリティで参照してください。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:66
msgid ""
"  * Reference a `@callback` by prepending `c:`, as in `` `c:world/1` ``."
msgstr ""
"  * `@callback`は`` `c:world/1` ``のように前に`c:`を付けて参照してください。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:68
msgid "  * Reference a `@type` by prepending `t:`, as in `` `t:values/0` ``."
msgstr ""
"  * `@type`は`` `t:values/0` ``のように前に`t:`を付けて参照してください。,"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:70
msgid ""
"  * Start new sections with second level Markdown headers `##`. First level "
"headers are reserved for module and function names."
msgstr ""
" * 新しいセクションは第2レベルのMarkdownヘッダー`##`で開始してください。第1レ"
"ベルのヘッダーはモジュール名と関数名のために予約されています。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:72
msgid ""
"  * Place documentation before the first clause of multi-clause functions. "
"Documentation is always per function and arity and not per clause."
msgstr ""
"  * 複数の節を持つ関数を文書化する際は、最初の節の前にドキュメントを置いてく"
"ださい。ドキュメントは常に関数とアリティのペアごとに作成し、節ごとには作成し"
"ません。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:74
msgid "## Doctests"
msgstr "## Doctest"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:76
msgid ""
"We recommend that developers include examples in their documentation, often "
"under their own `## Examples` heading. To ensure examples do not get out of "
"date, Elixir's test framework (ExUnit) provides a feature called doctests "
"that allows developers to test the examples in their documentation. Doctests "
"work by parsing out code samples starting with `iex>` from the "
"documentation. You can read more about it at `ExUnit.DocTest`."
msgstr ""
"開発者にはドキュメントの中に例を含めることを勧めます。例は通常、見出し`## "
"Examples`の下に置きます。例が期限切れにならないようにするために、Elixirのテス"
"トフレームワーク（ExUnit）は開発者がドキュメント内の例をテストできるようにす"
"るdoctestを呼ばれる機能を提供しています。Doctestはドキュメントから`iex>`で始"
"まるコードサンプルを解析することにより動作します。詳細は`ExUnit.DocTest`で読"
"むことができます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:78
msgid ""
"Notice doctests have limitations. When you cannot doctest a function, "
"because it relies on state or side-effects, we recommend developers include "
"examples directly without the `iex>` prompt."
msgstr ""
"doctestには制限があることに注意してください。状態や副作用に依存するため、関数"
"をdoctestできない場合は、`iex>`プロンプトなしに例を直接含めることを勧めます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:80
msgid "## Documentation != Comments"
msgstr "## ドキュメント != コメント"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:82
msgid ""
"Elixir treats documentation and code comments as different concepts. "
"Documentation is for users of your Application Programming Interface (API), "
"be it your co-worker or your future self. Modules and functions must always "
"be documented if they are part of your API."
msgstr ""
"Elixirはドキュメントとコードコメントとを異った概念として扱います。ドキュメン"
"トはAPI（Application Programming Interface）のユーザ、共同作業者、そして未来"
"のあなた自身のためのものです。モジュールと関数はそれがAPIの一部であるかぎり、"
"常にドキュメント化されなければなりません。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:84
msgid ""
"Code comments are for developers reading the code. They are useful to mark "
"improvements, leave notes for developers reading the code (for example, you "
"decided not to call a function due to a bug in a library) and so forth."
msgstr ""
"コードコメントは開発者がコードを読むためのものです。改善点を記録したり、コー"
"ドを読む開発者に記録（たとえば、ライブラリのバグのために関数を呼ばないと決め"
"た）を残したりするためなどに役に立ちます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:86
msgid "In other words: documentation is required, code comments are optional."
msgstr ""
"言い替えると、ドキュメントは必須であり、コードコメントはオプションです。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:88
msgid "## Hiding Internal Modules and Functions"
msgstr "## 内部モジュールと関数を隠す"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:90
msgid ""
"Besides the modules and functions libraries provide as part of their public "
"interface, libraries may also implement important functionality that is not "
"part of their API. While these modules and functions can be accessed, they "
"are meant to be internal to the library and thus should not have "
"documentation for end users."
msgstr ""
"ライブラリは公開インターフェースの一部として提供しているモジュールや関数以外"
"にも、APIの一部ではないが重要な機能も実装している場合があります。これらのモ"
"ジュールや関数はアクセスすることはできますが、ライブラリの内部にあることを前"
"提としているため、エンドユーザ向けのドキュメントを持つべきではありません。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:92
msgid ""
"Luckily, Elixir allows developers to hide modules and functions from the "
"documentation. For example, one common practice for documenting internal "
"behaviour is to set the `@moduledoc` attribute to `false` while documenting "
"each function:"
msgstr ""
"幸いにも、Elixirは開発者がドキュメントからモジュールや関数を隠すことを可能に"
"しています。 たとえば、内部ビヘイビアを文書化するための一般的な実践の1つに、"
"`@moduledoc`属性を`false`に設定して、各関数は文書化することがあります:"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:105
msgid ""
"Similarly, developers can add `@doc false` to functions they do not want to "
"be publicly exposed:"
msgstr ""
"同様に、開発者は公開したくない関数には`@doc false`を追加することができます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:112
msgid ""
"However, keep in mind that adding `@doc false` does not make the function "
"private. The function above can still be invoked as `MyApp.Sample.add(1, "
"2)`. Not only that, if `MyApp.Sample` is imported, the `add/2` function will "
"also be imported into the caller. For those reasons, be cautious when adding "
"`@doc false` to functions, instead use one of these two options:"
msgstr ""
"しかしながら、`@doc false`を追加しても、関数はプライベートにならないことに注"
"意してください。上の関数は依然として`MyApp.Sample.add(1, 2)`で呼び出すことが"
"できます。それだけでなく、もし`MyApp.Sample`がimportされた場合、`add/2`関数も"
"呼出し元にインポートされます。これらの理由から、関数に`@doc false`を追加する"
"ときは注意して、代わりに次の2つの選択肢のいずれかを使用してください:"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:114
msgid ""
"  * Move the undocumented function to a module with `@moduledoc false`, like "
"`MyApp.Hidden`, ensuring the function won't be accidentally exposed or "
"imported. Remember you can use `@moduledoc false` to hide a whole module and "
"still document each function with `@doc`. Tools will still ignore the module."
msgstr ""
"   * アンドキュメンテッド関数は、関数が偶然により公開されたりインポートされた"
"りしないようにするために、`MyApp.Hidden`のような`@moduledoc false`を持つモ"
"ジュールに移動してください。`@moduledoc false` を使うとモジュール全体を隠すこ"
"とができ、各関数については依然として`@doc`で文書化できることを思い出してくだ"
"さい。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:116
msgid ""
"  * Start the function name with one or two underscores, for example, "
"`__add__/2`, and add `@doc false`. The compiler does not import functions "
"with leading underscores and they hint to anyone reading the code of their "
"intended private usage."
msgstr ""
"  * 関数名を`__add__/2`のように1つまたは2つのアンダースコアで始まる名前にし、"
"`@doc false`を追加してください。コンパイラはアンダースコアで始まる関数はイン"
"ポートしません。また、コードを読む者にプライベートな利用を意図しているという"
"ヒントを与えます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:118
msgid "## Documenting Private Functions"
msgstr "## プライベート関数のドキュメント"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:120
msgid ""
"Elixir warns if a private function has a `@doc` attribute and discards its "
"content, because `@doc` is intended to be used only for your public "
"interface."
msgstr ""
"Elixirはプライベート関数が`@doc`を持っていると警告してその内容を破棄します。"
"`@doc`は公開インターフェースにのみ使用されることを意図しているからです。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:122
msgid ""
"Private functions may still need internal documentation for maintainers, "
"though. That can be accomplished with code comments."
msgstr ""
"しかし、保守作業者のためにプライベート関数にも内部文書を必要とするかもしれま"
"せん。これはコードコメントで実現できます。"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:124
msgid "## Code.get_docs/2"
msgstr "## Code.get_docs/2"

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:126
msgid ""
"Elixir stores documentation inside pre-defined chunks in the bytecode. It "
"can be accessed from Elixir by using the `Code.get_docs/2` function. This "
"also means documentation is only accessed when required and not when modules "
"are loaded by the Virtual Machine. The only downside is that modules defined "
"in-memory, like the ones defined in IEx, cannot have their documentation "
"accessed as they do not have their bytecode written to disk.\n"
msgstr ""
"Elixirはバイトコード内のあらかじめ定義されたチャンクの中にドキュメントを格納"
"します。 これは、Elixirから`Code.get_docs/2`関数を使用してアクセスできます。 "
"これはまた、ドキュメンテーションは必要なときにのみアクセスされ、モジュールが"
"バーチャルマシンによってロードされる際にはアクセスされないことを意味します。 "
"唯一の欠点は、メモリ内で定義されたモジュールはIExで定義されたモジュール同様、"
"バイトコードがディスクに書き込まれていないため、ドキュメントにアクセスできな"
"いことです。\n"

#~ msgid ""
#~ "There are a couple tips we recommend developers to follow when writing "
#~ "documentation:"
#~ msgstr ""
#~ "ドキュメンテーションを書く時、下記のいくつかのtipsをデベロッパへ推奨\n"
#~ "します:"

#~ msgid ""
#~ "  * When the documentation has multiple sections, always start the "
#~ "section heading by using `##`. The first heading is reserved to the "
#~ "module or function name itself."
#~ msgstr ""
#~ "  * もし見出しを使うなら、常に`##`を使って2番目の見出しから始めてくださ\n"
#~ "    い。最初の見出しはモジュールや関数名のために予約されています。"

#~ msgid "## Privacy"
#~ msgstr "## Privacy"

#~ msgid ""
#~ "Elixir does not allow developers to document private functions. That's "
#~ "because private functions only exist inside the module that define them "
#~ "and cannot be accessed externally."
#~ msgstr ""
#~ "Elixirはプライベート関数へのドキュメントを許していません。\n"
#~ "それは、プライベート関数は定義されたモジュールの内部でのみ存在し、\n"
#~ "外部からアクセスされることは有り得ないからです。"
