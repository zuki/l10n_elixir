msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-01-26 15:02+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#: deps/elixir/lib/elixir/pages/Behaviours.md:1
msgid "# Behaviours"
msgstr "# ビヘイビア"

#: deps/elixir/lib/elixir/pages/Behaviours.md:3
msgid ""
"Behaviours in Elixir (and Erlang) are a way to separate and abstract the "
"generic part of a component (which becomes the *behaviour module*) from the "
"specific part (which becomes the *callback module*)."
msgstr ""
"Elixir（およびErlang）におけるビヘイビアとは、コンポーネントの一般的な部分"
"（これは*ビヘイビアモジュール*になります）を個別な部分（これは*コールバックモ"
"ジュール*になります）から分離して抽象化する方法です。"

#: deps/elixir/lib/elixir/pages/Behaviours.md:5
msgid ""
"A behaviour module defines a set of functions and macros (referred to as "
"*callbacks*) that callback modules implementing that behaviour must export. "
"This \"interface\" identifies the specific part of the component. For "
"example, the `GenServer` behaviour and functions abstract away all the "
"message-passing (sending and receiving) and error reporting that a \"server"
"\" process will likely want to implement from the specific parts such as the "
"actions that this server process has to perform."
msgstr ""
"ビヘイビアモジュールは、そのビヘイビアを実装するコールバックモジュールをエク"
"スポートしなければならない、一連の関数とマクロ（以後、*コールバック*と呼びま"
"す）を定義します。この「インターフェース」はコンポーネントの個別な部分を識別"
"します。たとえば、`GenServer`ビヘイビアと関数は、「サーバー」プロセスが、自分"
"のサーバープロセスで実行しなければならないアクションのような個別の部分とは切"
"り離して実装したいと思われる、すべてのメッセージのやり取り（送信と受信）やエ"
"ラーの報告を抽象化します。"

#: deps/elixir/lib/elixir/pages/Behaviours.md:7
msgid ""
"If a callback module that implements a given behaviour doesn't export all "
"the functions and macros defined by that behaviour, the user will be "
"notified through warnings during the compilation process (no errors will "
"happen)."
msgstr ""
"指定のビヘイビアを実装するコールバックモジュールが、そのビヘイビアが定義して"
"いる関数とマクロをすべてエクスポートしていない場合は、コンパイルプロセスのお"
"いて警告としてユーザに通知されます（エラーは発生しません）。"

#: deps/elixir/lib/elixir/pages/Behaviours.md:9
msgid ""
"Elixir's standard library contains a few frequently used behaviours such as "
"`GenServer`, `Supervisor`, and `Application`."
msgstr ""
"Elilxirの標準ライブラリは`GenServer`や`Supervisor`、`Application`など、少数の"
"よく使われるビヘイビアを含んでいます。"

#: deps/elixir/lib/elixir/pages/Behaviours.md:11
msgid "## Defining a behaviour"
msgstr "## ビヘイビアの定義"

#: deps/elixir/lib/elixir/pages/Behaviours.md:13
msgid ""
"A behaviour is always backed by a module (which is how the behaviour will be "
"identified): the module where callbacks are defined. To define a behaviour "
"module, it's enough to define one or more callbacks in that module. To "
"define callbacks, the `@callback` and `@macrocallback` module attributes can "
"be used (for function callbacks and macro callbacks respectively)."
msgstr ""
"ビヘイビアは常にモジュールを背景とします（これによりビヘイビアは識別されま"
"す）。コールバックが定義されているモジュールです。ビヘイビアモジュールを定義"
"するには、モジュール内で1つ以上のコールバックを定義するだけで十分です。コール"
"バックを定義するには `@callback` と`@macrocallback`の2つのモジュール属性を使"
"うことができます（前者は関数コールバック用で、後者はマクロコールバック用で"
"す）。"

#: deps/elixir/lib/elixir/pages/Behaviours.md:20
msgid ""
"As seen in the example above, defining a callback is a matter of defining a "
"specification for that callback, made of:"
msgstr ""
"上の例からわかるように、コールバックの定義とはコールバックの仕様を定義するこ"
"とにほかなりません。次の要素からなります:"

#: deps/elixir/lib/elixir/pages/Behaviours.md:22
msgid ""
"  * the callback name (`my_fun` or `my_macro` in the example)\n"
"  * the arguments that the callback must accept (`arg :: any` in the "
"example)\n"
"  * the *expected* type of the callback return value"
msgstr ""
"* コールバック名（例では、`my_fun` と`my_macro`）\n"
"* コールバックが受け取らなければならない引数（例では、`arg :: any`）\n"
"* コールバックの返り値の*想定される*型"

#: deps/elixir/lib/elixir/pages/Behaviours.md:26
msgid ""
"For more information on typespecs, consult the [\"Typespecs\"](typespecs."
"html) page in the Elixir documentation. As mentioned in this page, type "
"specification are only annotations used by documentation and tools, so "
"defining such specifications for behaviours serves mostly for such purposes."
msgstr ""
"型仕様に関するさらなる情報は、Elixirのドキュメントの [“型仕様”](typespecs."
"html) のページにあたってください。このページでも触れられているように、型仕様"
"はドキュメントとツールで使用されるアノテーションにすぎません。したがって、ビ"
"ヘイビアにおけるそのような仕様の定義もほとんどがその目的のためです。"

#: deps/elixir/lib/elixir/pages/Behaviours.md:28
msgid "### Optional callbacks"
msgstr "### オプションのコールバック"

#: deps/elixir/lib/elixir/pages/Behaviours.md:30
msgid ""
"Optional callbacks are callbacks that callback modules may implement if they "
"want to, but are not required to.\n"
"Usually, behaviour modules know if they should call those callbacks based on "
"configuration, or they check if the callbacks are defined with "
"`function_exported?/3` or `macro_exported?/3`.\n"
"Optional callbacks can be defined through the `@optional_callbacks` module "
"attribute, which has to be a keyword list with function or macro name as key "
"and arity as value. For example:"
msgstr ""
"オプションのコールバックは、欲しければ実装してもよいが、実装する必要はない"
"コールバックモジュールです。\n"
"通常、ビヘイビアモジュールはこれらのコールバックをコールすべきか否かを構成に"
"基いて判断します。そうでなければ、コールバックが定義されているか"
"`function_exported?/3`または`macro_exported?/3`でチェックします。\n"
"オプションのコールバックは`@optional_callbacks`モジュール属性を使って定義でき"
"ます。これはキーとして関数名またはマクロ名を、値としてアリティを持つキーワー"
"ドリストでなければなりません。たとえば:"

#: deps/elixir/lib/elixir/pages/Behaviours.md:41
msgid ""
"One example of optional callback in Elixir's standard library is `c:"
"GenServer.format_status/2`."
msgstr ""
"Elixirの標準ライブラリにおけるオプションのコールバックの例には`c:GenServer."
"format_status/2`があります。"

#: deps/elixir/lib/elixir/pages/Behaviours.md:43
msgid "## Implementing behaviours"
msgstr "## ビヘイビアの実装"

#: deps/elixir/lib/elixir/pages/Behaviours.md:45
msgid ""
"To specify that a module implements a given behaviour, the `@behaviour` "
"attribute must be used:"
msgstr ""
"モジュールが指定のビヘイビアを実装することを示すには、`@behaviour`属性を使わ"
"なければなりません:"

#: deps/elixir/lib/elixir/pages/Behaviours.md:51
msgid ""
"    defmodule MyCallbackModule do\n"
"      @behaviour MyBehaviour\n"
"      def my_fun(arg), do: arg\n"
"    end\n"
msgstr ""
