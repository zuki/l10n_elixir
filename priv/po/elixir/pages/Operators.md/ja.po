msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-01-27 11:09+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#: deps/elixir/lib/elixir/pages/Operators.md:1
msgid "# Operators"
msgstr "# 演算子"

#: deps/elixir/lib/elixir/pages/Operators.md:3
msgid ""
"This document covers operators in Elixir, how they are parsed, how they can "
"be defined, and how they can be overridden."
msgstr ""
"このドキュメントはElixirの演算子を扱い、演算子がどのように解析されるか、どの"
"ように定義できるのか、どのように上書きできるのかを説明しまう。"

#: deps/elixir/lib/elixir/pages/Operators.md:5
msgid "## Operator precedence and associativity"
msgstr "## 演算子の優先順位と結合規則"

#: deps/elixir/lib/elixir/pages/Operators.md:7
msgid ""
"The following is a list of all operators that Elixir is capable of parsing, "
"ordered from higher to lower precedence, alongside their associativity:"
msgstr ""
"以下のリストはElixirが解析できるすべての演算子の一覧です。優先順位の高いもの"
"から低いもの順に、結合規則とともに並んでいます。"

#: deps/elixir/lib/elixir/pages/Operators.md:9
msgid ""
"Operator                                                                                 "
"| Associativity\n"
"---------------------------------------------------------------------------------------- "
"| -------------\n"
"`@`                                                                                      "
"| Unary\n"
"`."
"`                                                                                      "
"| Left to right\n"
"`+` `-` `!` `^` `not` "
"`~~~`                                                              | Unary\n"
"`*` `/"
"`                                                                                  "
"| Left to right\n"
"`+` `-"
"`                                                                                  "
"| Left to right\n"
"`++` `--` `..` "
"`<>`                                                                      | "
"Right to left\n"
"`in`                                                                                     "
"| Left to right\n"
"`\\|>` `<<<` `>>>` `~>>` `<<~` `~>` `<~` `<~>` `<\\|"
">`                                     | Left to right\n"
"`<` `>` `<=` "
"`>=`                                                                        "
"| Left to right\n"
"`==` `!=` `=~` `===` `!"
"==`                                                               | Left to "
"right\n"
"`&&` `&&&` "
"`and`                                                                         "
"| Left to right\n"
"`\\|\\|` `\\|\\|\\|` "
"`or`                                                                     | "
"Left to right\n"
"`=`                                                                                      "
"| Right to left\n"
"`=>`                                                                                     "
"| Right to left\n"
"`\\|"
"`                                                                                     "
"| Right to left\n"
"`::"
"`                                                                                     "
"| Right to left\n"
"`when`                                                                                   "
"| Right to left\n"
"`<-`, `\\"
"\\`                                                                               "
"| Left to right\n"
"`&`                                                                                      "
"| Unary"
msgstr ""
"演算"
"子                                                                                 "
"| 結合規則\n"
"---------------------------------------------------------------------------------------- "
"| -------------\n"
"`@`                                                                                      "
"| 単項\n"
"`."
"`                                                                                      "
"| 左から右\n"
"`+` `-` `!` `^` `not` "
"`~~~`                                                              | 単項\n"
"`*` `/"
"`                                                                                  "
"| 左から右\n"
"`+` `-"
"`                                                                                  "
"| 左から右\n"
"`++` `--` `..` "
"`<>`                                                                      | "
"右から左\n"
"`in`                                                                                     "
"| 左から右\n"
"`\\|>` `<<<` `>>>` `~>>` `<<~` `~>` `<~` `<~>` `<\\|"
">`                                     | 左から右\n"
"`<` `>` `<=` "
"`>=`                                                                        "
"| 左から右\n"
"`==` `!=` `=~` `===` `!"
"==`                                                               | 左から"
"右\n"
"`&&` `&&&` "
"`and`                                                                         "
"| 左から右\n"
"`\\|\\|` `\\|\\|\\|` "
"`or`                                                                     | 左"
"から右\n"
"`=`                                                                                      "
"| 右から左\n"
"`=>`                                                                                     "
"| 右から左\n"
"`\\|"
"`                                                                                     "
"| 右から左\n"
"`::"
"`                                                                                     "
"| 右から左\n"
"`when`                                                                                   "
"| 右から左\n"
"`<-`, `\\"
"\\`                                                                               "
"| 左から右\n"
"`&`                                                                                      "
"| 単項"

#: deps/elixir/lib/elixir/pages/Operators.md:31
msgid "## Comparison operators"
msgstr "## 比較演算子"

#: deps/elixir/lib/elixir/pages/Operators.md:33
msgid "Elixir provides the following built-in comparison operators:"
msgstr "Elixirは以下のビルトイン比較演算子を提供しています。"

#: deps/elixir/lib/elixir/pages/Operators.md:35
msgid ""
"  * `==` - equality\n"
"  * `===` - strict equality\n"
"  * `!=` - inequality\n"
"  * `!==` - strict inequality\n"
"  * `>` - greater than\n"
"  * `<` - less than\n"
"  * `>=` - greater than or equal\n"
"  * `<=` - less than or equal"
msgstr ""
" * `==` - 等しい\n"
"  * `===` - 厳密に等しい\n"
"  * `!=` - 等しくない\n"
"  * `!==` - 厳密に等しくないstrict inequality\n"
"  * `>` - より大きい\n"
"  * `<` - より小さい\n"
"  * `>=` - 以上\n"
"  * `<=` - 以下"

#: deps/elixir/lib/elixir/pages/Operators.md:44
msgid ""
"The only difference between `==` and `===` is that `===` is stricter when it "
"comes to comparing integers and floats:"
msgstr ""
"`==`と`===`の唯一の違いは、整数と浮動小数を比較する際に`===`はより厳密である"
"ことです:"

#: deps/elixir/lib/elixir/pages/Operators.md:46
msgid ""
"```elixir\n"
"iex> 1 == 1.0\n"
"true\n"
"iex> 1 === 1.0\n"
"false\n"
"```"
msgstr ""
"```elixir\n"
"iex> 1 == 1.0\n"
"true\n"
"iex> 1 === 1.0\n"
"false\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:53
msgid "`!=` and `!==` act as the negation of `==` and `===`, respectively."
msgstr "`!=`と`!==`は各々`==`と`===`の否定として作用します。"

#: deps/elixir/lib/elixir/pages/Operators.md:55
msgid "### Term ordering"
msgstr "### 項の順序"

#: deps/elixir/lib/elixir/pages/Operators.md:57
msgid ""
"In Elixir, different data types can be compared using comparison operators:"
msgstr "Elixirでは異なるデータ型を比較演算子で比較することができます。"

#: deps/elixir/lib/elixir/pages/Operators.md:59
msgid ""
"```elixir\n"
"iex> 1 < :an_atom\n"
"true\n"
"```"
msgstr ""
"```elixir\n"
"iex> 1 < :an_atom\n"
"true\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:64
msgid ""
"The reason we can compare different data types is pragmatism. Sorting "
"algorithms don’t need to worry about different data types in order to sort. "
"For reference, the overall sorting order is defined below:"
msgstr ""
"異なるデータ型を比較できる理由は実用主義にあります。ソートアルゴリズムで異な"
"るデータ型のソート順について気にする必要はありません。参考のためにすべての"
"ソート順は次のように定義されています:"

#: deps/elixir/lib/elixir/pages/Operators.md:66
msgid ""
"```\n"
"number < atom < reference < function < port < pid < tuple < map < list < "
"bitstring\n"
"```"
msgstr ""
"```\n"
"number < atom < reference < function < port < pid < tuple < map < list < "
"bitstring\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:70
msgid ""
"When comparing two numbers of different types (a number is either an integer "
"or a float), a conversion to the type with greater precision will always "
"occur, unless the comparison operator used is either `===` or `!==`. A float "
"will be considered more precise than an integer, unless the float is greater/"
"less than +/-9007199254740992.0, at which point all the significant figures "
"of the float are to the left of the decimal point. This behavior exists so "
"that the comparison of large numbers remains transitive."
msgstr ""
"異なる型の2つの数（数は整数か浮動小数のいずれか）を比較する際、`===`か`!==`の"
"いずれかの比較演算子が使われていないと、より高い精度の型への変換が常に行われ"
"ます。浮動小数が+/-9007199254740992.0より大きいか小さくない場合を除いて、浮動"
"小数は整数より高い精度であるとみなされます。その場合、浮動小数の有効数字は小"
"数点の左側になります。"

#: deps/elixir/lib/elixir/pages/Operators.md:72
msgid "The collection types are compared using the following rules:"
msgstr "コレクション型は次の規則を使って比較されます:"

#: deps/elixir/lib/elixir/pages/Operators.md:74
msgid ""
"* Tuples are compared by size then element by element.\n"
"* Maps are compared by size then by keys in ascending term order then by "
"values in key order. In the specific case of maps' key ordering, integers "
"are always considered to be less than floats.\n"
"* Lists are compared element by element."
msgstr ""
"* タプルはまずサイズで比較され、次に要素ごとに比較されます。\n"
"* マップはまずサイズで比較され、次にキーが昇順に、次にキー順にその値で比較さ"
"れます。マップのキーの順序における特例として、整数は常に浮動小数より小さいと"
"みなされます。\n"
"* リストは要素ごとに比較されます。"

#: deps/elixir/lib/elixir/pages/Operators.md:78
msgid "## Custom and overridden operators"
msgstr "## カスタム演算子と演算子の上書き"

#: deps/elixir/lib/elixir/pages/Operators.md:80
msgid "### Defining custom operators"
msgstr "### カスタム演算子の定義"

#: deps/elixir/lib/elixir/pages/Operators.md:82
msgid ""
"Elixir is capable of parsing a predefined set of operators; this means that "
"it's not possible to define new operators (like one could do in Haskell, for "
"example). However, not all operators that Elixir can parse are *used* by "
"Elixir: for example, `+` and `||` are used by Elixir for addition and "
"boolean *or*, but `<~>` is not used (but valid)."
msgstr ""
"Elixirはあらかじめ定義された演算子のセットを解析することができます。これは"
"（たとえば、Haskelではできるような）新しい演算子を定義できないことを意味しま"
"す。しかし、Elixirが解析することができる演算子のすべてがElixirにより*使われて"
"いる*わけではありません。たとえば、`+`と`||`はElxirでは可算および論理演算子"
"`or`として使われていますが、`<~>`は（有効ですが）使われていません。"

#: deps/elixir/lib/elixir/pages/Operators.md:84
msgid ""
"To define an operator, you can use the usual `def*` constructs (`def`, "
"`defp`, `defmacro`, and so on) but with a syntax similar to how the operator "
"is used:"
msgstr ""
"演算子を定義するには、通常の`def*`構成子（`def`, `defp`, `defmacro`など）を使"
"用できますが、その構文は演算子の使用方法と似たものになります。"

#: deps/elixir/lib/elixir/pages/Operators.md:86
msgid ""
"```elixir\n"
"defmodule MyOperators do\n"
"  # We define ~> to return the maximum of the given two numbers,\n"
"  # and <~ to return the minimum."
msgstr ""
"```elixir\n"
"defmodule MyOperators do\n"
"  # ~> は指定された2つの数の最大値を\n"
"  # <~ は最小値を返すと定義する。"

#: deps/elixir/lib/elixir/pages/Operators.md:91
msgid ""
"  def a ~> b, do: max(a, b)\n"
"  def a <~ b, do: min(a, b)\n"
"end\n"
"```"
msgstr ""
"  def a ~> b, do: max(a, b)\n"
"  def a <~ b, do: min(a, b)\n"
"end\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:96
msgid ""
"To use the newly defined operators, we **have to** import the module that "
"defines them:"
msgstr ""
"新しく定義した演算子を使用するには、定義したモジュールをインポートしなければ*"
"なりません*。"

#: deps/elixir/lib/elixir/pages/Operators.md:98
msgid ""
"```elixir\n"
"iex> import MyOperators\n"
"iex> 1 ~> 2\n"
"2\n"
"iex> 1 <~ 2\n"
"1\n"
"```"
msgstr ""
"```elixir\n"
"iex> import MyOperators\n"
"iex> 1 ~> 2\n"
"2\n"
"iex> 1 <~ 2\n"
"1\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:106
msgid ""
"The following is a table of all the operators that Elixir is capable of "
"parsing, but that are not used by default:"
msgstr ""
"以下は、Elixirが解析できるがデフォルトでは使用されていないすべての演算子のリ"
"ストです。"

#: deps/elixir/lib/elixir/pages/Operators.md:108
msgid ""
"  * `|`\n"
"  * `|||`\n"
"  * `&&&`\n"
"  * `<<<`\n"
"  * `>>>`\n"
"  * `~>>`\n"
"  * `<<~`\n"
"  * `~>`\n"
"  * `<~`\n"
"  * `<~>`\n"
"  * `<|>`\n"
"  * `^^^`\n"
"  * `~~~`"
msgstr ""
"  * `|`\n"
"  * `|||`\n"
"  * `&&&`\n"
"  * `<<<`\n"
"  * `>>>`\n"
"  * `~>>`\n"
"  * `<<~`\n"
"  * `~>`\n"
"  * `<~`\n"
"  * `<~>`\n"
"  * `<|>`\n"
"  * `^^^`\n"
"  * `~~~`"

#: deps/elixir/lib/elixir/pages/Operators.md:122
msgid ""
"The following operators are used by the `Bitwise` module when imported: "
"`&&&`, `^^^`, `<<<`, `>>>`, `|||`, `~~~`. See the documentation for "
"`Bitwise` for more information."
msgstr ""
"次の演算子は`Bitwise`モジュールをインポートすると使用されています:` &&&`, "
"`^^^`, `<<<`, `>>>`, `|||`, `~~~`。詳細は`Bitwise`のドキュメントを参照してく"
"ださい。"

#: deps/elixir/lib/elixir/pages/Operators.md:124
msgid "### Redefining existing operators"
msgstr "### 既存の演算子の再定義"

#: deps/elixir/lib/elixir/pages/Operators.md:126
msgid ""
"The operators that Elixir uses (for example, `+`) can be defined by any "
"module and used in place of the ones defined by Elixir, provided they're "
"specifically not imported from `Kernel` (which is imported everywhere by "
"default). For example:"
msgstr ""
"Elixirが使用する演算子（たとえば、`+`）は、それが`Kernel`からインポートされな"
"いことを明確にすれば（デフォルトですべての場所にインポートされています）、任"
"意のモジュールで定義して、Elixirが定義した演算子の代わりに使用できます。たと"
"えば:"

#: deps/elixir/lib/elixir/pages/Operators.md:128
msgid ""
"```elixir\n"
"defmodule WrongMath do\n"
"  # Let's make math wrong by changing the meaning of +:\n"
"  def a + b, do: a - b\n"
"end\n"
"```"
msgstr ""
"```elixir\n"
"defmodule WrongMath do\n"
"  # +の意味を変更して計算を間違えさそう:\n"
"  def a + b, do: a - b\n"
"end\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:135
msgid ""
"Now, we will get an error if we try to use this operator \"out of the box\":"
msgstr "これではこの演算子を「そのまま」使おうとするとエラーになります。"

#: deps/elixir/lib/elixir/pages/Operators.md:137
msgid ""
"```elixir\n"
"iex> import WrongMath\n"
"iex> 1 + 2\n"
"** (CompileError) iex:11: function +/2 imported from both WrongMath and "
"Kernel, call is ambiguous\n"
"```"
msgstr ""
"```elixir\n"
"iex> import WrongMath\n"
"iex> 1 + 2\n"
"** (CompileError) iex:11: function +/2 imported from both WrongMath and "
"Kernel, call is ambiguous\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:143
msgid ""
"So, as mentioned above, we need to explicitly *not* import `+/2` from "
"`Kernel`:"
msgstr ""
"それで、上で述べたように、明示的に`+/2`を`Kernel`からインポート*しない*ように"
"するひつようがあります:"

#: deps/elixir/lib/elixir/pages/Operators.md:145
msgid ""
"```elixir\n"
"iex> import WrongMath\n"
"iex> import Kernel, except: [+: 2]\n"
"iex> 1 + 2\n"
"-1\n"
"```"
msgstr ""
"```elixir\n"
"iex> import WrongMath\n"
"iex> import Kernel, except: [+: 2]\n"
"iex> 1 + 2\n"
"-1\n"
"```"

#: deps/elixir/lib/elixir/pages/Operators.md:152
msgid "### Final note"
msgstr "### 最後の注意"

#: deps/elixir/lib/elixir/pages/Operators.md:154
msgid ""
"While it's possible to defined unused operators (such as `<~>`) and to "
"\"override\" predefined operators (such as `+`), the Elixir community "
"generally discourages this. Custom-defined operators can be really hard to "
"read and even more to understand, as they don't have a descriptive name like "
"functions do. That said, some specific cases or custom domain specific "
"languages (DSLs) may justify these practices.\n"
msgstr ""
"未使用の演算子（ `<〜>`など）を定義したり、あらかじめ定義された演算子（ `+`な"
"ど）を「上書き」したりすることは可能ですが、一般的にElixirコミュニティはこれ"
"を嫌っています。 カスタム定義の演算子は、関数のようにわかりやすい名前を持たな"
"いため、実際には読みにくく、より理解しにくいものになる可能性があります。 つま"
"り、特定のケースやカスタムドメイン固有の言語（DSL）がこれらの方法を正当化する"
"可能性があります。\\ n\n"
