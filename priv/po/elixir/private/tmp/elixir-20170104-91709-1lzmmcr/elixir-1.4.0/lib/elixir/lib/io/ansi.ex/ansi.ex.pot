#. TRANSLATORS: def IO.ANSI.light_magenta()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light magenta."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_5()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 5."
msgstr ""
#. TRANSLATORS: def IO.ANSI.cyan_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to cyan."
msgstr ""
#. TRANSLATORS: def IO.ANSI.blink_slow()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:88 
msgid ""
"Blink: slow. Less than 150 per minute."
msgstr ""
#. TRANSLATORS: def IO.ANSI.green_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to green."
msgstr ""
#. TRANSLATORS: def IO.ANSI.blue()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to blue."
msgstr ""
#. TRANSLATORS: def IO.ANSI.format(chardata, emit? \\ enabled?())
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:182 
msgid ""
"Formats a chardata-like argument by converting named ANSI sequences into actual\n"
"ANSI codes.\n"
"\n"
"The named sequences are represented by atoms.\n"
"\n"
"It will also append an `IO.ANSI.reset/0` to the chardata when a conversion is\n"
"performed. If you don't want this behaviour, use `format_fragment/2`.\n"
"\n"
"An optional boolean parameter can be passed to enable or disable\n"
"emitting actual ANSI codes. When `false`, no ANSI codes will emitted.\n"
"By default checks if ANSI is enabled using the `enabled?/0` function.\n"
"\n"
"## Examples\n"
"\n"
"    iex> IO.ANSI.format([\"Hello, \", :red, :bright, \"world!\"], true)\n"
"    [[[[[[], \"Hello, \"] | \"\\e[31m\"] | \"\\e[1m\"], \"world!\"] | \"\\e[0m\"]\n"
"\n"
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_8()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 8."
msgstr ""
#. TRANSLATORS: def IO.ANSI.blue_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to blue."
msgstr ""
#. TRANSLATORS: def IO.ANSI.not_overlined()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:166 
msgid ""
"Not overlined."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_magenta_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light magenta."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_2()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 2."
msgstr ""
#. TRANSLATORS: def IO.ANSI.overlined()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:160 
msgid ""
"Overlined."
msgstr ""
#. TRANSLATORS: def IO.ANSI.red()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to red."
msgstr ""
#. TRANSLATORS: def IO.ANSI.primary_font()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:106 
msgid ""
"Sets primary (default) font."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_3()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 3."
msgstr ""
#. TRANSLATORS: def IO.ANSI.blink_rapid()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:91 
msgid ""
"Blink: rapid. MS-DOS ANSI.SYS; 150 per minute or more; not widely supported."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_blue_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light blue."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_white()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light white."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_green()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light green."
msgstr ""
#. TRANSLATORS: def IO.ANSI.reset()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:73 
msgid ""
"Resets all attributes."
msgstr ""
#. TRANSLATORS: def IO.ANSI.black_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to black."
msgstr ""
#. TRANSLATORS: def IO.ANSI.normal()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:114 
msgid ""
"Normal color or intensity."
msgstr ""
#. TRANSLATORS: def IO.ANSI.yellow()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to yellow."
msgstr ""
#. TRANSLATORS: Elixir.IO.ANSI Summary
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:18 
msgid ""
"Functionality to render ANSI escape sequences.\n"
"\n"
"[ANSI escape sequences](https://en.wikipedia.org/wiki/ANSI_escape_code)\n"
"are characters embedded in text used to control formatting, color, and\n"
"other output options on video text terminals.\n"
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_red()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light red."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_cyan()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light cyan."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_6()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 6."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_7()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 7."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_cyan_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light cyan."
msgstr ""
#. TRANSLATORS: def IO.ANSI.default_color()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:148 
msgid ""
"Default text color."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_4()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 4."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_yellow()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light yellow."
msgstr ""
#. TRANSLATORS: def IO.ANSI.red_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to red."
msgstr ""
#. TRANSLATORS: def IO.ANSI.black()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to black."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_blue()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light blue."
msgstr ""
#. TRANSLATORS: def IO.ANSI.yellow_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to yellow."
msgstr ""
#. TRANSLATORS: def IO.ANSI.underline()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:85 
msgid ""
"Underline: single."
msgstr ""
#. TRANSLATORS: def IO.ANSI.home()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:169 
msgid ""
"Sends cursor home."
msgstr ""
#. TRANSLATORS: def IO.ANSI.magenta_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to magenta."
msgstr ""
#. TRANSLATORS: def IO.ANSI.default_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:151 
msgid ""
"Default background color."
msgstr ""
#. TRANSLATORS: def IO.ANSI.white()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to white."
msgstr ""
#. TRANSLATORS: def IO.ANSI.faint()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:79 
msgid ""
"Faint (decreased intensity). Not widely supported."
msgstr ""
#. TRANSLATORS: def IO.ANSI.white_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:141 
msgid ""
"Sets background color to white."
msgstr ""
#. TRANSLATORS: def IO.ANSI.crossed_out()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:103 
msgid ""
"Crossed-out. Characters legible, but marked for deletion. Not widely supported."
msgstr ""
#. TRANSLATORS: def IO.ANSI.clear()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:172 
msgid ""
"Clears screen."
msgstr ""
#. TRANSLATORS: def IO.ANSI.blink_off()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:123 
msgid ""
"Blink: off."
msgstr ""
#. TRANSLATORS: def IO.ANSI.color(r, g, b)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:49 
msgid ""
"Sets the foreground color from individual RGB values.\n"
"\n"
"Valid values for each color are in the range 0 to 5.\n"
msgstr ""
#. TRANSLATORS: def IO.ANSI.color_background(r, g, b)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:63 
msgid ""
"Sets the background color from individual RGB values.\n"
"\n"
"Valid values for each color are in the range 0 to 5.\n"
msgstr ""
#. TRANSLATORS: def IO.ANSI.clear_line()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:175 
msgid ""
"Clears line."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_red_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light red."
msgstr ""
#. TRANSLATORS: def IO.ANSI.italic()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:82 
msgid ""
"Italic: on. Not widely supported. Sometimes treated as inverse."
msgstr ""
#. TRANSLATORS: def IO.ANSI.framed()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:154 
msgid ""
"Framed."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_green_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light green."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_white_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light white."
msgstr ""
#. TRANSLATORS: def IO.ANSI.reverse()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:97 
msgid ""
"Image: negative. Swap foreground and background."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_9()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 9."
msgstr ""
#. TRANSLATORS: def IO.ANSI.not_framed_encircled()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:163 
msgid ""
"Not framed or encircled."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_yellow_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light yellow."
msgstr ""
#. TRANSLATORS: def IO.ANSI.encircled()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:157 
msgid ""
"Encircled."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_black()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:138 
msgid ""
"Sets foreground color to light black."
msgstr ""
#. TRANSLATORS: def IO.ANSI.color(code)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:45 
msgid ""
"Sets foreground color."
msgstr ""
#. TRANSLATORS: def IO.ANSI.bright()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:76 
msgid ""
"Bright (increased intensity) or bold."
msgstr ""
#. TRANSLATORS: def IO.ANSI.reverse_off()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:129 
msgid ""
"Image: positive. Normal foreground and background."
msgstr ""
#. TRANSLATORS: def IO.ANSI.cyan()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to cyan."
msgstr ""
#. TRANSLATORS: def IO.ANSI.conceal()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:100 
msgid ""
"Conceal. Not widely supported."
msgstr ""
#. TRANSLATORS: def IO.ANSI.green()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to green."
msgstr ""
#. TRANSLATORS: def IO.ANSI.no_underline()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:120 
msgid ""
"Underline: none."
msgstr ""
#. TRANSLATORS: def IO.ANSI.color_background(code)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:59 
msgid ""
"Sets background color."
msgstr ""
#. TRANSLATORS: def IO.ANSI.light_black_background()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:144 
msgid ""
"Sets background color to light black."
msgstr ""
#. TRANSLATORS: def IO.ANSI.font_1()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:110 
msgid ""
"Sets alternative font 1."
msgstr ""
#. TRANSLATORS: def IO.ANSI.format_fragment(chardata, emit? \\ enabled?())
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:205 
msgid ""
"Formats a chardata-like argument by converting named ANSI sequences into actual\n"
"ANSI codes.\n"
"\n"
"The named sequences are represented by atoms.\n"
"\n"
"An optional boolean parameter can be passed to enable or disable\n"
"emitting actual ANSI codes. When `false`, no ANSI codes will emitted.\n"
"By default checks if ANSI is enabled using the `enabled?/0` function.\n"
"\n"
"## Examples\n"
"\n"
"    iex> IO.ANSI.format_fragment([:bright, 'Word'], true)\n"
"    [[[[[[] | \"\\e[1m\"], 87], 111], 114], 100]\n"
"\n"
msgstr ""
#. TRANSLATORS: def IO.ANSI.not_italic()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:117 
msgid ""
"Not italic."
msgstr ""
#. TRANSLATORS: def IO.ANSI.enabled?()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:32 
msgid ""
"Checks if ANSI coloring is supported and enabled on this machine.\n"
"\n"
"This function simply reads the configuration value for\n"
"`:ansi_enabled` in the `:elixir` application. The value is by\n"
"default `false` unless Elixir can detect during startup that\n"
"both `stdout` and `stderr` are terminals.\n"
msgstr ""
#. TRANSLATORS: def IO.ANSI.magenta()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/elixir/lib/io/ansi.ex:135 
msgid ""
"Sets foreground color to magenta."
msgstr ""
