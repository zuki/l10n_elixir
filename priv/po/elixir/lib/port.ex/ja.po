msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-02-03 16:52+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#. TRANSLATORS: def Port.list()
#: lib/port.ex:256
msgid ""
"Returns a list of all ports in the current node.\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"現在のノードのすべてのポートのリストを返します。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Port.info(port, spec)
#: lib/port.ex:237
msgid ""
"Returns information about the `port` or `nil` if the port is closed.\n"
"\n"
"For more information, see [`:erlang.port_info/2`](http://www.erlang.org/doc/"
"man/erlang.html#port_info-2).\n"
msgstr ""
"`port`に関する情報を返します。ポートが閉じていたら`nil`を返します。\n"
"\n"
"詳細は、[`:erlang.port_info/2`](http://www.erlang.org/doc/man/erlang."
"html#port_info-2)を参照してください。\n"

#. TRANSLATORS: def Port.command(port, data, options \\ [])
#: lib/port.ex:204
msgid ""
"Sends `data` to the port driver `port`.\n"
"\n"
"For more information, see [`:erlang.port_command/2`](http://www.erlang.org/"
"doc/man/erlang.html#port_command-2).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"ポートドライバ`port`へ`data`を送信します。\n"
"\n"
"詳細は、[`:erlang.port_command/2`](http://www.erlang.org/doc/man/erlang."
"html#port_command-2)\n"
"を参照してください。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Port.info(port)
#: lib/port.ex:228
msgid ""
"Returns information about the `port` or `nil` if the port is closed.\n"
"\n"
"For more information, see [`:erlang.port_info/1`](http://www.erlang.org/doc/"
"man/erlang.html#port_info-1).\n"
msgstr ""
"`port`に関する情報を返します。ポートが閉じていたら`nil`を返します。\n"
"\n"
"詳細は、[`:erlang.port_info/1`](http://www.erlang.org/doc/man/erlang."
"html#port_info-1)\n"
"を参照してください。\n"

#. TRANSLATORS: def Port.open(name, settings)
#: lib/port.ex:167
msgid ""
"Opens a port given a tuple `name` and a list of `options`.\n"
"\n"
"The module documentation above contains documentation and examples\n"
"for the supported `name` values, summarized below:\n"
"\n"
"  * `{:spawn, command}` - runs an external program. `command` must contain\n"
"    the program name and optionally a list of arguments separated by space.\n"
"    If passing programs or arguments with space in their name, use the next "
"option.\n"
"  * `{:spawn_executable, filename}` - runs the executable given by the "
"absolute\n"
"    file name `filename`. Arguments can be passed via the `:args` option.\n"
"  * `{:spawn_driver, command}` - spawns so-called port drivers.\n"
"  * `{:fd, fd_in, fd_out}` - accesses file descriptors, `fd_in` and "
"`fd_out`\n"
"    opened by the VM.\n"
"\n"
"For more information and the list of options, see\n"
"[`:erlang.open_port/2`](http://www.erlang.org/doc/man/erlang."
"html#open_port-2).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"指定されたタプル`name`と`options`のリストでポートを開きます。\n"
"\n"
"最初にあるこのモジュールのドキュメントに、サポートされている`name`の\n"
"値のドキュメントと例が含まれています。まとめると次のようになります。\n"
"\n"
"  * `{:spawn, command}` - 外部プログラムを実行します。`command`はプログラム名"
"と\n"
"    オプションの空白区切りの引数のリストを含んでいなければなりません。名前の"
"中に\n"
"    空白を含むプログラムまたは引数を渡す場合は次のオプションを使用してくださ"
"い。\n"
"  * `{:spawn_executable, filename}` - 絶対ファイル名で指定された実行可能プロ"
"グラムを実行します。\n"
"    引数は`:args`オプションで渡す事ができます。\n"
"  * `{:spawn_driver, command}` - いわゆるポートドライバを生成します。\n"
"  * `{:fd, fd_in, fd_out}` - VMにより開かれたファイル記述子`fd_in`と`fd_out`"
"に\n"
"    アクセスします。\n"
"\n"
"詳細とオプションのリストは、[`:erlang.open_port/2`]\n"
"(http://www.erlang.org/doc/man/erlang.html#open_port-2) を参照してくださ"
"い。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Port.close(port)
#: lib/port.ex:192
msgid ""
"Closes the `port`.\n"
"\n"
"For more information, see [`:erlang.port_close/1`](http://www.erlang.org/doc/"
"man/erlang.html#port_close-1).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`port`を閉じます。\n"
"\n"
"詳細は、[`:erlang.port_close/1`](http://www.erlang.org/doc/man/erlang."
"html#port_close-1)\n"
"を参照してください。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Port.connect(port, pid)
#: lib/port.ex:216
msgid ""
"Associates the `port` identifier with a `pid`.\n"
"\n"
"For more information, see [`:erlang.port_connect/2`](http://www.erlang.org/"
"doc/man/erlang.html#port_connect-2).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`pid`に`port`識別子を関連付けます。\n"
"\n"
"詳細は、[`:erlang.port_connect/2`](http://www.erlang.org/doc/man/erlang."
"html#port_connect-2)\n"
"を参照してください。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: Elixir.Port Summary
#: lib/port.ex:2
msgid ""
"Functions for interacting with the external world through ports.\n"
"\n"
"Ports provide a mechanism to start operating system processes external\n"
"to the Erlang VM and communicate with them via message passing.\n"
"\n"
"## Example\n"
"\n"
"    iex> port = Port.open({:spawn, \"cat\"}, [:binary])\n"
"    iex> send port, {self(), {:command, \"hello\"}}\n"
"    iex> send port, {self(), {:command, \"world\"}}\n"
"    iex> flush()\n"
"    {#Port<0.1444>, {:data, \"hello\"}}\n"
"    {#Port<0.1444>, {:data, \"world\"}}\n"
"    iex> send port, {self(), :close}\n"
"    :ok\n"
"    iex> flush()\n"
"    {#Port<0.1464>, :closed}\n"
"    :ok\n"
"\n"
"In the example above, we have created a new port that executes the\n"
"program `cat`. `cat` is a program available on UNIX systems that\n"
"receives data from multiple inputs and concatenates them in the output.\n"
"\n"
"After the port was created, we sent it two commands in the form of\n"
"messages using `Kernel.send/2`. The first command has the binary payload\n"
"of \"hello\" and the second has \"world\".\n"
"\n"
"After sending those two messages, we invoked the IEx helper `flush()`,\n"
"which printed all messages received from the port, in this case we got\n"
"\"hello\" and \"world\" back. Notice the messages are in binary because we\n"
"passed the `:binary` option when opening the port in `Port.open/2`. Without\n"
"such option, it would have yielded a list of bytes.\n"
"\n"
"Once everything was done, we closed the port.\n"
"\n"
"Elixir provides many conveniences for working with ports and some "
"drawbacks.\n"
"We will explore those below.\n"
"\n"
"## Message and function APIs\n"
"\n"
"There are two APIs for working with ports. It can be either asynchronous "
"via\n"
"message passing, as in the example above, or by calling the functions on "
"this\n"
"module.\n"
"\n"
"The messages supported by ports and their counterpart function APIs are\n"
"listed below:\n"
"\n"
"  * `{pid, {:command, binary}}` - sends the given data to the port.\n"
"    See `command/3`.\n"
"\n"
"  * `{pid, :close}` - closes the port. Unless the port is already closed,\n"
"    the port will reply with `{port, :closed}` message once it has flushed\n"
"    its buffers and effectively closed. See `close/1`.\n"
"\n"
"  * `{pid, {:connect, new_pid}}` - sets the `new_pid` as the new owner of\n"
"    the port. Once a port is opened, the port is linked and connected to "
"the\n"
"    caller process and communication to the port only happens through the\n"
"    connected process. This message makes `new_pid` the new connected "
"processes.\n"
"    Unless the port is dead, the port will reply to the old owner with\n"
"    `{port, :connected}`. See `connect/2`.\n"
"\n"
"On its turn, the port will send the connected process the following "
"messages:\n"
"\n"
"  * `{port, {:port, data}}` - data sent by the port\n"
"  * `{port, :closed}` - reply to the `{pid, :close}` message\n"
"  * `{port, :connected}` - reply to the `{pid, {:connect, new_pid}}` "
"message\n"
"  * `{:EXIT, port, reason}` - exit signals in case the port crashes and the\n"
"    owner process is trapping exits\n"
"\n"
"## Open mechanisms\n"
"\n"
"The port can be opened through four main mechanisms.\n"
"\n"
"As a short summary, prefer to using the `:spawn` and `:spawn_executable`\n"
"options mentioned below. The other two options, `:spawn_driver` and `:fd`\n"
"are for advanced usage within the VM. Also consider using `System.cmd/3`\n"
"if all you want is to execute a program and retrieve its return value.\n"
"\n"
"### spawn\n"
"\n"
"The `:spawn` tuple receives a binary that is going to be executed as a\n"
"full invocation. For example, we can use it to invoke \"echo hello\" "
"directly:\n"
"\n"
"    iex> port = Port.open({:spawn, \"echo oops\"}, [:binary])\n"
"    iex> flush()\n"
"    {#Port<0.1444>, {:data, \"oops\\n\"}}\n"
"\n"
"`:spawn` will retrieve the program name from the argument and traverse your\n"
"OS `$PATH` environment variable looking for a matching program.\n"
"\n"
"Although the above is handy, it means it is impossible to invoke an "
"executable\n"
"that has whitespaces on its name or in any of its arguments. For those "
"reasons,\n"
"most times it is preferrable to execute `:spawn_executable`.\n"
"\n"
"### spawn_executable\n"
"\n"
"Spawn executable is a more restricted and explicit version of spawn. It "
"expects\n"
"full file paths to the executable you want to execute. If they are in your `"
"$PATH`,\n"
"they can be retrieved by calling `System.find_executable/1`:\n"
"\n"
"    iex> path = System.find_executable(\"echo\")\n"
"    iex> port = Port.open({:spawn_executable, path}, [:binary, args: "
"[\"hello world\"]])\n"
"    iex> flush()\n"
"    {#Port<0.1380>, {:data, \"hello world\\n\"}}\n"
"\n"
"When using `:spawn_executable`, the list of arguments can be passed via\n"
"the `:args` option as done above. For the full list of options, see the\n"
"documentation for the Erlang function `:erlang.open_port/2`.\n"
"\n"
"### spawn_driver\n"
"\n"
"Spawn driver is used to start Port Drivers, which are programs written in\n"
"C that implements a specific communication protocols and are dynamically\n"
"linked to the Erlang VM. Port drivers are an advanced topic and one of the\n"
"mechanisms for integrating C code, alongside NIFs. For more information,\n"
"[please check the Erlang docs](http://erlang.org/doc/reference_manual/ports."
"html).\n"
"\n"
"### fd\n"
"\n"
"The `:fd` name option allows developers to access `in` and `out` file\n"
"descriptors used by the Erlang VM. You would use those only if you are\n"
"reimplementing core part of the Runtime System, such as the `:user` and\n"
"`:shell` processes.\n"
"\n"
"## Zombie processes\n"
"\n"
"A port can be closed via the `close/1` function or by sending a `{pid, :"
"close}`\n"
"message. However, if the VM crashes, a long-running program started by the "
"port\n"
"will have its stdin and stdout channels closed but **it won't be "
"automatically\n"
"terminated**.\n"
"\n"
"While most UNIX command line tools will exit once its communication "
"channels\n"
"are closed, not all command line applications will do so. While we "
"encourage\n"
"graceful termination by detecting if stdin/stdout has been closed, we do "
"not\n"
"always have control over how 3rd party software terminates. In those cases,\n"
"you can wrap the application in a script that checks for stdin. Here is "
"such\n"
"script in bash:\n"
"\n"
"    #!/bin/sh\n"
"    \"$@\"\n"
"    pid=$!\n"
"    while read line ; do\n"
"      :\n"
"    done\n"
"    kill -KILL $pid\n"
"\n"
"\n"
"Now instead of:\n"
"\n"
"    Port.open({:spawn_executable, \"/path/to/program\"},\n"
"              [args: [\"a\", \"b\", \"c\"]])\n"
"\n"
"You may invoke:\n"
"\n"
"    Port.open({:spawn_executable, \"/path/to/wrapper\"},\n"
"              [args: [\"/path/to/program\", \"a\", \"b\", \"c\"]])\n"
"\n"
msgstr ""
"ポートを通じて外部世界と対話するための関数です。\n"
"\n"
"ポートは、Erlang VMの外部でオペレーティングシステムのプロセスを起動し、\n"
"メッセージのやり取りを通じてそれらと通信するための機構を提供します。\n"
"\n"
"## 例\n"
"\n"
"    iex> port = Port.open({:spawn, \"cat\"}, [:binary])\n"
"    iex> send port, {self(), {:command, \"hello\"}}\n"
"    iex> send port, {self(), {:command, \"world\"}}\n"
"    iex> flush()\n"
"    {#Port<0.1444>, {:data, \"hello\"}}\n"
"    {#Port<0.1444>, {:data, \"world\"}}\n"
"    iex> send port, {self(), :close}\n"
"    :ok\n"
"    iex> flush()\n"
"    {#Port<0.1464>, :closed}\n"
"    :ok\n"
"\n"
"上の例では`cat`というプログラムを実行する新しいポートを作成しました。 \n"
"`cat`はUNIXシステムで利用可能なプログラムで、複数の入力からデータを\n"
"受け取り、それらを連結して出力します。\n"
"\n"
"ポートを作成した後、`Kernel.send/2`を使用して2つのコマンドを\n"
"メッセージの形式で送信しました。最初のコマンドはバイナリペイロードが\n"
"\"hello\"で、2番目は \"world\"です。\n"
"\n"
"これら2つのメッセージを送信した後、ポートから受信したすべてのメッセージを\n"
"出力するIExヘルパの`flush()`を呼び出しました。この場合、「hello」と「world」"
"が\n"
"戻ってきました。`Port.open/2`でポートを開く際に`:binary`オプションを渡したの"
"で、\n"
"メッセージはバイナリであることに注意してください。 このオプションがなけれ"
"ば、\n"
"バイトのリストが得られます。\n"
"\n"
"すべてが完了したら、ポートを閉じました。\n"
"\n"
"Elixirはポートと返信を扱うための多くの利便性を提供します。 \n"
"以下でそれらを探っていきます。\n"
"\n"
"## メッセージAPIと関数API\n"
"\n"
"ポートの操作には2つのAPIがあります。これは、上の例のように、\n"
"メッセージのやり取りによる非同期のものと、このモジュールの関数の\n"
"呼び出しによるもののいずれかです。\n"
"\n"
"ポートとそれに対応する関数APIでサポートされているメッセージを\n"
"以下に示します。\n"
"\n"
"  * `{pid, {:command, binary}}` - 指定されたデータをポートに送ります。\n"
"    `command/3`を参照してください。\n"
"\n"
"  * `{pid, :close}` - ポートを閉じます。ポートがすでに閉じられていない限"
"り、\n"
"    ポートはバッファをフラッシュして効果的に閉じると、 `{port, :closed}`\n"
"    メッセージで応答します。`close/1`を参照してください。\n"
"\n"
"  * `{pid, {:connect, new_pid}}` - `new_pid`をポートの新しい所有者に\n"
"    設定します。ポートが開かれると、ポートは呼び出し元プロセスにリンク・\n"
"    接続され、ポートへの通信は接続されたプロセスを通じてのみ行われます。\n"
"    このメッセージは、`new_pid`を新しい接続プロセスにします。ポートが\n"
"    停止していない限り、ポートは`{port, :connected}`で古い所有者に応答しま"
"す。\n"
"     `connect/2`を参照してください。\n"
"\n"
"次に、ポートは接続されたプロセスに次のメッセージを送信します。\n"
"\n"
"  * `{port, {:port, data}}` - ポートから送信されたデータ\n"
"  * `{port, :closed}` - `{pid, :close}`メッセージに応答する\n"
"  * `{port, :connected}` - `{pid, {:connect, new_pid}}`メッセージに応答しま"
"す\n"
"  * `{:EXIT, port, reason}` - ポートがクラッシュし、所有者プロセスが終了をト"
"ラップしてる\n"
"   場合の終了シグナル\n"
"\n"
"## オープン機構\n"
"\n"
"ポートは4つの主要な機構を通じて開くことができます。\n"
"\n"
"簡単にまとめると、以下で示す`:spawn`および`:spawn_executable`\n"
"オプションの使用を勧めします。 その他の2つのオプション`:spawn_driver`\n"
"と`:fd`はVM内での高度な使用法です。 また、プログラムを実行して\n"
"その戻り値を取得したいだけであれば、`System.cmd/3`の使用を検討してくださ"
"い。\n"
"\n"
"### spawn\n"
"\n"
"`:spawn`タプルは、完全な呼び出しとして実行されるバイナリを受け取ります。\n"
"たとえば、 \"echo hello\"を直接呼び出すために使うことができます：\n"
"\n"
"    iex> port = Port.open({:spawn, \"echo oops\"}, [:binary])\n"
"    iex> flush()\n"
"    {#Port<0.1444>, {:data, \"oops\\n\"}}\n"
"\n"
"`:spawn`は引数からプログラム名を取得し、OSの`$PATH`環境変数を\n"
"調べて一致するプログラムを探します。\n"
"\n"
"これは便利ですが、その名前または引数のいずれかに空白を含む実行可能\n"
"ファイルを呼び出すことはできないことを意味します。 こうした理由から、\n"
"ほとんどの場合、`:spawn_executable`を実行するほうが好都合です。\n"
"\n"
"### spawn_executable\n"
"\n"
":spawn_executableは、より制限された明確なバージョンの:spawnです。実行したい\n"
"実行可能ファイルのフルパスが必要です。このパスは実行可能ファイルが`$PATH`にあ"
"る\n"
"場合は、`System.find_executable/1`を呼び出すことで検索できます:\n"
"\n"
"    iex> path = System.find_executable(\"echo\")\n"
"    iex> port = Port.open({:spawn_executable, path}, [:binary, args: "
"[\"hello world\"]])\n"
"    iex> flush()\n"
"    {#Port<0.1380>, {:data, \"hello world\\n\"}}\n"
"\n"
"`:spawn_executable`を使用する際には、上でしているように`:args`オプションを"
"使って\n"
"引数のリストを渡すことができます。オプションの完全なリストについては、Erlang"
"関数\n"
"`:erlang.open_port/2`のドキュメントを参照してください。\n"
"\n"
"### spawn_driver\n"
"\n"
":spawn_driverは、特定の通信プロトコルを実装し、Erlang VMに動的に\n"
"リンクされるCで書かれたプログラムであるポートドライバを起動するために\n"
"使用されます。ポートドライバは高度な話題であり、NIFとともにCコードを\n"
"統合するための機構です。詳細については、[Erlangのドキュメントを参照してくださ"
"い]\n"
"(http://erlang.org/doc/reference_manual/ports.html)。\n"
"\n"
"### fd\n"
"\n"
"`:fd`オプションを使用すると、開発者はErlang VMで使用されている\n"
"`in`と`out`のファイル記述子にアクセスすることができます。`:user`プロセスや\n"
"`:shell`プロセスなどの、ランタイムシステムのコア部分を再実装する場合にのみ\n"
"これらを使用することになるでしょう。\n"
"\n"
"## ゾンビプロセス\n"
"\n"
"ポートは、`close/1`関数を介して、または`{pid, :close}`メッセージを送信する\n"
"ことで閉じることができます。 ただし、VMがクラッシュした場合、そのポートで\n"
"開始された長期実行プログラムは、stdinおよびstdoutチャネルは閉じられますが、\n"
"**自動的に終了させられることはありません**。\n"
"\n"
"ほとんどのUNIXコマンドラインツールは、通信チャネルが閉じられると終了します"
"が、\n"
"すべてのコマンドラインアプリケーションがそうであるわけではありません。\n"
"stdinとstdoutが閉じられているか否かを検出することによるgracefulな終了を\n"
"するように勧めますが、サードパーティ製ソフトウェアの終了方法を常に制御\n"
"できるとは限りません。 そのような場合は、stdinをチェックするスクリプトで\n"
"アプリケーションをラップします。以下はそのようなbashスクリプトです:\n"
"\n"
"    #!/bin/sh\n"
"    \"$@\"\n"
"    pid=$!\n"
"    while read line ; do\n"
"      :\n"
"    done\n"
"    kill -KILL $pid\n"
"\n"
"\n"
"これにより、次の代わりに\n"
"\n"
"    Port.open({:spawn_executable, \"/path/to/program\"},\n"
"              [args: [\"a\", \"b\", \"c\"]])\n"
"\n"
"このように実行できます:\n"
"\n"
"    Port.open({:spawn_executable, \"/path/to/wrapper\"},\n"
"              [args: [\"/path/to/program\", \"a\", \"b\", \"c\"]])\n"
"\n"

#~ msgid ""
#~ "Returns a list of the ports for the current node.\n"
#~ "\n"
#~ "For more information, see [`:erlang.ports/0`](http://www.erlang.org/doc/"
#~ "man/erlang.html#ports-0).\n"
#~ "\n"
#~ "Inlined by the compiler.\n"
#~ msgstr ""
#~ "現在のノードのポートのリストを返します。\n"
#~ "\n"
#~ "詳細は、[`:erlang.ports/0`](http://www.erlang.org/doc/man/erlang."
#~ "html#ports-0)\n"
#~ "を参照してください。\n"
#~ "\n"
#~ "コンパイラによりインライン化されます。\n"

#~ msgid "Functions related to Erlang ports.\n"
#~ msgstr "Erlangポートに関連する関数です。\n"

#~ msgid ""
#~ "Sends a synchronous control command to the `port` and returns its reply "
#~ "as a binary.\n"
#~ "\n"
#~ "Not all port drivers support this feature.\n"
#~ "\n"
#~ "For more information, see [`:erlang.port_control/3`](http://www.erlang."
#~ "org/doc/man/erlang.html#port_control-3).\n"
#~ "\n"
#~ "Inlined by the compiler.\n"
#~ msgstr ""
#~ "`port`に同期的に制御コマンドを送信し、バイナリとして\n"
#~ "応答を返します。\n"
#~ "\n"
#~ "この機能は全てのポートドライバがサポートしているわけではありません。\n"
#~ "\n"
#~ "詳細は、[`:erlang.port_control/3`](http://www.erlang.org/doc/man/erlang."
#~ "html#port_control-3)\n"
#~ "を参照してください。\n"
#~ "\n"
#~ "コンパイラによりインライン化されます。\n"

#~ msgid ""
#~ "Makes a synchronous call to the `port` and returns its reply as a term.\n"
#~ "\n"
#~ "Not all port drivers support this control feature.\n"
#~ "\n"
#~ "For more information, see [`:erlang.port_call/3`](http://www.erlang.org/"
#~ "doc/man/erlang.html#port_call-3).\n"
#~ "\n"
#~ "Inlined by the compiler.\n"
#~ msgstr ""
#~ "`port`に同期呼出しを行い、termとして応答を返します。\n"
#~ "\n"
#~ "この制御機能は全てのポートドライバでサポートされているわけではありませ"
#~ "ん。\n"
#~ "\n"
#~ "詳細は、[`:erlang.port_call/3`](http://www.erlang.org/doc/man/erlang."
#~ "html#port_call-3) を参照してください。\n"
#~ "\n"
#~ "コンパイラによりインライン化されます。\n"

#~ msgid ""
#~ "See [`:erlang.port_call/3`](http://www.erlang.org/doc/man/erlang."
#~ "html#port_call-3)\n"
#~ "\n"
#~ "Inlined by the compiler.\n"
#~ msgstr ""
#~ "[`:erlang.port_call/3`](http://www.erlang.org/doc/man/erlang."
#~ "html#port_call-3)\n"
#~ "を参照してください。\n"
#~ "\n"
#~ "コンパイラによりインライン化されます。\n"

#~ msgid ""
#~ "See [`:erlang.open_port/2`](http://www.erlang.org/doc/man/erlang."
#~ "html#open_port-2)\n"
#~ "\n"
#~ "Inlined by the compiler.\n"
#~ msgstr ""
#~ "[`:erlang.open_port/2`](http://www.erlang.org/doc/man/erlang."
#~ "html#open_port-2)\n"
#~ "を参照してください。\n"
#~ "\n"
#~ "コンパイラによりインライン化されます。\n"

#~ msgid ""
#~ "See http://www.erlang.org/doc/man/erlang.html#port_info-2.\n"
#~ "\n"
#~ "Inlined by the compiler.\n"
#~ msgstr ""
#~ "http://www.erlang.org/doc/man/erlang.html#port_info-2 を参照してくださ"
#~ "い。\n"
#~ "\n"
#~ "コンパイラによりインライン化されます。\n"

#~ msgid ""
#~ "See http://www.erlang.org/doc/man/erlang.html#port_info-1.\n"
#~ "\n"
#~ "Inlined by the compiler.\n"
#~ msgstr ""
#~ "http://www.erlang.org/doc/man/erlang.html#port_info-1 を参照してくださ"
#~ "い。\n"
#~ "\n"
#~ "コンパイラによりインライン化されます。\n"
