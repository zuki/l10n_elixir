#. TRANSLATORS: def Port.list()
#: lib/port.ex:256 
msgid ""
"Returns a list of all ports in the current node.\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
#. TRANSLATORS: def Port.info(port, spec)
#: lib/port.ex:237 
msgid ""
"Returns information about the `port` or `nil` if the port is closed.\n"
"\n"
"For more information, see [`:erlang.port_info/2`](http://www.erlang.org/doc/man/erlang.html#port_info-2).\n"
msgstr ""
#. TRANSLATORS: def Port.command(port, data, options \\ [])
#: lib/port.ex:204 
msgid ""
"Sends `data` to the port driver `port`.\n"
"\n"
"For more information, see [`:erlang.port_command/2`](http://www.erlang.org/doc/man/erlang.html#port_command-2).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
#. TRANSLATORS: def Port.info(port)
#: lib/port.ex:228 
msgid ""
"Returns information about the `port` or `nil` if the port is closed.\n"
"\n"
"For more information, see [`:erlang.port_info/1`](http://www.erlang.org/doc/man/erlang.html#port_info-1).\n"
msgstr ""
#. TRANSLATORS: def Port.open(name, settings)
#: lib/port.ex:167 
msgid ""
"Opens a port given a tuple `name` and a list of `options`.\n"
"\n"
"The module documentation above contains documentation and examples\n"
"for the supported `name` values, summarized below:\n"
"\n"
"  * `{:spawn, command}` - runs an external program. `command` must contain\n"
"    the program name and optionally a list of arguments separated by space.\n"
"    If passing programs or arguments with space in their name, use the next option.\n"
"  * `{:spawn_executable, filename}` - runs the executable given by the absolute\n"
"    file name `filename`. Arguments can be passed via the `:args` option.\n"
"  * `{:spawn_driver, command}` - spawns so-called port drivers.\n"
"  * `{:fd, fd_in, fd_out}` - accesses file descriptors, `fd_in` and `fd_out`\n"
"    opened by the VM.\n"
"\n"
"For more information and the list of options, see\n"
"[`:erlang.open_port/2`](http://www.erlang.org/doc/man/erlang.html#open_port-2).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
#. TRANSLATORS: def Port.close(port)
#: lib/port.ex:192 
msgid ""
"Closes the `port`.\n"
"\n"
"For more information, see [`:erlang.port_close/1`](http://www.erlang.org/doc/man/erlang.html#port_close-1).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
#. TRANSLATORS: def Port.connect(port, pid)
#: lib/port.ex:216 
msgid ""
"Associates the `port` identifier with a `pid`.\n"
"\n"
"For more information, see [`:erlang.port_connect/2`](http://www.erlang.org/doc/man/erlang.html#port_connect-2).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
#. TRANSLATORS: Elixir.Port Summary
#: lib/port.ex:2 
msgid ""
"Functions for interacting with the external world through ports.\n"
"\n"
"Ports provide a mechanism to start operating system processes external\n"
"to the Erlang VM and communicate with them via message passing.\n"
"\n"
"## Example\n"
"\n"
"    iex> port = Port.open({:spawn, \"cat\"}, [:binary])\n"
"    iex> send port, {self(), {:command, \"hello\"}}\n"
"    iex> send port, {self(), {:command, \"world\"}}\n"
"    iex> flush()\n"
"    {#Port<0.1444>, {:data, \"hello\"}}\n"
"    {#Port<0.1444>, {:data, \"world\"}}\n"
"    iex> send port, {self(), :close}\n"
"    :ok\n"
"    iex> flush()\n"
"    {#Port<0.1464>, :closed}\n"
"    :ok\n"
"\n"
"In the example above, we have created a new port that executes the\n"
"program `cat`. `cat` is a program available on UNIX systems that\n"
"receives data from multiple inputs and concatenates them in the output.\n"
"\n"
"After the port was created, we sent it two commands in the form of\n"
"messages using `Kernel.send/2`. The first command has the binary payload\n"
"of \"hello\" and the second has \"world\".\n"
"\n"
"After sending those two messages, we invoked the IEx helper `flush()`,\n"
"which printed all messages received from the port, in this case we got\n"
"\"hello\" and \"world\" back. Notice the messages are in binary because we\n"
"passed the `:binary` option when opening the port in `Port.open/2`. Without\n"
"such option, it would have yielded a list of bytes.\n"
"\n"
"Once everything was done, we closed the port.\n"
"\n"
"Elixir provides many conveniences for working with ports and some drawbacks.\n"
"We will explore those below.\n"
"\n"
"## Message and function APIs\n"
"\n"
"There are two APIs for working with ports. It can be either asynchronous via\n"
"message passing, as in the example above, or by calling the functions on this\n"
"module.\n"
"\n"
"The messages supported by ports and their counterpart function APIs are\n"
"listed below:\n"
"\n"
"  * `{pid, {:command, binary}}` - sends the given data to the port.\n"
"    See `command/3`.\n"
"\n"
"  * `{pid, :close}` - closes the port. Unless the port is already closed,\n"
"    the port will reply with `{port, :closed}` message once it has flushed\n"
"    its buffers and effectively closed. See `close/1`.\n"
"\n"
"  * `{pid, {:connect, new_pid}}` - sets the `new_pid` as the new owner of\n"
"    the port. Once a port is opened, the port is linked and connected to the\n"
"    caller process and communication to the port only happens through the\n"
"    connected process. This message makes `new_pid` the new connected processes.\n"
"    Unless the port is dead, the port will reply to the old owner with\n"
"    `{port, :connected}`. See `connect/2`.\n"
"\n"
"On its turn, the port will send the connected process the following messages:\n"
"\n"
"  * `{port, {:port, data}}` - data sent by the port\n"
"  * `{port, :closed}` - reply to the `{pid, :close}` message\n"
"  * `{port, :connected}` - reply to the `{pid, {:connect, new_pid}}` message\n"
"  * `{:EXIT, port, reason}` - exit signals in case the port crashes and the\n"
"    owner process is trapping exits\n"
"\n"
"## Open mechanisms\n"
"\n"
"The port can be opened through four main mechanisms.\n"
"\n"
"As a short summary, prefer to using the `:spawn` and `:spawn_executable`\n"
"options mentioned below. The other two options, `:spawn_driver` and `:fd`\n"
"are for advanced usage within the VM. Also consider using `System.cmd/3`\n"
"if all you want is to execute a program and retrieve its return value.\n"
"\n"
"### spawn\n"
"\n"
"The `:spawn` tuple receives a binary that is going to be executed as a\n"
"full invocation. For example, we can use it to invoke \"echo hello\" directly:\n"
"\n"
"    iex> port = Port.open({:spawn, \"echo oops\"}, [:binary])\n"
"    iex> flush()\n"
"    {#Port<0.1444>, {:data, \"oops\\n\"}}\n"
"\n"
"`:spawn` will retrieve the program name from the argument and traverse your\n"
"OS `$PATH` environment variable looking for a matching program.\n"
"\n"
"Although the above is handy, it means it is impossible to invoke an executable\n"
"that has whitespaces on its name or in any of its arguments. For those reasons,\n"
"most times it is preferrable to execute `:spawn_executable`.\n"
"\n"
"### spawn_executable\n"
"\n"
"Spawn executable is a more restricted and explicit version of spawn. It expects\n"
"full file paths to the executable you want to execute. If they are in your `$PATH`,\n"
"they can be retrieved by calling `System.find_executable/1`:\n"
"\n"
"    iex> path = System.find_executable(\"echo\")\n"
"    iex> port = Port.open({:spawn_executable, path}, [:binary, args: [\"hello world\"]])\n"
"    iex> flush()\n"
"    {#Port<0.1380>, {:data, \"hello world\\n\"}}\n"
"\n"
"When using `:spawn_executable`, the list of arguments can be passed via\n"
"the `:args` option as done above. For the full list of options, see the\n"
"documentation for the Erlang function `:erlang.open_port/2`.\n"
"\n"
"### spawn_driver\n"
"\n"
"Spawn driver is used to start Port Drivers, which are programs written in\n"
"C that implements a specific communication protocols and are dynamically\n"
"linked to the Erlang VM. Port drivers are an advanced topic and one of the\n"
"mechanisms for integrating C code, alongside NIFs. For more information,\n"
"[please check the Erlang docs](http://erlang.org/doc/reference_manual/ports.html).\n"
"\n"
"### fd\n"
"\n"
"The `:fd` name option allows developers to access `in` and `out` file\n"
"descriptors used by the Erlang VM. You would use those only if you are\n"
"reimplementing core part of the Runtime System, such as the `:user` and\n"
"`:shell` processes.\n"
"\n"
"## Zombie processes\n"
"\n"
"A port can be closed via the `close/1` function or by sending a `{pid, :close}`\n"
"message. However, if the VM crashes, a long-running program started by the port\n"
"will have its stdin and stdout channels closed but **it won't be automatically\n"
"terminated**.\n"
"\n"
"While most UNIX command line tools will exit once its communication channels\n"
"are closed, not all command line applications will do so. While we encourage\n"
"graceful termination by detecting if stdin/stdout has been closed, we do not\n"
"always have control over how 3rd party software terminates. In those cases,\n"
"you can wrap the application in a script that checks for stdin. Here is such\n"
"script in bash:\n"
"\n"
"    #!/bin/sh\n"
"    \"$@\"\n"
"    pid=$!\n"
"    while read line ; do\n"
"      :\n"
"    done\n"
"    kill -KILL $pid\n"
"\n"
"\n"
"Now instead of:\n"
"\n"
"    Port.open({:spawn_executable, \"/path/to/program\"},\n"
"              [args: [\"a\", \"b\", \"c\"]])\n"
"\n"
"You may invoke:\n"
"\n"
"    Port.open({:spawn_executable, \"/path/to/wrapper\"},\n"
"              [args: [\"/path/to/program\", \"a\", \"b\", \"c\"]])\n"
"\n"
msgstr ""
