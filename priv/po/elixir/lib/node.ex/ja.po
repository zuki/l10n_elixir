msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-13 23:09+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def Node.spawn(node, module, fun, args, opts)
#: lib/node.ex:202
msgid ""
"Returns the PID of a new process started by the application of\n"
"`module.function(args)` on `node`.\n"
"\n"
"If `node` does not exist, a useless PID is returned.\n"
"\n"
"For the list of available options, see\n"
"[`:erlang.spawn/5`](http://www.erlang.org/doc/man/erlang.html#spawn_opt-5).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`module.function(args)`を適用することにより起動された\n"
"新しいプロセスのPIDを返します。\n"
"\n"
"`node`が存在しない場合、使い物にならないPIDが返されます。\n"
"\n"
"利用可能なオプションのリストは、\n"
"[`:erlang.spawn/5`](http://www.erlang.org/doc/man/erlang.html#spawn_opt-5)\n"
"をチェックしてください。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.get_cookie()
#: lib/node.ex:259
msgid ""
"Returns the magic cookie of the local node.\n"
"\n"
"Returns the cookie if the node is alive, otherwise `:nocookie`.\n"
msgstr ""
"ローカルノードのマジッククッキーを返します。\n"
"\n"
"ノードが生きている場合はクッキーを、そうでなければ`:nocookie`を返します。\n"

#. TRANSLATORS: def Node.list(args)
#: lib/node.ex:69
msgid ""
"Returns a list of nodes according to argument given.\n"
"\n"
"The result returned when the argument is a list, is the list of nodes\n"
"satisfying the disjunction(s) of the list elements.\n"
"\n"
"For more information, see\n"
"[`:erlang.nodes/1`](http://www.erlang.org/doc/man/erlang.html#nodes-1).\n"
msgstr ""
"指定した引数にしたがってノードのリストを返します。\n"
"\n"
"引数がリストの場合、返される結果はリスト要素の論理和を満たすノードのリストで"
"す。\n"
"\n"
"詳細は、\n"
"[`:erlang.nodes/1`](http://www.erlang.org/doc/man/erlang.html#nodes-1)\n"
"を参照してください。\n"

#. TRANSLATORS: def Node.set_cookie(node \\ Node.self(), cookie)
#: lib/node.ex:247
msgid ""
"Sets the magic cookie of `node` to the atom `cookie`.\n"
"\n"
"The default node is `Node.self/0`, the local node. If `node` is the local "
"node,\n"
"the function also sets the cookie of all other unknown nodes to `cookie`.\n"
"\n"
"This function will raise `FunctionClauseError` if the given `node` is not "
"alive.\n"
msgstr ""
"`node`のマジッククッキーをアトム`cookie`にセットします。\n"
"\n"
"デフォルトノードは、ローカルノードの`Node.self/0`です。\n"
"`node`がローカルノードの場合、この関数は他のすべての未知のノードの\n"
"クッキーを`cookie`にセットします。\n"
"\n"
"指定した`node`が生きていない場合、この関数は`FunctionClauseError`を\n"
"発生させます。\n"

#. TRANSLATORS: def Node.start(name, type \\ :longnames, tick_time \\ 15000)
#: lib/node.ex:13
msgid ""
"Turns a non-distributed node into a distributed node.\n"
"\n"
"This functionality starts the `:net_kernel` and other\n"
"related processes.\n"
msgstr ""
"非分散ノードを分散ノードに変えます。\n"
"\n"
"この関数は`:net_kernel`と関連するその他のプロセスを起動します。\n"

#. TRANSLATORS: def Node.disconnect(node)
#: lib/node.ex:126
msgid ""
"Forces the disconnection of a node.\n"
"\n"
"This will appear to the `node` as if the local node has crashed.\n"
"This function is mainly used in the Erlang network authentication\n"
"protocols. Returns `true` if disconnection succeeds, otherwise `false`.\n"
"If the local node is not alive, the function returns `:ignored`.\n"
"\n"
"For more information, see\n"
"[`:erlang.disconnect_node/1`](http://www.erlang.org/doc/man/erlang."
"html#disconnect_node-1).\n"
msgstr ""
"ノードを強制的に切断します。\n"
"\n"
"これは`node`をローカルノードがクラッシュしたかのように見せます。\n"
"この関数は、主にErlangのネットワーク認証プロトコルで使用されます。\n"
"切断が成功した場合は`true`を、そうでない場合は`false`を返します。\n"
"ローカルノードが生きていない場合、この関数は`:ignored`を返します。\n"
"\n"
"詳細は、 \n"
"[`:erlang.disconnect_node/1`](http://www.erlang.org/doc/man/erlang."
"html#disconnect_node-1)\n"
"を参照してください。\n"

#. TRANSLATORS: def Node.list()
#: lib/node.ex:58
msgid ""
"Returns a list of all visible nodes in the system, excluding\n"
"the local node.\n"
"\n"
"Same as `list(:visible)`.\n"
msgstr ""
"ローカルノードを除く、システムのすべての可視ノードのリストを返します。\n"
"\n"
"`list(:visible)`と同じです。\n"

#. TRANSLATORS: def Node.connect(node)
#: lib/node.ex:142
msgid ""
"Establishes a connection to `node`.\n"
"\n"
"Returns `true` if successful, `false` if not, and the atom\n"
"`:ignored` if the local node is not alive.\n"
"\n"
"For more information, see\n"
"[`:net_kernel.connect_node/1`](http://www.erlang.org/doc/man/net_kernel."
"html#connect_node-1).\n"
msgstr ""
"`node`への接続を確立します。\n"
"\n"
"成功した場合は`true`を、失敗した場合は`false`を、ローカルノードが\n"
"生きていない場合はアトム`:ignored`を、返します。\n"
"\n"
"詳細は、\n"
"[`:erlang.connect_node/1`](http://www.erlang.org/doc/man/net_kernel."
"html#connect_node-1)\n"
"を参照してください。\n"

#. TRANSLATORS: def Node.spawn_link(node, fun)
#: lib/node.ex:218
msgid ""
"Returns the PID of a new linked process started by the application of `fun` "
"on `node`.\n"
"\n"
"A link is created between the calling process and the new process, "
"atomically.\n"
"If `node` does not exist, a useless PID is returned (and due to the link, an "
"exit\n"
"signal with exit reason `:noconnection` will be received).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`fun`を適用することにより起動された新しくリンクされた\n"
"プロセスのPIDを返します。\n"
"\n"
"呼び出したプロセスと新しいプロセスの間にリンクが自動的に作成されます。\n"
"`node`が存在しない場合、使いみちのないPIDが返されます（そして、\n"
"リンクされているため、終了理由`:noconnectio`の終了シグナルを\n"
"受信することになります）。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.spawn(node, fun)
#: lib/node.ex:156
msgid ""
"Returns the PID of a new process started by the application of `fun`\n"
"on `node`. If `node` does not exist, a useless PID is returned.\n"
"\n"
"For the list of available options, see\n"
"[`:erlang.spawn/2`](http://www.erlang.org/doc/man/erlang.html#spawn-2).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`fun`を適用することにより起動された新しいプロセスの\n"
"PIDを返します。`node`が存在しない場合は、使いみちのないPIDを返します。\n"
"\n"
"利用可能なオプションのリストは、\n"
"[`:erlang.spawn/2`](http://www.erlang.org/doc/man/erlang.html#spawn-2)\n"
"をチェックしてください。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.monitor(node, flag, options)
#: lib/node.ex:98
msgid ""
"Behaves as `monitor/2` except that it allows an extra\n"
"option to be given, namely `:allow_passive_connect`.\n"
"\n"
"For more information, see\n"
"[`:erlang.monitor_node/3`](http://www.erlang.org/doc/man/erlang."
"html#monitor_node-3).\n"
msgstr ""
"追加オプション`:allow_passive_connect`を指定できることを除いて、\n"
"`monitor/2`と同じです。\n"
"\n"
"詳細は、\n"
"[`:erlang.monitor_node/3`](http://www.erlang.org/doc/man/erlang."
"html#monitor_node-3)\n"
"を参照してください。\n"

#. TRANSLATORS: def Node.spawn(node, fun, opts)
#: lib/node.ex:170
msgid ""
"Returns the PID of a new process started by the application of `fun`\n"
"on `node`.\n"
"\n"
"If `node` does not exist, a useless PID is returned.\n"
"\n"
"For the list of available options, see\n"
"[`:erlang.spawn_opt/3`](http://www.erlang.org/doc/man/erlang."
"html#spawn_opt-3).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`fun`を適用することにより起動された新しいプロセスの\n"
"PIDを返します。\n"
"\n"
"`node`が存在しない場合、使い物にならないPIDが返されます。\n"
"\n"
"利用可能なオプションのリストは、\n"
"[`:erlang.spawn_opt/3`](http://www.erlang.org/doc/man/erlang."
"html#spawn_opt-3)\n"
"をチェックしてください。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: Elixir.Node Summary
#: lib/node.ex:2
msgid ""
"Functions related to VM nodes.\n"
"\n"
"Some of the functions in this module are inlined by the compiler,\n"
"similar to functions in the `Kernel` module and they are explicitly\n"
"marked in their docs as \"inlined by the compiler\". For more information\n"
"about inlined functions, check out the `Kernel` module.\n"
msgstr ""
"VMノードに関連する関数です。\n"
"\n"
"このモジュールの関数の中には、`Kernel`モジュールの関数と同じように、\n"
"コンパイラによりインライン化されるものがあります。このような関数は\n"
"ドキュメントに明示的に「コンパイラによりインライン化されます」と\n"
"記されています。インライン化関数についての詳細は、`Kernel`モジュールを\n"
"チェックしてください。\n"

#. TRANSLATORS: def Node.stop()
#: lib/node.ex:25
msgid ""
"Turns a distributed node into a non-distributed node.\n"
"\n"
"For other nodes in the network, this is the same as the node going down.\n"
"Only possible when the node was started with `Node.start/3`, otherwise\n"
"returns `{:error, :not_allowed}`. Returns `{:error, :not_found}` if the\n"
"local node is not alive.\n"
msgstr ""
"分散ノードを非分散ノードに変えます。\n"
"\n"
"ネットワークの他のノードにとって、これはノードがダウンするのと同じです。\n"
"ノードが`Node.start/3`で起動された場合のみ、この関数を呼ぶことができ、\n"
"そうでない場合は`{:error,:not_allowed}`を返します。\n"
"ローカルノードが生きていない場合は`{:error, :not_found}`を返します。\n"

#. TRANSLATORS: def Node.alive?()
#: lib/node.ex:48
msgid ""
"Returns `true` if the local node is alive.\n"
"\n"
"That is, if the node can be part of a distributed system.\n"
msgstr ""
"ローカルノードが生きている場合、`true`を返します。\n"
"\n"
"これはつまり、ノードが分散システムの一部で有り得るか否かです。\n"

#. TRANSLATORS: def Node.spawn_link(node, module, fun, args)
#: lib/node.ex:232
msgid ""
"Returns the PID of a new linked process started by the application of\n"
"`module.function(args)` on `node`.\n"
"\n"
"A link is created between the calling process and the new process, "
"atomically.\n"
"If `node` does not exist, a useless PID is returned (and due to the link, an "
"exit\n"
"signal with exit reason `:noconnection` will be received).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`module.funtion(args)`を適用することにより起動された\n"
"新しくリンクされたプロセスのPIDを返します。\n"
"\n"
"呼び出したプロセスと新しいプロセスの間にリンクが自動的に作成されます。\n"
"`node`が存在しない場合、使いみちのないPIDが返されます（そして、\n"
"リンクされているため、終了理由`:noconnectio`の終了シグナルを\n"
"受信することになります）。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.monitor(node, flag)
#: lib/node.ex:84
msgid ""
"Monitors the status of the node.\n"
"\n"
"If `flag` is `true`, monitoring is turned on.\n"
"If `flag` is `false`, monitoring is turned off.\n"
"\n"
"For more information, see\n"
"[`:erlang.monitor_node/2`](http://www.erlang.org/doc/man/erlang."
"html#monitor_node-2).\n"
msgstr ""
"ノードの状態をモニタします。\n"
"\n"
"`flag`が`true`の場合、モニタを有効にします。\n"
"`flag`が`false`の場合、モニタを無効にします。\n"
"\n"
"詳細は、\n"
"[`:erlang.monitor_node/2`](http://www.erlang.org/doc/man/erlang."
"html#monitor_node-2)\n"
"を参照してください。\n"

#. TRANSLATORS: def Node.spawn(node, module, fun, args)
#: lib/node.ex:186
msgid ""
"Returns the PID of a new process started by the application of\n"
"`module.function(args)` on `node`.\n"
"\n"
"If `node` does not exist, a useless PID is returned.\n"
"\n"
"For the list of available options, see\n"
"[`:erlang.spawn/4`](http://www.erlang.org/doc/man/erlang.html#spawn-4).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`module.function(args)`を適用することにより起動だれた\n"
"新しいプロセスのPIDを返します。\n"
"\n"
"`node`が存在しない場合、使いみちのないPIDが返されます。\n"
"\n"
"利用可能なオプションのリストは、\n"
"[`:erlang.spawn/4`](http://www.erlang.org/doc/man/erlang.html#spawn-4)\n"
"をチェックしてください。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.self()
#: lib/node.ex:38
msgid ""
"Returns the current node.\n"
"\n"
"It returns the same as the built-in `node()`.\n"
msgstr ""
"現在のノードを返します。\n"
"\n"
"ビルトイン関数`node()`と同じ結果を返します。\n"

#. TRANSLATORS: def Node.ping(node)
#: lib/node.ex:110
msgid ""
"Tries to set up a connection to node.\n"
"\n"
"Returns `:pang` if it fails, or `:pong` if it is successful.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Node.ping(:unknown_node)\n"
"    :pang\n"
"\n"
msgstr ""
"ノードへの接続をセットアップします。\n"
"\n"
"失敗した場合は`:pang`を、成功した場合は`:pong`を返します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Node.ping(:unknown_node)\n"
"    :pang\n"
"\n"
