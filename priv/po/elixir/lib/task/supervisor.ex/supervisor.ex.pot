#. TRANSLATORS: def Task.Supervisor.async_stream_nolink(supervisor, enumerable, module, function, args, options \\ [])
#: lib/task/supervisor.ex:170 
msgid ""
"Returns a stream that runs the given `module`, `function` and `args`\n"
"concurrently on each item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"are not linked to the current process, similar to `async_nolink/4`.\n"
"\n"
"See `async_stream/6` for discussion and examples.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.start_child(supervisor, fun)
#: lib/task/supervisor.ex:219 
msgid ""
"Starts a task as a child of the given `supervisor`.\n"
"\n"
"Note that the spawned process is not linked to the caller, but\n"
"only to the supervisor. This command is useful in case the\n"
"task needs to perform side-effects (like I/O) and does not need\n"
"to report back to the caller.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.async_nolink(supervisor, fun)
#: lib/task/supervisor.ex:73 
msgid ""
"Starts a task that can be awaited on.\n"
"\n"
"The `supervisor` must be a reference as defined in `Task.Supervisor`.\n"
"The task won't be linked to the caller, see `Task.async/3` for\n"
"more information.\n"
"\n"
"## Compatibility with OTP behaviours\n"
"\n"
"If you create a task using `async_nolink` inside an OTP behaviour\n"
"like `GenServer`, you should match on the message coming from the\n"
"task inside your `GenServer.handle_info/2` callback.\n"
"\n"
"The reply sent by the task will be in the format `{ref, result}`,\n"
"where `ref` is the monitor reference held by the task struct\n"
"and `result` is the return value of the task function.\n"
"\n"
"Keep in mind that, regardless of how the task created with `async_nolink`\n"
"terminates, the caller's process will always receive a `:DOWN` message\n"
"with the same `ref` value that is held by the task struct. If the task\n"
"terminates normally, the reason in the `:DOWN` message will be `:normal`.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.terminate_child(supervisor, pid)
#: lib/task/supervisor.ex:203 
msgid ""
"Terminates the child with the given `pid`.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.children(supervisor)
#: lib/task/supervisor.ex:211 
msgid ""
"Returns all children PIDs.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.async_stream_nolink(supervisor, enumerable, fun, options \\ [])
#: lib/task/supervisor.ex:187 
msgid ""
"Returns a stream that runs the given `function` concurrently on each\n"
"item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"are not linked to the current process, similar to `async_nolink/2`.\n"
"\n"
"See `async_stream/6` for discussion and examples.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.async_stream(supervisor, enumerable, module, function, args, options \\ [])
#: lib/task/supervisor.ex:112 
msgid ""
"Returns a stream that runs the given `module`, `function` and `args`\n"
"concurrently on each item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"linked to the current process, similar to `async/4`.\n"
"\n"
"When streamed, each task will emit `{:ok, val}` upon successful\n"
"completion or `{:exit, val}` if the caller is trapping exits. Results\n"
"are emitted in the same order as the original `enumerable`.\n"
"\n"
"The level of concurrency can be controlled via the `:max_concurrency`\n"
"option and defaults to `System.schedulers_online/1`. The timeout\n"
"can also be given as option and defaults to 5000 and it defaults to\n"
"the maximum amount of time to wait without a task reply.\n"
"\n"
"Finally, if you find yourself trapping exits to handle exits inside\n"
"the async stream, consider using `async_stream_nolink/6` to start tasks\n"
"that are not linked to the current process.\n"
"\n"
"## Options\n"
"\n"
"  * `:max_concurrency` - sets the maximum number of tasks to run\n"
"    at the same time. Defaults to `System.schedulers_online/1`.\n"
"  * `:timeout` - the maximum amount of time to wait without\n"
"    receiving a task reply (across all running tasks).\n"
"\n"
"## Examples\n"
"\n"
"Let's build a stream and then enumerate it:\n"
"\n"
"    stream = Task.Supervisor.async_stream(MySupervisor, collection, Mod, :expensive_fun, [])\n"
"    Enum.to_list(stream)\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.start_link(opts \\ [])
#: lib/task/supervisor.ex:20 
msgid ""
"Starts a new supervisor.\n"
"\n"
"The supported options are:\n"
"\n"
"* `:name` - used to register a supervisor name, the supported values are\n"
"  described under the `Name Registration` section in the `GenServer` module\n"
"  docs;\n"
"\n"
"* `:restart` - the restart strategy, may be `:temporary` (the default),\n"
"  `:transient` or `:permanent`. Check `Supervisor.Spec` for more info.\n"
"  Defaults to `:temporary` so tasks aren't automatically restarted when\n"
"  they complete nor in case of crashes;\n"
"\n"
"* `:shutdown` - `:brutal_kill` if the tasks must be killed directly on shutdown\n"
"  or an integer indicating the timeout value, defaults to 5000 milliseconds;\n"
"\n"
"* `:max_restarts` and `:max_seconds` - as specified in `Supervisor.Spec.supervise/2`;\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Task.Supervisor Summary
#: lib/task/supervisor.ex:2 
msgid ""
"A task supervisor.\n"
"\n"
"This module defines a supervisor which can be used to dynamically\n"
"supervise tasks. Behind the scenes, this module is implemented as a\n"
"`:simple_one_for_one` supervisor where the workers are temporary by\n"
"default (that is, they are not restarted after they die; read the docs\n"
"for `start_link/1` for more information on choosing the restart\n"
"strategy).\n"
"\n"
"See the `Task` module for more information.\n"
"\n"
"## Name registration\n"
"\n"
"A `Task.Supervisor` is bound to the same name registration rules as a\n"
"`GenServer`. Read more about them in the `GenServer` docs.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.async(supervisor, module, fun, args)
#: lib/task/supervisor.ex:61 
msgid ""
"Starts a task that can be awaited on.\n"
"\n"
"The `supervisor` must be a reference as defined in `Task.Supervisor`.\n"
"The task will still be linked to the caller, see `Task.async/3` for\n"
"more information and `async_nolink/2` for a non-linked variant.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.async_stream(supervisor, enumerable, fun, options \\ [])
#: lib/task/supervisor.ex:154 
msgid ""
"Returns a stream that runs the given `function` concurrently on each\n"
"item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"are linked to the current process, similar to `async/2`.\n"
"\n"
"See `async_stream/6` for discussion and examples.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.async_nolink(supervisor, module, fun, args)
#: lib/task/supervisor.ex:100 
msgid ""
"Starts a task that can be awaited on.\n"
"\n"
"The `supervisor` must be a reference as defined in `Task.Supervisor`.\n"
"The task won't be linked to the caller, see `Task.async/3` for\n"
"more information.\n"
msgstr ""
#. TRANSLATORS: def Task.Supervisor.start_child(supervisor, module, fun, args)
#: lib/task/supervisor.ex:232 
msgid ""
"Starts a task as a child of the given `supervisor`.\n"
"\n"
"Similar to `start_child/2` except the task is specified\n"
"by the given `module`, `fun` and `args`.\n"
msgstr ""
