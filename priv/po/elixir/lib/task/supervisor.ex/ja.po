msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-02-27 09:41+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"POT-Creation-Date: \n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def Task.Supervisor.async_stream_nolink(supervisor, enumerable, module, function, args, options \\ [])
#: lib/task/supervisor.ex:170
msgid ""
"Returns a stream that runs the given `module`, `function` and `args`\n"
"concurrently on each item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"are not linked to the current process, similar to `async_nolink/4`.\n"
"\n"
"See `async_stream/6` for discussion and examples.\n"
msgstr ""
"`enumerable`の各項目について指定された`module`の`function`を`args`で\n"
"並行に実行するストリームを返します。\n"
"\n"
"各項目は指定された`args`に追加され、各自のタスクで処理されます。\n"
"タスクは指定された`supervisor`の元で生成され、`async_nolink/4`と\n"
"同様に、現在のプロセスにリンクされません。\n"
"\n"
"説明と例については`async_stream/6`を参照してください。\n"

#. TRANSLATORS: def Task.Supervisor.start_child(supervisor, fun)
#: lib/task/supervisor.ex:219
msgid ""
"Starts a task as a child of the given `supervisor`.\n"
"\n"
"Note that the spawned process is not linked to the caller, but\n"
"only to the supervisor. This command is useful in case the\n"
"task needs to perform side-effects (like I/O) and does not need\n"
"to report back to the caller.\n"
msgstr ""
"指定された`supervisor`の子としてタスクを開始します。\n"
"\n"
"生成されるプロセスは呼び出し元にはリンクされず、スーパバイザにのみ\n"
"リンクされることに注意してください。このコマンドはタスクが副作用\n"
"(IOのような)を実行する必要があり、呼び出し元に報告を返す必要がない\n"
"場合に役に立ちます。\n"

#. TRANSLATORS: def Task.Supervisor.async_nolink(supervisor, fun)
#: lib/task/supervisor.ex:73
msgid ""
"Starts a task that can be awaited on.\n"
"\n"
"The `supervisor` must be a reference as defined in `Task.Supervisor`.\n"
"The task won't be linked to the caller, see `Task.async/3` for\n"
"more information.\n"
"\n"
"## Compatibility with OTP behaviours\n"
"\n"
"If you create a task using `async_nolink` inside an OTP behaviour\n"
"like `GenServer`, you should match on the message coming from the\n"
"task inside your `GenServer.handle_info/2` callback.\n"
"\n"
"The reply sent by the task will be in the format `{ref, result}`,\n"
"where `ref` is the monitor reference held by the task struct\n"
"and `result` is the return value of the task function.\n"
"\n"
"Keep in mind that, regardless of how the task created with "
"`async_nolink`\n"
"terminates, the caller's process will always receive a `:DOWN` message\n"
"with the same `ref` value that is held by the task struct. If the task\n"
"terminates normally, the reason in the `:DOWN` message will be `:"
"normal`.\n"
msgstr ""
"タスクを起動して、待機します。\n"
"\n"
"`supervisor`は、`Task.Supervisor`で定義されたリファレンスでなければなりま"
"せん。\n"
"タスクは呼び出し元にリンクされません。\n"
"詳細は、`Task.async/3`を参照してください。\n"
"\n"
"## OTPビヘイビアとの互換性\n"
"\n"
"`GenServer`のようなOTPビヘイビアの中で`async_nolink`を使用して\n"
"タスクを作成した場合、`GenServer.handle_info/2`コールバックの中で\n"
"タスクから送信されるメッセージを照合しなければなりません。\n"
"\n"
"タスクから送信される応答の形式は`{ref, result}`です。ここで、\n"
"`ref`はタスク構造体が保持するモニタのリファレンスです。`result`は\n"
"タスク関数の返り値です。\n"
"\n"
"`async_nolink`で作成されたタスクがどのように終了するかに関わらず、\n"
"呼び出し元のプロセスは常に、`:DOWN`メッセージとタスク構造体が保持\n"
"するものと同じ`ref`値を受信することに注意してください。タスクが正常に\n"
"終了した場合の`:DOWN`メッセージの理由は`:normal`です。\n"

#. TRANSLATORS: def Task.Supervisor.terminate_child(supervisor, pid)
#: lib/task/supervisor.ex:203
msgid "Terminates the child with the given `pid`.\n"
msgstr "指定された`pid`の子プロセスを終了させます。\n"

#. TRANSLATORS: def Task.Supervisor.children(supervisor)
#: lib/task/supervisor.ex:211
msgid "Returns all children PIDs.\n"
msgstr "すべての子プロセスのPIDを返します。\n"

#. TRANSLATORS: def Task.Supervisor.async_stream_nolink(supervisor, enumerable, fun, options \\ [])
#: lib/task/supervisor.ex:187
msgid ""
"Returns a stream that runs the given `function` concurrently on each\n"
"item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"are not linked to the current process, similar to `async_nolink/2`.\n"
"\n"
"See `async_stream/6` for discussion and examples.\n"
msgstr ""
"`enumerable`の各項目について指定された`function`を\n"
"並行に実行するストリームを返します。\n"
"\n"
"各項目は指定された`args`に追加され、各自のタスクで処理されます。\n"
"タスクは指定された`supervisor`の元で生成され、`async_nolink/2`と\n"
"同様に、現在のプロセスにはリンクされません。\n"
"\n"
"説明と例は`async_stream/6`を参照してください。\n"

#. TRANSLATORS: def Task.Supervisor.async_stream(supervisor, enumerable, module, function, args, options \\ [])
#: lib/task/supervisor.ex:112
msgid ""
"Returns a stream that runs the given `module`, `function` and `args`\n"
"concurrently on each item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"linked to the current process, similar to `async/4`.\n"
"\n"
"When streamed, each task will emit `{:ok, val}` upon successful\n"
"completion or `{:exit, val}` if the caller is trapping exits. Results\n"
"are emitted in the same order as the original `enumerable`.\n"
"\n"
"The level of concurrency can be controlled via the `:max_concurrency`\n"
"option and defaults to `System.schedulers_online/1`. The timeout\n"
"can also be given as option and defaults to 5000 and it defaults to\n"
"the maximum amount of time to wait without a task reply.\n"
"\n"
"Finally, if you find yourself trapping exits to handle exits inside\n"
"the async stream, consider using `async_stream_nolink/6` to start tasks\n"
"that are not linked to the current process.\n"
"\n"
"## Options\n"
"\n"
"  * `:max_concurrency` - sets the maximum number of tasks to run\n"
"    at the same time. Defaults to `System.schedulers_online/1`.\n"
"  * `:timeout` - the maximum amount of time to wait without\n"
"    receiving a task reply (across all running tasks).\n"
"\n"
"## Examples\n"
"\n"
"Let's build a stream and then enumerate it:\n"
"\n"
"    stream = Task.Supervisor.async_stream(MySupervisor, collection, Mod, :"
"expensive_fun, [])\n"
"    Enum.to_list(stream)\n"
msgstr ""
"`enumerable`の各項目について指定された`module`の`function`を`args`で\n"
"並行に実行するストリームを返します。\n"
"\n"
"各項目は指定された`args`に追加され、各自のタスクで処理されます。\n"
"タスクは指定された`supervisor`の元で生成され、`async/4`と\n"
"同様に、現在のプロセスにリンクされます。\n"
"\n"
"ストリーム化されている場合、各タスクは処理が成功すると\n"
"`{:ok, val}`を、呼び出し元が終了をトラップしている場合は\n"
"`{:exit, val}`を出力します。 結果は元の`enumerable`と同じ順で出力されま"
"す。\n"
"\n"
"並行性のレベルは`:max_concurrency`オプションで調整でき、\n"
"デフォルトは`System.schedulers_online/1`です。タイムアウトも\n"
"オプションで指定することができ、デフォルトは5000です。これは\n"
"タスク応答なしを待機する最大時間のデフォルトです。\n"
"\n"
"最後に、非同期ストリーム内で終了を処理するために、終了をトラップ\n"
"する場合は、`async_stream_nolink/6`を使用して、現在の\n"
"プロセスにリンクしないタスクを開始することを検討してください。\n"
"\n"
"## オプション\n"
"\n"
"  * `:max_concurrency` - 同時に実行するタスクの最大値を設定します。\n"
"    デフォルトは`System.schedulers_online/1`です。\n"
"  * `:timeout` - 応答のないタスクの受信を待機する\n"
"    最大の時間（実行中のすべてのタスクにわたる)\n"
"\n"
"## 例\n"
"\n"
"ストリームを作成して、列挙します:\n"
"\n"
"    stream = Task.Supervisor.async_stream(MySupervisor, collection, Mod, :"
"expensive_fun, [])\n"
"    Enum.to_list(stream)\n"
"\n"
"\n"
"\n"

#. TRANSLATORS: def Task.Supervisor.start_link(opts \\ [])
#: lib/task/supervisor.ex:20
msgid ""
"Starts a new supervisor.\n"
"\n"
"The supported options are:\n"
"\n"
"* `:name` - used to register a supervisor name, the supported values are\n"
"  described under the `Name Registration` section in the `GenServer` "
"module\n"
"  docs;\n"
"\n"
"* `:restart` - the restart strategy, may be `:temporary` (the default),\n"
"  `:transient` or `:permanent`. Check `Supervisor.Spec` for more info.\n"
"  Defaults to `:temporary` so tasks aren't automatically restarted when\n"
"  they complete nor in case of crashes;\n"
"\n"
"* `:shutdown` - `:brutal_kill` if the tasks must be killed directly on "
"shutdown\n"
"  or an integer indicating the timeout value, defaults to 5000 "
"milliseconds;\n"
"\n"
"* `:max_restarts` and `:max_seconds` - as specified in `Supervisor.Spec."
"supervise/2`;\n"
"\n"
msgstr ""
"新しいスーパバイザを開始します。\n"
"\n"
"サポートされているオプションは以下の通りです:\n"
"\n"
"* `:name` - スーパバイザ名を登録するために使用します。サポートされている値"
"は\n"
"  `GenServer`モジュールドキュメントの`名前の登録`セクションに記載されて\n"
"   います;\n"
"\n"
"* `:restart` - リスタート戦略。`:temporary`（デフォルト）、\n"
"  `:transient`、`:permanent`のいずれかです。 詳細は`Supervisor.Spec`を\n"
"   参照してください。デフォルトは`:temporary`です。そのため、処理を完了し"
"ても、\n"
"   クラッシュしても、タスクは自動的には再起動されません;\n"
"\n"
"* `:shutdown` - シャットダウン時にタスクを直接強制終了させる必要がある場合"
"は\n"
"  `:brutal_kill`、またはタイムアウトを示す整数で、デフォルトは5000ミリ秒で"
"す;\n"
"\n"
"* `:max_restarts` と `:max_seconds` - `Supervisor.Spec.supervise/2`で\n"
"  指定されます;\n"

#. TRANSLATORS: Elixir.Task.Supervisor Summary
#: lib/task/supervisor.ex:2
msgid ""
"A task supervisor.\n"
"\n"
"This module defines a supervisor which can be used to dynamically\n"
"supervise tasks. Behind the scenes, this module is implemented as a\n"
"`:simple_one_for_one` supervisor where the workers are temporary by\n"
"default (that is, they are not restarted after they die; read the docs\n"
"for `start_link/1` for more information on choosing the restart\n"
"strategy).\n"
"\n"
"See the `Task` module for more information.\n"
"\n"
"## Name registration\n"
"\n"
"A `Task.Supervisor` is bound to the same name registration rules as a\n"
"`GenServer`. Read more about them in the `GenServer` docs.\n"
msgstr ""
"タスクスーパバイザです。\n"
"\n"
"このモジュールは、タスクを動的に監視する\n"
"スーパバイザを定義します。内部的には、このモジュールは`:"
"simple_one_for_one`\n"
"スーパバイザとして実装されており、ワーカーの終了戦略はデフォルトではテンポ"
"ラリ\n"
"です（すなわち、ワーカーは一度死ぬと再起動されません。再起動戦略の選択に\n"
"関する詳細は`start_link/1`のドキュメントを参照してください）。\n"
"\n"
"詳細は`Task`モジュールを参照してください。\n"
"\n"
"## 名前の登録\n"
"\n"
"`Task.Supervisor`は`GenServer`と同じ名前登録規則に従います。\n"
"それについての詳細は、`GenServer`のドキュメントを参照してください。\n"

#. TRANSLATORS: def Task.Supervisor.async(supervisor, module, fun, args)
#: lib/task/supervisor.ex:61
msgid ""
"Starts a task that can be awaited on.\n"
"\n"
"The `supervisor` must be a reference as defined in `Task.Supervisor`.\n"
"The task will still be linked to the caller, see `Task.async/3` for\n"
"more information and `async_nolink/2` for a non-linked variant.\n"
msgstr ""
"タスクを起動して、待機します。\n"
"\n"
"`supervisor`は、`Task.Supervisor`で定義されたリファレンスでなければなりま"
"せん。\n"
"タスクは呼び出し元にリンクされます。詳細については`Task.async/3`を、\n"
"リンクされない姉妹関数については`async_nolink/2`を参照してください。\n"

#. TRANSLATORS: def Task.Supervisor.async_stream(supervisor, enumerable, fun, options \\ [])
#: lib/task/supervisor.ex:154
msgid ""
"Returns a stream that runs the given `function` concurrently on each\n"
"item in `enumerable`.\n"
"\n"
"Each item will be appended to the given `args` and processed by its\n"
"own task. The tasks will be spawned under the given `supervisor` and\n"
"are linked to the current process, similar to `async/2`.\n"
"\n"
"See `async_stream/6` for discussion and examples.\n"
msgstr ""
"`enumerable`の各項目について指定された`function`を\n"
"並行に実行するストリームを返します。\n"
"\n"
"各項目は指定された`args`に追加され、各自のタスクで処理されます。\n"
"タスクは指定された`supervisor`の元で生成され、`async/2`と\n"
"同様に、現在のプロセスにリンクされます。\n"
"\n"
"説明と例は`async_stream/6`を参照してください。\n"

#. TRANSLATORS: def Task.Supervisor.async_nolink(supervisor, module, fun, args)
#: lib/task/supervisor.ex:100
msgid ""
"Starts a task that can be awaited on.\n"
"\n"
"The `supervisor` must be a reference as defined in `Task.Supervisor`.\n"
"The task won't be linked to the caller, see `Task.async/3` for\n"
"more information.\n"
msgstr ""
"タスクを起動して、待機します。\n"
"\n"
"`supervisor`は、`Task.Supervisor`で定義されたリファレンスでなければなりま"
"せん。\n"
"タスクは呼び出し元にリンクされません。詳細は`Task.async/3`を\n"
"参照してください。\n"

#. TRANSLATORS: def Task.Supervisor.start_child(supervisor, module, fun, args)
#: lib/task/supervisor.ex:232
msgid ""
"Starts a task as a child of the given `supervisor`.\n"
"\n"
"Similar to `start_child/2` except the task is specified\n"
"by the given `module`, `fun` and `args`.\n"
msgstr ""
"指定した`supervisor`の子としてタスクを開始します。\n"
"\n"
"`start_child/2`と似ていますが、タスクは\n"
"`module`、`fun`、`args`で指定されます。\n"
