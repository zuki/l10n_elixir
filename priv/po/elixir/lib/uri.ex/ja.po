msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-01-31 12:04+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#. TRANSLATORS: def URI.default_port(scheme, port)
#: lib/uri.ex:48
msgid ""
"Registers the default port `port` for the given `scheme`.\n"
"\n"
"After this function is called, `port` will be returned by\n"
"`default_port/1` for the given scheme `scheme`. Note that this function\n"
"changes the default port for the given `scheme` *globally*, meaning for\n"
"every application.\n"
"\n"
"It is recommended for this function to be invoked in your\n"
"application's start callback in case you want to register\n"
"new URIs.\n"
msgstr ""
"指定されたスキーム`scheme`のデフォルトポート`port`を登録します。\n"
"\n"
"この関数を呼び出した後は、`default_port/1`でスキーム`scheme`を\n"
"指定すると`port`が返るようになります。この関数は指定された`scheme`の\n"
"デフォルトポートを*グローバルに*、すなわち、全てのアプリケーションに\n"
"おいて、変更することに注意してください。\n"
"\n"
"新しいURIを登録したい場合はアプリケーションの\n"
"起動コールバックの中でこの関数を実行することを\n"
"勧めます。\n"

#. TRANSLATORS: Elixir.URI Summary
#: lib/uri.ex:2
msgid ""
"Utilities for working with URIs.\n"
"\n"
"This module provides functions for working with URIs (for example, parsing\n"
"URIs or encoding query strings). For reference, most of the functions in "
"this\n"
"module refer to [RFC 3986](https://tools.ietf.org/html/rfc3986).\n"
msgstr ""
"URIを扱うためのユーティリティです。\n"
"\n"
"\n"
"このモジュールは、URIを操作するための関数（たとえば、URIの解析や\n"
"クエリ文字列のエンコードなど）を提供します。 参考までに、このモジュールの\n"
"ほとんどの関数は[RFC 3986](https://tools.ietf.org/html/rfc3986)を参照していま"
"す。\n"

#. TRANSLATORS: def URI.encode_query(enumerable)
#: lib/uri.ex:65
msgid ""
"Encodes an enumerable into a query string.\n"
"\n"
"Takes an enumerable that enumerates as a list of two-element\n"
"tuples (e.g., a map or a keyword list) and returns a string\n"
"in the form of `key1=value1&key2=value2...` where keys and\n"
"values are URL encoded as per `encode_www_form/1`.\n"
"\n"
"Keys and values can be any term that implements the `String.Chars`\n"
"protocol, except lists which are explicitly forbidden.\n"
"\n"
"## Examples\n"
"\n"
"    iex> hd = %{\"foo\" => 1, \"bar\" => 2}\n"
"    iex> URI.encode_query(hd)\n"
"    \"bar=2&foo=1\"\n"
"\n"
"    iex> query = %{\"key\" => \"value with spaces\"}\n"
"    iex> URI.encode_query(query)\n"
"    \"key=value+with+spaces\"\n"
"\n"
"    iex> URI.encode_query %{key: [:a, :list]}\n"
"    ** (ArgumentError) encode_query/1 values cannot be lists, got: [:a, :"
"list]\n"
"\n"
msgstr ""
"Enumerableをクエリ文字列にエンコードします。\n"
"\n"
"2要素タプルのリスト（マップやキーワードリストなど）として繰り返す\n"
"Enumerableを引数に取り、`key1_value1&key2=value2…`形式の\n"
"文字列を返します。ここで、キーと値は`encode_www_form/1`で\n"
"URLエンコードされます。\n"
"\n"
"キーと値には、明示的に禁止されているリストを除き、`String.Chars`\n"
"プロトコルを実装した任意の項が使用できます。\n"
"\n"
"## 例\n"
"\n"
"    iex> hd = %{\"foo\" => 1, \"bar\" => 2}\n"
"    iex> URI.encode_query(hd)\n"
"    \"bar=2&foo=1\"\n"
"\n"
"    iex> query = %{\"key\" => \"value with spaces\"}\n"
"    iex> URI.encode_query(query)\n"
"    \"key=value+with+spaces\"\n"
"\n"
"    iex> URI.encode_query %{key: [:a, :list]}\n"
"    ** (ArgumentError) encode_query/1 values cannot be lists, got: [:a, :"
"list]\n"
"\n"

#. TRANSLATORS: def URI.decode_query(query, map \\ %{})
#: lib/uri.ex:108
msgid ""
"Decodes a query string into a map.\n"
"\n"
"Given a query string of the form of `key1=value1&key2=value2...`, this\n"
"function inserts each key-value pair in the query string as one entry in "
"the\n"
"given `map`. Keys and values in the resulting map will be binaries. Keys "
"and\n"
"values will be percent-unescaped.\n"
"\n"
"Use `query_decoder/1` if you want to iterate over each value manually.\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.decode_query(\"foo=1&bar=2\")\n"
"    %{\"bar\" => \"2\", \"foo\" => \"1\"}\n"
"\n"
"    iex> URI.decode_query(\"percent=oh+yes%21\", %{\"starting\" => \"map"
"\"})\n"
"    %{\"percent\" => \"oh yes!\", \"starting\" => \"map\"}\n"
"\n"
msgstr ""
"クエリ文字列をマップにデコードします。\n"
"\n"
"\"key1=value1&key2=value2...\"形式のクエリ文字列が与えられると、\n"
"この関数はクエリ文字列中のキーと値の各組を指定された`map`の1エントリと\n"
"して挿入します。結果としてマップのキーと値はバイナリになります。\n"
"キーと値はパーセントアンエスケープされます。\n"
"\n"
"各値を手動で繰り返したい場合は、`query_decoder/1`を使ってください。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.decode_query(\"foo=1&bar=2\")\n"
"    %{\"bar\" => \"2\", \"foo\" => \"1\"}\n"
"\n"
"    iex> URI.decode_query(\"percent=oh+yes%21\", %{\"starting\" => \"map"
"\"})\n"
"    %{\"percent\" => \"oh yes!\", \"starting\" => \"map\"}\n"
"\n"

#. TRANSLATORS: def URI.to_string(uri)
#: lib/uri.ex:439
msgid ""
"Returns the string representation of the given `URI` struct.\n"
"\n"
"    iex> URI.to_string(URI.parse(\"http://google.com\"))\n"
"    \"http://google.com\"\n"
"\n"
"    iex> URI.to_string(%URI{scheme: \"foo\", host: \"bar.baz\"})\n"
"    \"foo://bar.baz\"\n"
"\n"
msgstr ""
"指定された`URI`構造体を表す文字列を返します。\n"
"\n"
"    iex> URI.to_string(URI.parse(\"http://google.com\"))\n"
"    \"http://google.com\"\n"
"\n"
"    iex> URI.to_string(%URI{scheme: \"foo\", host: \"bar.baz\"})\n"
"    \"foo://bar.baz\"\n"
"\n"

#. TRANSLATORS: def URI.default_port(scheme)
#: lib/uri.ex:27
msgid ""
"Returns the default port for a given scheme.\n"
"\n"
"If the scheme is unknown to the `URI` module, this function returns\n"
"`nil`. The default port for any scheme can be configured globally\n"
"via `default_port/2`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.default_port(\"ftp\")\n"
"    21\n"
"\n"
"    iex> URI.default_port(\"ponzi\")\n"
"    nil\n"
"\n"
msgstr ""
"指定されたスキームのデフォルトポートを返します。\n"
"\n"
"スキームがURIにとって未知の場合、この関数は`nil`を返します。\n"
"任意のスキームのデフォルトポートは`default_port/2`でグローバルに\n"
"構成することができます。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.default_port(\"ftp\")\n"
"    21\n"
"\n"
"    iex> URI.default_port(\"ponzi\")\n"
"    nil\n"
"\n"

#. TRANSLATORS: def URI.parse(uri)
#: lib/uri.ex:361
msgid ""
"Parses a well-formed URI reference into its components.\n"
"\n"
"Note this function expects a well-formed URI and does not perform\n"
"any validation. See the \"Examples\" section below for examples of how\n"
"`URI.parse/1` can be used to parse a wide range of URIs.\n"
"\n"
"This function uses the parsing regular expression as defined\n"
"in [RFC 3986, Appendix B](http://tools.ietf.org/html/rfc3986#appendix-B).\n"
"\n"
"When a URI is given without a port, the value returned by\n"
"`URI.default_port/1` for the URI's scheme is used for the `:port` field.\n"
"\n"
"If a `%URI{}` struct is given to this function, this function returns it\n"
"unmodified.\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.parse(\"http://elixir-lang.org/\")\n"
"    %URI{scheme: \"http\", path: \"/\", query: nil, fragment: nil,\n"
"         authority: \"elixir-lang.org\", userinfo: nil,\n"
"         host: \"elixir-lang.org\", port: 80}\n"
"\n"
"    iex> URI.parse(\"//elixir-lang.org/\")\n"
"    %URI{authority: \"elixir-lang.org\", fragment: nil, host: \"elixir-lang."
"org\",\n"
"         path: \"/\", port: nil, query: nil, scheme: nil, userinfo: nil}\n"
"\n"
"    iex> URI.parse(\"/foo/bar\")\n"
"    %URI{authority: nil, fragment: nil, host: nil, path: \"/foo/bar\",\n"
"         port: nil, query: nil, scheme: nil, userinfo: nil}\n"
"\n"
"    iex> URI.parse(\"foo/bar\")\n"
"    %URI{authority: nil, fragment: nil, host: nil, path: \"foo/bar\",\n"
"         port: nil, query: nil, scheme: nil, userinfo: nil}\n"
"\n"
msgstr ""
"整形式のURI参照をその構成要素にパースします。\n"
"\n"
"この関数は整形式のURIを期待しており、検証を行わないことに\n"
"注意してください。`URI.parse/1`を使用して広範囲のURIをパースする\n"
"方法については以下の「例」セクションを参照してください。\n"
"\n"
"この関数は、[RFC3986 付録B]\n"
"(http://tools.ietf.org/html/rfc3986#appendix-B)\n"
"で定義されている構文解析正規表現を使用します。\n"
"\n"
"ポートを持たないURIが指定された場合は、URIのスキーマに対して\n"
"`URI.default_port/1`が返す値が`:port`フィールドの値として使用されます。\n"
"\n"
"この関数に`%URI{}`構造体が指定された場合は、この関数はそれを\n"
"変更せずに返します。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.parse(\"http://elixir-lang.org/\")\n"
"    %URI{scheme: \"http\", path: \"/\", query: nil, fragment: nil,\n"
"         authority: \"elixir-lang.org\", userinfo: nil,\n"
"         host: \"elixir-lang.org\", port: 80}\n"
"\n"
"    iex> URI.parse(\"//elixir-lang.org/\")\n"
"    %URI{authority: \"elixir-lang.org\", fragment: nil, host: \"elixir-lang."
"org\",\n"
"         path: \"/\", port: nil, query: nil, scheme: nil, userinfo: nil}\n"
"\n"
"    iex> URI.parse(\"/foo/bar\")\n"
"    %URI{authority: nil, fragment: nil, host: nil, path: \"/foo/bar\",\n"
"         port: nil, query: nil, scheme: nil, userinfo: nil}\n"
"\n"
"    iex> URI.parse(\"foo/bar\")\n"
"    %URI{authority: nil, fragment: nil, host: nil, path: \"foo/bar\",\n"
"         port: nil, query: nil, scheme: nil, userinfo: nil}\n"
"\n"

#. TRANSLATORS: def URI.merge(uri, rel)
#: lib/uri.ex:452
msgid ""
"Merges two URIs.\n"
"\n"
"This function merges two URIs as per\n"
"[RFC 3986, section 5.2](http://tools.ietf.org/html/rfc3986#section-5.2).\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.merge(URI.parse(\"http://google.com\"), \"/query\") |> "
"to_string\n"
"    \"http://google.com/query\"\n"
"\n"
"    iex> URI.merge(\"http://example.com\", \"http://google.com\") |> "
"to_string\n"
"    \"http://google.com\"\n"
"\n"
msgstr ""
"2つのURIをマージします。\n"
"\n"
"この関数は2つのURIを[RFC 3986, セクション 5.2]\n"
"(http://tools.ietf.org/html/rfc3986#section-5.2)によりマージします。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.merge(URI.parse(\"http://google.com\"), \"/query\") |> "
"to_string\n"
"    \"http://google.com/query\"\n"
"\n"
"    iex> URI.merge(\"http://example.com\", \"http://google.com\") |> "
"to_string\n"
"    \"http://google.com\"\n"
"\n"

#. TRANSLATORS: def URI.encode_www_form(string)
#: lib/uri.ex:278
msgid ""
"Encodes a string as \"x-www-form-urlencoded\".\n"
"\n"
"## Example\n"
"\n"
"    iex> URI.encode_www_form(\"put: it+й\")\n"
"    \"put%3A+it%2B%D0%B9\"\n"
"\n"
msgstr ""
"文字列を\"x-www-urlencoded\"としてエンコードします。\n"
"\n"
"## Example\n"
"\n"
"    iex> URI.encode_www_form(\"put: it+й\")\n"
"    \"put%3A+it%2B%D0%B9\"\n"
"\n"

#. TRANSLATORS: def URI.char_reserved?(char)
#: lib/uri.ex:201
msgid ""
"Checks if the character is a \"reserved\" character in a URI.\n"
"\n"
"Reserved characters are specified in\n"
"[RFC 3986, section 2.2](http://tools.ietf.org/html/rfc3986#section-2.2).\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.char_reserved?(?+)\n"
"    true\n"
"\n"
msgstr ""
"文字がURIの\"予約\"文字か否かをチェックします。\n"
"\n"
"予約文字は、 \n"
"[RFC3986, セクション 2.2](http://tools.ietf.org/html/rfc3986#section-2.2)\n"
"で規定されています。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.char_reserved?(?+)\n"
"    true\n"
"\n"

#. TRANSLATORS: def URI.query_decoder(query)
#: lib/uri.ex:164
msgid ""
"Returns a stream of two-element tuples representing key-value pairs in the\n"
"given `query`.\n"
"\n"
"Key and value in each tuple will be binaries and will be percent-unescaped.\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.query_decoder(\"foo=1&bar=2\") |> Enum.to_list()\n"
"    [{\"foo\", \"1\"}, {\"bar\", \"2\"}]\n"
"\n"
msgstr ""
"指定されたクエリのキー・値の組を表す2要素タプルのストリームを\n"
"返します。\n"
"\n"
"各タプルのキーと値はバイナリであり、パーセントアンエスケープされます。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.query_decoder(\"foo=1&bar=2\") |> Enum.to_list()\n"
"    [{\"foo\", \"1\"}, {\"bar\", \"2\"}]\n"
"\n"

#. TRANSLATORS: def URI.char_unreserved?(char)
#: lib/uri.ex:218
msgid ""
"Checks if the character is a \"unreserved\" character in a URI.\n"
"\n"
"Unreserved characters are specified in\n"
"[RFC 3986, section 2.3](http://tools.ietf.org/html/rfc3986#section-2.3).\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.char_unreserved?(?_)\n"
"    true\n"
"\n"
msgstr ""
"文字が、URIの\"非予約\"文字か否かをチェックします。\n"
"\n"
"非予約文字は、 \n"
"[RFC3986, セクション 2.3](http://tools.ietf.org/html/rfc3986#section-2.3)\n"
"に規定されています。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.char_unreserved?(?_)\n"
"    true\n"
"\n"

#. TRANSLATORS: def URI.decode(uri)
#: lib/uri.ex:308
msgid ""
"Percent-unescapes a URI.\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.decode(\"http%3A%2F%2Felixir-lang.org\")\n"
"    \"http://elixir-lang.org\"\n"
"\n"
msgstr ""
"URIをパーセントアンエスケープします。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.decode(\"http%3A%2F%2Felixir-lang.org\")\n"
"    \"http://elixir-lang.org\"\n"
"\n"

#. TRANSLATORS: def URI.char_unescaped?(char)
#: lib/uri.ex:238
msgid ""
"Checks if the character is allowed unescaped in a URI.\n"
"\n"
"This is the default used by `URI.encode/2` where both\n"
"reserved and unreserved characters are kept unescaped.\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.char_unescaped?(?{)\n"
"    false\n"
"\n"
msgstr ""
"文字をURI内でエスケープしなくてもよいかチェックします。\n"
"\n"
"これは、予約文字も非予約文字もエスケープされていない`URI.encode/2`で\n"
"デフォルトとして使用されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.char_unescaped?(?{)\n"
"    false\n"
"\n"

#. TRANSLATORS: def URI.decode_www_form(string)
#: lib/uri.ex:325
msgid ""
"Decodes a string as \"x-www-form-urlencoded\".\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.decode_www_form(\"%3Call+in%2F\")\n"
"    \"<all in/\"\n"
"\n"
msgstr ""
"文字列を\"x-www-urlencoded\"としてデコードします。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.decode_www_form(\"%3Call+in%2F\")\n"
"    \"<all in/\"\n"
"\n"

#. TRANSLATORS: def URI.encode(string, predicate \\ &char_unescaped?/1)
#: lib/uri.ex:255
msgid ""
"Percent-escapes the given string.\n"
"\n"
"This function accepts a `predicate` function as an optional argument; if\n"
"passed, this function will be called with each character (byte) in `string` "
"as\n"
"its argument and should return `true` if that character should not be "
"escaped\n"
"and left as is.\n"
"\n"
"## Examples\n"
"\n"
"    iex> URI.encode(\"ftp://s-ite.tld/?value=put it+й\")\n"
"    \"ftp://s-ite.tld/?value=put%20it+%D0%B9\"\n"
"\n"
"    iex> URI.encode(\"a string\", &(&1 != ?i))\n"
"    \"a str%69ng\"\n"
"\n"
msgstr ""
"指定された文字列をパーセントエスケープします。\n"
"\n"
"この関数はオプションの引数として`predicate`関数を受け付けます。\n"
"この引数が渡された場合は、`string`中の各文字（バイト）が引数として\n"
"呼び出されます。その文字がエスケープする必要がなく、そのまま残す\n"
"場合は`true`を返さなければなりません。\n"
"\n"
"## 例\n"
"\n"
"    iex> URI.encode(\"ftp://s-ite.tld/?value=put it+й\")\n"
"    \"ftp://s-ite.tld/?value=put%20it+%D0%B9\"\n"
"\n"
"    iex> URI.encode(\"a string\", &(&1 != ?i))\n"
"    \"a str%69ng\"\n"
"\n"

#~ msgid "Utilities for working with and creating URIs.\n"
#~ msgstr "URIの作成と動作についてのユーティリティです。\n"

#~ msgid ""
#~ "Converts the URI to string.\n"
#~ "\n"
#~ "    iex> URI.to_string(URI.parse(\"http://google.com\"))\n"
#~ "    \"http://google.com\"\n"
#~ msgstr ""
#~ "URLを文字列に変換します。\n"
#~ "\n"
#~ "    iex> URI.to_string(URI.parse(\"http://google.com\"))\n"
#~ "    \"http://google.com\"\n"

#~ msgid ""
#~ "Registers a scheme with a default port.\n"
#~ "\n"
#~ "It is recommended for this function to be invoked in your\n"
#~ "application start callback in case you want to register\n"
#~ "new URIs.\n"
#~ msgstr ""
#~ "スキームのデフォルトポートを登録します。\n"
#~ "\n"
#~ "新しいURIを登録したい場合に備えて、この関数があなたの\n"
#~ "アプリケーションのstartコールバックで実行されることは\n"
#~ "推奨されます。\n"

#~ msgid "Normalizes the scheme according to the spec by downcasing it.\n"
#~ msgstr "小文字化することにより仕様に従って、schemeを正規化します。\n"
