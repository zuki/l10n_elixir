msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-25 15:38+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def Version.compile_requirement(req)
#: lib/version.ex:295
msgid ""
"Compiles a requirement to its internal representation with\n"
"`:ets.match_spec_compile/1` for faster matching.\n"
"\n"
"The internal representation is opaque and can not be converted to external\n"
"term format and then back again without losing its properties (meaning it\n"
"can not be sent to a process on another node and still remain a valid\n"
"compiled match_spec, nor can it be stored on disk).\n"
msgstr ""
"マッチを高速化するため`:ets.match_spec_compile/1`を使って、\n"
"要件を内部表現にコンパイルします。\n"
"\n"
"内部表現はオパークであり、外部項形式に変換してから、その特性を失うことなく\n"
"元に戻すことはできません（これは、正しいコンパイル済みmatch_specを保持した\n"
"まま、別のノードのプロセスを送ることも、ディスクに保存することもできない\n"
"ことを意味します）。\n"

#. TRANSLATORS: def Version.parse!(string)
#: lib/version.ex:250
msgid ""
"Parses a version string into a `Version`.\n"
"\n"
"If `string` is an invalid version, an `InvalidVersionError` is raised.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Version.parse!(\"2.0.1-alpha1\")\n"
"    #Version<2.0.1-alpha1>\n"
"\n"
"    iex> Version.parse!(\"2.0-alpha1\")\n"
"    ** (Version.InvalidVersionError) 2.0-alpha1\n"
"\n"
msgstr ""
"バージョン文字列を`Version`にパースします。\n"
"\n"
"`string`が不正なバージョンの場合、`InvalidVersionError`が\n"
"発生します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Version.parse!(\"2.0.1-alpha1\")\n"
"    #Version<2.0.1-alpha1>\n"
"\n"
"    iex> Version.parse!(\"2.0-alpha1\")\n"
"    ** (Version.InvalidVersionError) 2.0-alpha1\n"
"\n"

#. TRANSLATORS: def Version.compare(version1, version2)
#: lib/version.ex:174
msgid ""
"Compares two versions. Returns `:gt` if the first version is greater than\n"
"the second one, and `:lt` for vice versa. If the two versions are equal `:"
"eq`\n"
"is returned.\n"
"\n"
"Pre-releases are strictly less than their corresponding release versions.\n"
"\n"
"Patch segments are compared lexicographically if they are alphanumeric, and\n"
"numerically otherwise.\n"
"\n"
"Build segments are ignored, if two versions differ only in their build "
"segment\n"
"they are considered to be equal.\n"
"\n"
"Raises a `Version.InvalidVersionError` exception if any of the two are not\n"
"parsable. If given an already parsed version this function won't raise.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Version.compare(\"2.0.1-alpha1\", \"2.0.0\")\n"
"    :gt\n"
"\n"
"    iex> Version.compare(\"1.0.0-beta\", \"1.0.0-rc1\")\n"
"    :lt\n"
"\n"
"    iex> Version.compare(\"1.0.0-10\", \"1.0.0-2\")\n"
"    :gt\n"
"\n"
"    iex> Version.compare(\"2.0.1+build0\", \"2.0.1\")\n"
"    :eq\n"
"\n"
"    iex> Version.compare(\"invalid\", \"2.0.1\")\n"
"    ** (Version.InvalidVersionError) invalid\n"
"\n"
msgstr ""
"2つのバージョンを比較します。もし、第1引数のバージョンが第2引数のバージョンよ"
"り\n"
"大きい場合は`:gt`を返し、反対の場合は`:lt`を返します。\n"
"2つのバージョンが等しい場合は`:eq`を返します。\n"
"\n"
"プレリリースバージョンは対応するリリースバージョンより完全に小さいとみなされ"
"ます。\n"
"\n"
"バージョン表記のパッチ部分は、アルファベットの場合は辞書順に、それ以外は数値"
"順に\n"
"比較されます。\n"
"\n"
"バージョン表記のビルド部分は無視されます。2つのバージョンがビルド部分のみ\n"
"異なる場合は等しいとみなされます。\n"
"\n"
"どちらかのバージョンがパースできない場合、`Version.InvalidVersionError`例外"
"が\n"
"発生します。パース済みのバージョンが指定された場合は、この関数は例外を発生さ"
"せません。\n"
"\n"
"## 例\n"
"\n"
"    iex> Version.compare(\"2.0.1-alpha1\", \"2.0.0\")\n"
"    :gt\n"
"\n"
"    iex> Version.compare(\"1.0.0-beta\", \"1.0.0-rc1\")\n"
"    :lt\n"
"\n"
"    iex> Version.compare(\"1.0.0-10\", \"1.0.0-2\")\n"
"    :gt\n"
"\n"
"    iex> Version.compare(\"2.0.1+build0\", \"2.0.1\")\n"
"    :eq\n"
"\n"
"    iex> Version.compare(\"invalid\", \"2.0.1\")\n"
"    ** (Version.InvalidVersionError) invalid\n"
"\n"

#. TRANSLATORS: def Version.parse(string)
#: lib/version.ex:225
msgid ""
"Parses a version string into a `Version`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, version} = Version.parse(\"2.0.1-alpha1\")\n"
"    iex> version\n"
"    #Version<2.0.1-alpha1>\n"
"\n"
"    iex> Version.parse(\"2.0-alpha1\")\n"
"    :error\n"
"\n"
msgstr ""
"バージョン文字列を`Version`にパースします。\n"
"\n"
"## 例\n"
"\n"
"    iex> {:ok, version} = Version.parse(\"2.0.1-alpha1\")\n"
"    iex> version\n"
"    #Version<2.0.1-alpha1>\n"
"\n"
"    iex> Version.parse(\"2.0-alpha1\")\n"
"    :error\n"
"\n"

#. TRANSLATORS: Elixir.Version Summary
#: lib/version.ex:2
msgid ""
"Functions for parsing and matching versions against requirements.\n"
"\n"
"A version is a string in a specific format or a `Version`\n"
"generated after parsing via `Version.parse/1`.\n"
"\n"
"`Version` parsing and requirements follow\n"
"[SemVer 2.0 schema](http://semver.org/).\n"
"\n"
"## Versions\n"
"\n"
"In a nutshell, a version is represented by three numbers:\n"
"\n"
"    MAJOR.MINOR.PATCH\n"
"\n"
"Pre-releases are supported by appending `-[0-9A-Za-z-\\.]`:\n"
"\n"
"    \"1.0.0-alpha.3\"\n"
"\n"
"Build information can be added by appending `+[0-9A-Za-z-\\.]`:\n"
"\n"
"    \"1.0.0-alpha.3+20130417140000\"\n"
"\n"
"## Struct\n"
"\n"
"The version is represented by the Version struct and fields\n"
"are named according to Semver: `:major`, `:minor`, `:patch`,\n"
"`:pre` and `:build`.\n"
"\n"
"## Requirements\n"
"\n"
"Requirements allow you to specify which versions of a given\n"
"dependency you are willing to work against. It supports common\n"
"operators like `>=`, `<=`, `>`, `==` and friends that\n"
"work as one would expect:\n"
"\n"
"    # Only version 2.0.0\n"
"    \"== 2.0.0\"\n"
"\n"
"    # Anything later than 2.0.0\n"
"    \"> 2.0.0\"\n"
"\n"
"Requirements also support `and` and `or` for complex conditions:\n"
"\n"
"    # 2.0.0 and later until 2.1.0\n"
"    \">= 2.0.0 and < 2.1.0\"\n"
"\n"
"Since the example above is such a common requirement, it can\n"
"be expressed as:\n"
"\n"
"    \"~> 2.0.0\"\n"
"\n"
"`~>` will never include pre-release versions of its upper bound.\n"
"It can also be used to set an upper bound on only the major\n"
"version part. See the table below for `~>` requirements and\n"
"their corresponding translation.\n"
"\n"
"`~>`           | Translation\n"
":------------- | :---------------------\n"
"`~> 2.0.0`     | `>= 2.0.0 and < 2.1.0`\n"
"`~> 2.1.2`     | `>= 2.1.2 and < 2.2.0`\n"
"`~> 2.1.3-dev` | `>= 2.1.3-dev and < 2.2.0`\n"
"`~> 2.0`       | `>= 2.0.0 and < 3.0.0`\n"
"`~> 2.1`       | `>= 2.1.0 and < 3.0.0`\n"
"\n"
"When `allow_pre: false` is set the requirement will not match a\n"
"pre-release version unless the operand is a pre-release version.\n"
"The default is to allow always allow pre-releases but note that in\n"
"Hex `:allow_pre` is set to `false.` See the table below for examples.\n"
"\n"
"Requirement    | Version     | `:allow_pre` | Matches\n"
":------------- | :---------- | :----------- | :------\n"
"`~> 2.0`       | `2.1.0`     | -            | `true`\n"
"`~> 2.0`       | `3.0.0`     | -            | `false`\n"
"`~> 2.0.0`     | `2.0.1`     | -            | `true`\n"
"`~> 2.0.0`     | `2.1.0`     | -            | `false`\n"
"`~> 2.1.2`     | `2.1.3-dev` | `true`       | `true`\n"
"`~> 2.1.2`     | `2.1.3-dev` | `false`      | `false`\n"
"`~> 2.1-dev`   | `2.2.0-dev` | `false`      | `true`\n"
"`~> 2.1.2-dev` | `2.1.3-dev` | `false`      | `true`\n"
"`>= 2.1.0`     | `2.2.0-dev` | `false`      | `false`\n"
"`>= 2.1.0-dev` | `2.2.3-dev` | `true`       | `true`\n"
"\n"
msgstr ""
"要件とバージョンをパースし、マッチングする関数です。\n"
"\n"
"バージョンは指定された形式の文字列か、\n"
"`Version.parse/1`でパースされて生成された`Version`です。\n"
"\n"
"`Version`のパースと要件は [SemVer 2.0 schema](http://semver.org/) に従いま"
"す。\n"
"\n"
"## バージョン\n"
"\n"
"一言で言うとバージョンは3つの番号で表されます。\n"
"\n"
"    MAJOR.MINOR.PATCH\n"
"\n"
"`-[0-9A-Za-z-\\.]`の付加により、プレリリースがサポートされます。\n"
"\n"
"    \"1.0.0-alpha.3\"\n"
"\n"
"`+[0-9A-Za-z-\\.]`の付加により、ビルド情報を追加できます。\n"
"\n"
"    \"1.0.0-alpha.3+20130417140000\"\n"
"\n"
"## 構造体\n"
"\n"
"バージョンはVersion構造体で表され、SemVerに従って名付けられたフィールド、\n"
" `:major`, `:minor`, `:patch`, `:pre`, `:build`を持っています。\n"
"\n"
"## 要件\n"
"\n"
"要件により、指定した依存関係のどのバージョンを使用したいかを指定できます。\n"
" > =、<=、>、==などの一般的な演算子と、期待通りに動作する類似演算子をサポート"
"しています。\n"
"\n"
"    # バージョン2.0.0のみ\n"
"    \"== 2.0.0\"\n"
"\n"
"    # 2.0.0より大きい任意のバージョン\n"
"    \"> 2.0.0\"\n"
"\n"
"複雑な条件を指定するため、要件は`and`と`or`もサポートしています。\n"
"\n"
"    # 2.0.0 以上、2.1.0未満のバージョン\n"
"    \">= 2.0.0 and < 2.1.0\"\n"
"\n"
"この例は非常によくある要件なので、次のように表現できます。\n"
"\n"
"    \"~> 2.0.0\"\n"
"\n"
"`~>` は、上位バージョンのプレリリース版は含みません。上限に\n"
"majorバージョン部分だけをセットすることもできます。以下は\n"
"`~>` 要件とそれを論理演算式に変換した一覧表です。\n"
"\n"
"`~>`           | 変換後の条件式\n"
":------------- | :---------------------\n"
"`~> 2.0.0`     | `>= 2.0.0 and < 2.1.0`\n"
"`~> 2.1.2`     | `>= 2.1.2 and < 2.2.0`\n"
"`~> 2.1.3-dev` | `>= 2.1.3-dev and < 2.2.0`\n"
"`~> 2.0`       | `>= 2.0.0 and < 3.0.0`\n"
"`~> 2.1`       | `>= 2.1.0 and < 3.0.0`\n"
"\n"
"`allow_pre: false`がセットされた場合、要件は、\n"
"オペランドがプレリリースバージョンでない限り、\n"
"プレリリースバージョンにマッチしません。\n"
"デフォルトでは常にプレリリースにマッチしますが、Hexでは\n"
"`:allow_pre`が`false`にセットされていることに\n"
"注意してください。例として下の表を参照してください。\n"
"\n"
"要件    | バージョン     | `:allow_pre` | マッチ\n"
":------------- | :---------- | :----------- | :------\n"
"`~> 2.0`       | `2.1.0`     | -            | `true`\n"
"`~> 2.0`       | `3.0.0`     | -            | `false`\n"
"`~> 2.0.0`     | `2.0.1`     | -            | `true`\n"
"`~> 2.0.0`     | `2.1.0`     | -            | `false`\n"
"`~> 2.1.2`     | `2.1.3-dev` | `true`       | `true`\n"
"`~> 2.1.2`     | `2.1.3-dev` | `false`      | `false`\n"
"`~> 2.1-dev`   | `2.2.0-dev` | `false`      | `true`\n"
"`~> 2.1.2-dev` | `2.1.3-dev` | `false`      | `true`\n"
"`>= 2.1.0`     | `2.2.0-dev` | `false`      | `false`\n"
"`>= 2.1.0-dev` | `2.2.3-dev` | `true`       | `true`\n"
"\n"

#. TRANSLATORS: def Version.match?(version, requirement, opts \\ [])
#: lib/version.ex:121
msgid ""
"Checks if the given version matches the specification.\n"
"\n"
"Returns `true` if `version` satisfies `requirement`, `false` otherwise.\n"
"Raises a `Version.InvalidRequirementError` exception if `requirement` is "
"not\n"
"parsable, or `Version.InvalidVersionError` if `version` is not parsable.\n"
"If given an already parsed version and requirement this function won't\n"
"raise.\n"
"\n"
"## Options\n"
"\n"
"  * `:allow_pre` - when `false` pre-release versions will not match\n"
"    unless the operand is a pre-release version, see the table above\n"
"    for examples  (default: `true`);\n"
"\n"
"## Examples\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \">1.0.0\")\n"
"    true\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \"==1.0.0\")\n"
"    false\n"
"\n"
"    iex> Version.match?(\"foo\", \"==1.0.0\")\n"
"    ** (Version.InvalidVersionError) foo\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \"== ==1.0.0\")\n"
"    ** (Version.InvalidRequirementError) == ==1.0.0\n"
"\n"
msgstr ""
"指定したバージョンが仕様にマッチするかチェックします。\n"
"\n"
"`version`が`requirement`を満足する場合は`true`を返し、\n"
"そうでなければ`false`を返します。`requirement`がパースできない\n"
"場合は、`Version.InvalidRequirementError`例外が発生します。\n"
"また、`version`がパースできない場合は、`Version.InvalidVersionError`が\n"
"発生します。パース済みのバージョンと要件が指定された場合、\n"
"この関数は例外を発生させません。\n"
"\n"
"## オプション\n"
"\n"
"  * `:allow_pre` - `false`の場合、プレリリースバージョンは、\n"
"    オペランドがプレリリースバージョンでない限り、マッチ\n"
"    しません。上の例の表を参照してください（デフォルトは`true`）\n"
"\n"
"## 例\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \">1.0.0\")\n"
"    true\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \"==1.0.0\")\n"
"    false\n"
"\n"
"    iex> Version.match?(\"foo\", \"==1.0.0\")\n"
"    ** (Version.InvalidVersionError) foo\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \"== ==1.0.0\")\n"
"    ** (Version.InvalidRequirementError) == ==1.0.0\n"
"\n"

#. TRANSLATORS: def Version.parse_requirement(string)
#: lib/version.ex:272
msgid ""
"Parses a version requirement string into a `Version.Requirement`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, req} = Version.parse_requirement(\"== 2.0.1\")\n"
"    iex> req\n"
"    #Version.Requirement<== 2.0.1>\n"
"\n"
"    iex> Version.parse_requirement(\"== == 2.0.1\")\n"
"    :error\n"
"\n"
msgstr ""
"バージョン要件文字列を`Version.Requirement`にパースします。\n"
"\n"
"## 例\n"
"\n"
"    iex> {:ok, req} = Version.parse_requirement(\"== 2.0.1\")\n"
"    iex> req\n"
"    #Version.Requirement<== 2.0.1>\n"
"\n"
"    iex> Version.parse_requirement(\"== == 2.0.1\")\n"
"    :error\n"
"\n"
