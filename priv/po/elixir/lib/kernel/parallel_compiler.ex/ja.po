msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-03-27 10:23+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"POT-Creation-Date: \n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def Kernel.ParallelCompiler.files_to_path(files, path, options \\ [])
#: lib/kernel/parallel_compiler.ex:46
msgid ""
"Compiles the given files to the given path.\n"
"Read `files/2` for more information.\n"
msgstr ""
"指定したファイルを指定したパスにコンパイルします。\n"
"詳細は `files/2` を参照してください。\n"

#. TRANSLATORS: Elixir.Kernel.ParallelCompiler Summary
#: lib/kernel/parallel_compiler.ex:2
msgid "A module responsible for compiling files in parallel.\n"
msgstr "ファイルを並列にコンパイルすることに責任を持つモジュールです。\n"

#. TRANSLATORS: def Kernel.ParallelCompiler.files(files, options \\ [])
#: lib/kernel/parallel_compiler.ex:6
msgid ""
"Compiles the given files.\n"
"\n"
"Those files are compiled in parallel and can automatically\n"
"detect dependencies between them. Once a dependency is found,\n"
"the current file stops being compiled until the dependency is\n"
"resolved.\n"
"\n"
"If there is an error during compilation or if `warnings_as_errors`\n"
"is set to `true` and there is a warning, this function will fail\n"
"with an exception.\n"
"\n"
"This function accepts the following options:\n"
"\n"
"  * `:each_file` - for each file compiled, invokes the callback passing "
"the\n"
"    file\n"
"\n"
"  * `:each_long_compilation` - for each file that takes more than a given\n"
"    timeout (see the `:long_compilation_threshold` option) to compile, "
"invoke\n"
"    this callback passing the file as its argument\n"
"\n"
"  * `:long_compilation_threshold` - the timeout (in seconds) after the\n"
"    `:each_long_compilation` callback is invoked; defaults to `10`\n"
"\n"
"  * `:each_module` - for each module compiled, invokes the callback "
"passing\n"
"    the file, module and the module bytecode\n"
"\n"
"  * `:dest` - the destination directory for the BEAM files. When using "
"`files/2`,\n"
"    this information is only used to properly annotate the BEAM files "
"before\n"
"    they are loaded into memory. If you want a file to actually be written "
"to\n"
"    `dest`, use `files_to_path/3` instead.\n"
"\n"
"Returns the modules generated by each compiled file.\n"
msgstr ""
"指定したファイルをコンパイルします。\n"
"\n"
"ファイルは並列にコンパイルされ、ファイル間の依存性を自動的に検知します。\n"
"依存性が見付かると、現在のファイルは、依存性が解決するまで\n"
"コンパイルを停止します。\n"
"\n"
"コンパイルの間にエラーがあった、または、`warning_as_errors`が`true`に\n"
"セットされている時にワーニングがあった場合、この関数は例外とともに失敗しま"
"す。\n"
"\n"
"この関数は以下のオプションを受け付けます:\n"
"\n"
"  * `:each_file` - コンパイルされたファイル毎に、そのファイルを引数に\n"
"     コールバックを起動します\n"
"\n"
"  * `:each_long_compilation` - コンパイルに指定したタイムアウト\n"
"  （`:long_compilation_threshold`オプションを参照）以上に時間のかかったファ"
"イル\n"
"    毎に、そのファイルを引数にールバックを起動します。\n"
"\n"
"  * `:long_compilation_threshold` - `:each_long_compilation`コールバック"
"が\n"
"    呼び出されるタイムアウト値（秒単位）。デフォルトは`10`\n"
"\n"
"  * `:each_module` - コンパイルされたモジュール毎に、\n"
"     ファイルとモジュール、モジュールのバイトコードを引数にコールバックを\n"
"     起動します\n"
"\n"
"  * `:dest` - beamファイルのデスティネーションディレクトリです。\n"
"     `files/2`を使う場合、この情報はBEAMファイルがメモリにロードされる前"
"に\n"
"     BEAMファイルに適切に注釈するために使用されるだけです。実際にファイル"
"を\n"
"     `dest`に書き込みたい場合は、代わりに`files_to_path/3`を使ってくださ"
"い。\n"
"\n"
"コンパイルされた各ファイルにより生成されたモジュールを返します。\n"
