msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-27 11:48+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def Exception.format_file_line(file, line, suffix \\ "")
#: lib/exception.ex:455
msgid ""
"Formats the given `file` and `line` as shown in stacktraces.\n"
"If any of the values are `nil`, they are omitted.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Exception.format_file_line(\"foo\", 1)\n"
"    \"foo:1:\"\n"
"\n"
"    iex> Exception.format_file_line(\"foo\", nil)\n"
"    \"foo:\"\n"
"\n"
"    iex> Exception.format_file_line(nil, nil)\n"
"    \"\"\n"
"\n"
msgstr ""
"指定した`file`と`line`を、スタックトレースで見られる形に\n"
"フォーマットします。値が`nil`の場合は削除されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Exception.format_file_line(\"foo\", 1)\n"
"    \"foo:1:\"\n"
"\n"
"    iex> Exception.format_file_line(\"foo\", nil)\n"
"    \"foo:\"\n"
"\n"
"    iex> Exception.format_file_line(nil, nil)\n"
"    \"\"\n"
"\n"

#. TRANSLATORS: def Exception.format_stacktrace(trace \\ nil)
#: lib/exception.ex:380
msgid ""
"Formats the stacktrace.\n"
"\n"
"A stacktrace must be given as an argument. If not, the stacktrace\n"
"is retrieved from `Process.info/2`.\n"
msgstr ""
"スタックトレースをフォーマットします。\n"
"\n"
"スタックトレースは1引数として指定する必要があります。\n"
"指定されない場合は、スタックトレースは`Process.info/2`から取得されます。\n"

#. TRANSLATORS: def Exception.format_exit(reason)
#: lib/exception.ex:161
msgid ""
"Formats an exit. It returns a string.\n"
"\n"
"Often there are errors/exceptions inside exits. Exits are often\n"
"wrapped by the caller and provide stacktraces too. This function\n"
"formats exits in a way to nicely show the exit reason, caller\n"
"and stacktrace.\n"
msgstr ""
"exitをフォーマットします。文字列を返します。\n"
"\n"
"通常、exitの内部ではエラーや例外があります。exitは通常、呼び出し元で\n"
"ラップされ、スタックトレースも提供されます。この関数は、終了理由、\n"
"呼び出し元、スタックトレースをうまく表示するようにexitをフォーマットしま"
"す。\n"

#. TRANSLATORS: def Exception.format_mfa(module, fun, arity)
#: lib/exception.ex:411
msgid ""
"Receives a module, fun and arity and formats it\n"
"as shown in stacktraces. The arity may also be a list\n"
"of arguments.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Exception.format_mfa Foo, :bar, 1\n"
"    \"Foo.bar/1\"\n"
"\n"
"    iex> Exception.format_mfa Foo, :bar, []\n"
"    \"Foo.bar()\"\n"
"\n"
"    iex> Exception.format_mfa nil, :bar, []\n"
"    \"nil.bar()\"\n"
"\n"
"Anonymous functions are reported as -func/arity-anonfn-count-,\n"
"where func is the name of the enclosing function. Convert to\n"
"\"anonymous fn in func/arity\"\n"
msgstr ""
"モジュール、関数とアリティを受け取り、スタックトレースに表示される形に\n"
"フォーマットします。アリティには引数のリストも指定できます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Exception.format_mfa Foo, :bar, 1\n"
"    \"Foo.bar/1\"\n"
"\n"
"    iex> Exception.format_mfa Foo, :bar, []\n"
"    \"Foo.bar()\"\n"
"\n"
"    iex> Exception.format_mfa nil, :bar, []\n"
"    \"nil.bar()\"\n"
"\n"
"無名関数は-func/arity-anonfn-count-として報告されます。ここで、\n"
"funcは無名関数を含む関数の名前です。\"anonymous fn in func/arity\"に変換しま"
"す。\n"

#. TRANSLATORS: def Exception.format_stacktrace_entry(entry)
#: lib/exception.ex:343
msgid "Receives a stacktrace entry and formats it into a string.\n"
msgstr "スタックトレースエントリを受け取り、文字列にフォーマットします。\n"

#. TRANSLATORS: def Exception.format(kind, payload, stacktrace \\ nil)
#: lib/exception.ex:134
msgid ""
"Normalizes and formats throw/errors/exits and stacktraces.\n"
"\n"
"It relies on `format_banner/3` and `format_stacktrace/1`\n"
"to generate the final format.\n"
"\n"
"Note that `{:EXIT, pid}` do not generate a stacktrace though\n"
"(as they are retrieved as messages without stacktraces).\n"
msgstr ""
"throw/errors/exitsとスタックトレースを正規化してフォーマットします。\n"
"\n"
"最終的なフォーマットの生成には`format_banner/3`と`format_stacktrace/1`に\n"
"依存します。\n"
"\n"
"ただし、`{:EXIT, pid}`はスタックトレースを生成しないことに注意してください\n"
"（スタックトレースのないメッセージとして取得されるからです）。\n"

#. TRANSLATORS: def Exception.format_fa(fun, arity)
#: lib/exception.ex:397
msgid ""
"Receives an anonymous function and arity and formats it as\n"
"shown in stacktraces. The arity may also be a list of arguments.\n"
"\n"
"## Examples\n"
"\n"
"    Exception.format_fa(fn -> nil end, 1)\n"
"    #=> \"#Function<...>/1\"\n"
"\n"
msgstr ""
"無名関数とアリティを受け取り、スタックトレースに表示される形に\n"
"フォーマットします。アリティには引数のリストを指定することもできます。\n"
"\n"
"## 例\n"
"\n"
"    Exception.format_fa(fn -> nil end, 1)\n"
"    #=> \"#Function<...>/1\"\n"
"\n"

#. TRANSLATORS: def Exception.message(exception)
#: lib/exception.ex:48
msgid "Gets the message for an `exception`.\n"
msgstr "`exception`のメッセージを取得します。\n"

#. TRANSLATORS: @type kind
#: lib/exception.ex:24
msgid "The kind handled by formatting functions"
msgstr "書式整形関数により処理される種類"

#. TRANSLATORS: def Exception.exception?(term)
#: lib/exception.ex:38
msgid "Returns `true` if the given `term` is an exception.\n"
msgstr "指定した`term`が例外の場合、`true`を返します。\n"

#. TRANSLATORS: def Exception.normalize(kind, payload, stacktrace \\ nil)
#: lib/exception.ex:67
msgid ""
"Normalizes an exception, converting Erlang exceptions\n"
"to Elixir exceptions.\n"
"\n"
"It takes the `kind` spilled by `catch` as an argument and\n"
"normalizes only `:error`, returning the untouched payload\n"
"for others.\n"
"\n"
"The third argument, a stacktrace, is optional. If it is\n"
"not supplied `System.stacktrace/0` will sometimes be used\n"
"to get additional information for the `kind` `:error`. If\n"
"the stacktrace is unknown and `System.stacktrace/0` would\n"
"not return the stacktrace corresponding to the exception\n"
"an empty stacktrace, `[]`, must be used.\n"
msgstr ""
"Erlangの例外はElixirの例外へ変換することにより例外を正規化します。\n"
"\n"
"\n"
"`catch`により漏れ出た`kind`を引数にとり、`:error`だけを\n"
"正規化し、その他のためにペイロードをそのまま返します。\n"
"\n"
"第3引数のstacktraceはオプションです。指定されない場合、\n"
"`kind`が`:error`の場合は追加情報を得るために`System.stacktrace/0`が\n"
"使用されます。stacktraceが不明で、`System.stacktrace/0`が\n"
"例外に対応するスタックトレースを返さない場合は、空のスタックトレース\n"
"`[]`を指定する必要があります。\n"

#. TRANSLATORS: Elixir.Exception Summary
#: lib/exception.ex:2
msgid ""
"Functions to format throw/catch/exit and exceptions.\n"
"\n"
"Note that stacktraces in Elixir are updated on throw,\n"
"errors and exits. For example, at any given moment,\n"
"`System.stacktrace/0` will return the stacktrace for the\n"
"last throw/error/exit that occurred in the current process.\n"
"\n"
"Do not rely on the particular format returned by the `format*`\n"
"functions in this module. They may be changed in future releases\n"
"in order to better suit Elixir's tool chain. In other words,\n"
"by using the functions in this module it is guaranteed you will\n"
"format exceptions as in the current Elixir version being used.\n"
msgstr ""
"throw/catch/exitと例外をフォーマットする関数です。\n"
"\n"
"Elixirのスタックトレースはthrow、error, exitが生じた際に\n"
"更新されることに注意してください。たとえば、ある瞬間に\n"
"`System.stacktrace/0`が返すスタックトレースは、\n"
"現在のプロセスで最後におきたthrow/error/exitの\n"
"スタックトレースです。\n"
"\n"
"このモジュールの`format*`関数によって返される特定のフォーマットに\n"
"依存しないでください。Elixirのツールチェインに合わせて将来の\n"
"リリースで変更される可能性があります。言い替えれば、このモジュールの\n"
"関数を使用することにより、使用されている現在のElixirのバージョンに\n"
"合せて例外をフォーマットすることが保証されます。\n"

#. TRANSLATORS: @type t
#: lib/exception.ex:17
msgid "The exception type"
msgstr "例外型"

#. TRANSLATORS: def Exception.format_banner(kind, exception, stacktrace \\ nil)
#: lib/exception.ex:101
msgid ""
"Normalizes and formats any throw/error/exit.\n"
"\n"
"The message is formatted and displayed in the same\n"
"format as used by Elixir's CLI.\n"
"\n"
"The third argument, a stacktrace, is optional. If it is\n"
"not supplied `System.stacktrace/0` will sometimes be used\n"
"to get additional information for the `kind` `:error`. If\n"
"the stacktrace is unknown and `System.stacktrace/0` would\n"
"not return the stacktrace corresponding to the exception\n"
"an empty stacktrace, `[]`, must be used.\n"
msgstr ""
"任意のthrow、errors、exitを正規化してフォーマットします。\n"
"\n"
"メッセージは、ElixirのCLIが使うフォーマットと同じように、\n"
"フォーマットされ表示されます。\n"
"\n"
"第3引数のstacktraceはオプションです。指定されない場合、\n"
"`kind`が`:error`の場合は追加情報を得るために`System.stacktrace/0`が\n"
"使用されます。stacktraceが不明で、`System.stacktrace/0`が\n"
"例外に対応するスタックトレースを返さない場合は、空のスタックトレース\n"
"`[]`を指定する必要があります。\n"
