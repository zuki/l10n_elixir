msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-01-30 19:23+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"POT-Creation-Date: \n"
"X-Generator: Poedit 1.8.11\n"

#. TRANSLATORS: def Registry.register(registry, key, value)
#: lib/registry.ex:590
msgid ""
"Registers the current process under the given `key` in `registry`.\n"
"\n"
"A value to be associated with this registration must also be given.\n"
"This value will be retrieved whenever dispatching or doing a key\n"
"lookup.\n"
"\n"
"This function returns `{:ok, owner}` or `{:error, reason}`.\n"
"The `owner` is the pid is the registry partition responsible for\n"
"the pid. The owner is automatically linked to the caller.\n"
"\n"
"If the registry has unique keys, it will return `{:ok, owner}` unless\n"
"the key is already associated to a pid, in which case it returns\n"
"`{:error, {:already_registered, pid}}`.\n"
"\n"
"If the registry has duplicate keys, multiple registrations from the\n"
"current process under the same key are allowed.\n"
"\n"
"## Examples\n"
"\n"
"Registering under a unique registry does not allow multiple entries:\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueRegisterTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.UniqueRegisterTest, \"hello"
"\", :world)\n"
"    iex> Registry.register(Registry.UniqueRegisterTest, \"hello\", :later)\n"
"    {:error, {:already_registered, self()}}\n"
"    iex> Registry.keys(Registry.UniqueRegisterTest, self())\n"
"    [\"hello\"]\n"
"\n"
"Such is possible for duplicate registries though:\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateRegisterTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateRegisterTest, \"hello"
"\", :world)\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateRegisterTest, \"hello"
"\", :world)\n"
"    iex> Registry.keys(Registry.DuplicateRegisterTest, self())\n"
"    [\"hello\", \"hello\"]\n"
"\n"
msgstr ""
"`register`の指定された`key`の下に現在のプロセスを登録します。\n"
"\n"
"この登録に関連付けるべき値も指定する必要があります。\n"
"この値はディスパッチまたはキー検索を行う度に\n"
"取得されます。\n"
"\n"
"この関数は `{:ok, owner}`または`{:error, reason}`を返します。\n"
"`owner`はpidで、レジストリパーティションがpidを担当します。\n"
"所有者は自動的に呼び出し元にリンクされます。\n"
"\n"
"レジストリが一意なキーを保つ場合は、キーがすでにpidに関連付けれて\n"
"いない限り`{:ok, owner}`を返します。関連付けられている場合は\n"
"`{:error, {:already_registered, pid}}`を返します。\n"
"\n"
"レジストリが重複キーを持つ場合は、同じキーの下に現在のプロセスから\n"
"の複数の登録が許されます。\n"
"\n"
"## 例\n"
"\n"
"一意なレジストリの登録では複数のエントリは許されません。\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueRegisterTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.UniqueRegisterTest, \"hello"
"\", :world)\n"
"    iex> Registry.register(Registry.UniqueRegisterTest, \"hello\", :later)\n"
"    {:error, {:already_registered, self()}}\n"
"    iex> Registry.keys(Registry.UniqueRegisterTest, self())\n"
"    [\"hello\"]\n"
"\n"
"重複可のレジストリではそれが可能です。\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateRegisterTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateRegisterTest, \"hello"
"\", :world)\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateRegisterTest, \"hello"
"\", :world)\n"
"    iex> Registry.keys(Registry.DuplicateRegisterTest, self())\n"
"    [\"hello\", \"hello\"]\n"
"\n"

#. TRANSLATORS: def Registry.start_link(kind, registry, options \\ [])
#: lib/registry.ex:218
msgid ""
"Starts the registry as a supervisor process.\n"
"\n"
"Manually it can be started as:\n"
"\n"
"    Registry.start_link(:unique, MyApp.Registry)\n"
"\n"
"In your supervisor tree, you would write:\n"
"\n"
"    supervisor(Registry, [:unique, MyApp.Registry])\n"
"\n"
"For intensive workloads, the registry may also be partitioned (by "
"specifying\n"
"the `:partitions` option). If partitioning is required then a good default "
"is to\n"
"set the number of partitions to the number of schedulers available:\n"
"\n"
"    Registry.start_link(:unique, MyApp.Registry, partitions: System."
"schedulers_online())\n"
"\n"
"or:\n"
"\n"
"    supervisor(Registry, [:unique, MyApp.Registry, [partitions: System."
"schedulers_online()]])\n"
"\n"
"## Options\n"
"\n"
"The registry supports the following options:\n"
"\n"
"  * `:partitions` - the number of partitions in the registry. Defaults to "
"`1`.\n"
"  * `:listeners` - a list of named processes which are notified of `:"
"register`\n"
"    and `:unregister` events. The registered process must be monitored by "
"the\n"
"    listener if the listener wants to be notified if the registered process\n"
"    crashes.\n"
"  * `:meta` - a keyword list of metadata to be attached to the registry.\n"
"\n"
msgstr ""
"スーパバイザプロセスとしてレジストリを起動します。\n"
"\n"
"マニュアルでは次のように起動できます。\n"
"\n"
"    Registry.start_link(:unique, MyApp.Registry)\n"
"\n"
"監視ツリーでは次のように書きます。\n"
"\n"
"    supervisor(Registry, [:unique, MyApp.Registry])\n"
"\n"
"集中的な作業負荷の場合、レジストリも（`:partitions`オプションを指定する\n"
"ことにより）パーティション化することができます。 パーティション化が必要な\n"
"場合は、パーティションの数を使用可能なスケジューラーの数に設定することを\n"
"勧めます。\n"
"\n"
"    Registry.start_link(:unique, MyApp.Registry, partitions: System."
"schedulers_online())\n"
"\n"
"または:\n"
"\n"
"    supervisor(Registry, [:unique, MyApp.Registry, [partitions: System."
"schedulers_online()]])\n"
"\n"
"## オプション\n"
"\n"
"レジストリは次のオプションをサポートします。\n"
"\n"
"  * `:partitions` - レジストリにおけるパーティション数。デフォルトは`1`。\n"
"  * `:listeners` - `:register`イベントと`:unregister`イベントで通知を受け"
"る、\n"
"    名前付きプロセスのリスト。登録されたプロセスがクラッシュした場合に\n"
"    通知を受けたいリスナーにより監視されなければ\n"
"    なりません。\n"
"  * `:meta` - レジストリに添付するメタデータのキーワードリスト。\n"
"\n"

#. TRANSLATORS: def Registry.keys(registry, pid)
#: lib/registry.ex:489
msgid ""
"Returns the known keys for the given `pid` in `registry` in no particular "
"order.\n"
"\n"
"If the registry is unique, the keys are unique. Otherwise\n"
"they may contain duplicates if the process was registered\n"
"under the same key multiple times. The list will be empty\n"
"if the process is dead or it has no keys in this registry.\n"
"\n"
"## Examples\n"
"\n"
"Registering under a unique registry does not allow multiple entries:\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueKeysTest)\n"
"    iex> Registry.keys(Registry.UniqueKeysTest, self())\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.UniqueKeysTest, \"hello\", :"
"world)\n"
"    iex> Registry.register(Registry.UniqueKeysTest, \"hello\", :later) # "
"registry is :unique\n"
"    {:error, {:already_registered, self()}}\n"
"    iex> Registry.keys(Registry.UniqueKeysTest, self())\n"
"    [\"hello\"]\n"
"\n"
"Such is possible for duplicate registries though:\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateKeysTest)\n"
"    iex> Registry.keys(Registry.DuplicateKeysTest, self())\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateKeysTest, \"hello"
"\", :world)\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateKeysTest, \"hello"
"\", :world)\n"
"    iex> Registry.keys(Registry.DuplicateKeysTest, self())\n"
"    [\"hello\", \"hello\"]\n"
"\n"
msgstr ""
"指定された`registry`の`pid`に対する既知のキーを順不同で返します。\n"
"\n"
"レジストリが一意な場合、キーは一意です。そうでない場合は、\n"
"プロセスが同じキーの下に複数回登録された場合は、重複した\n"
"キーを含む可能性があります。プロセスが死んでいるか、この\n"
"レジストリにキーがない場合は、リストは空になります。\n"
"\n"
"## 例\n"
"\n"
"一意なレジストリへの登録は複数エントリを許しません。\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueKeysTest)\n"
"    iex> Registry.keys(Registry.UniqueKeysTest, self())\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.UniqueKeysTest, \"hello\", :"
"world)\n"
"    iex> Registry.register(Registry.UniqueKeysTest, \"hello\", :later) # レジ"
"ストリは :unique\n"
"    {:error, {:already_registered, self()}}\n"
"    iex> Registry.keys(Registry.UniqueKeysTest, self())\n"
"    [\"hello\"]\n"
"\n"
"重複レジストリの場合はそれが可能です。\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateKeysTest)\n"
"    iex> Registry.keys(Registry.DuplicateKeysTest, self())\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateKeysTest, \"hello"
"\", :world)\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateKeysTest, \"hello"
"\", :world)\n"
"    iex> Registry.keys(Registry.DuplicateKeysTest, self())\n"
"    [\"hello\", \"hello\"]\n"
"\n"

#. TRANSLATORS: def Registry.put_meta(registry, key, value)
#: lib/registry.ex:707
msgid ""
"Stores registry metadata.\n"
"\n"
"Atoms and tuples are allowed as keys.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.PutMetaTest)\n"
"    iex> Registry.put_meta(Registry.PutMetaTest, :custom_key, \"custom_value"
"\")\n"
"    :ok\n"
"    iex> Registry.meta(Registry.PutMetaTest, :custom_key)\n"
"    {:ok, \"custom_value\"}\n"
"    iex> Registry.put_meta(Registry.PutMetaTest, {:tuple, :key}, "
"\"tuple_value\")\n"
"    :ok\n"
"    iex> Registry.meta(Registry.PutMetaTest, {:tuple, :key})\n"
"    {:ok, \"tuple_value\"}\n"
"\n"
msgstr ""
"レジストリメタデータを格納します。\n"
"\n"
"キーにはアトムとタプルを指定できます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.PutMetaTest)\n"
"    iex> Registry.put_meta(Registry.PutMetaTest, :custom_key, \"custom_value"
"\")\n"
"    :ok\n"
"    iex> Registry.meta(Registry.PutMetaTest, :custom_key)\n"
"    {:ok, \"custom_value\"}\n"
"    iex> Registry.put_meta(Registry.PutMetaTest, {:tuple, :key}, "
"\"tuple_value\")\n"
"    :ok\n"
"    iex> Registry.meta(Registry.PutMetaTest, {:tuple, :key})\n"
"    {:ok, \"tuple_value\"}\n"
"\n"

#. TRANSLATORS: @type value
#: lib/registry.ex:168
msgid "The type of values allowed on registration"
msgstr "登録時に許される値の型"

#. TRANSLATORS: def Registry.unregister(registry, key)
#: lib/registry.ex:533
msgid ""
"Unregisters all entries for the given `key` associated to the current\n"
"process in `registry`.\n"
"\n"
"Always returns `:ok` and automatically unlinks the current process from\n"
"the owner if there are no more keys associated to the current process. See\n"
"also `register/3` to read more about the \"owner\".\n"
"\n"
"## Examples\n"
"\n"
"It unregister all entries for `key` for unique registries:\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueUnregisterTest)\n"
"    iex> Registry.register(Registry.UniqueUnregisterTest, \"hello\", :"
"world)\n"
"    iex> Registry.keys(Registry.UniqueUnregisterTest, self())\n"
"    [\"hello\"]\n"
"    iex> Registry.unregister(Registry.UniqueUnregisterTest, \"hello\")\n"
"    :ok\n"
"    iex> Registry.keys(Registry.UniqueUnregisterTest, self())\n"
"    []\n"
"\n"
"As well as duplicate registries:\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateUnregisterTest)\n"
"    iex> Registry.register(Registry.DuplicateUnregisterTest, \"hello\", :"
"world)\n"
"    iex> Registry.register(Registry.DuplicateUnregisterTest, \"hello\", :"
"world)\n"
"    iex> Registry.keys(Registry.DuplicateUnregisterTest, self())\n"
"    [\"hello\", \"hello\"]\n"
"    iex> Registry.unregister(Registry.DuplicateUnregisterTest, \"hello\")\n"
"    :ok\n"
"    iex> Registry.keys(Registry.DuplicateUnregisterTest, self())\n"
"    []\n"
"\n"
msgstr ""
"`registry`内の現在のプロセスに関連付けられている指定された\n"
"`key`に対するすべてのエントリの登録を解除します。\n"
"\n"
"現在のプロセスに関連付けられているキーがない場合は、常に`:ok`を\n"
"返し、現在のプロセスと所有者のリンクを自動的に解除します。\n"
"「所有者」についての詳細は、`register/3`を参照してください。\n"
"\n"
"## 例\n"
"\n"
"一意なレジストリの`key`に対するすべてのエントリの登録を解除します。\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueUnregisterTest)\n"
"    iex> Registry.register(Registry.UniqueUnregisterTest, \"hello\", :"
"world)\n"
"    iex> Registry.keys(Registry.UniqueUnregisterTest, self())\n"
"    [\"hello\"]\n"
"    iex> Registry.unregister(Registry.UniqueUnregisterTest, \"hello\")\n"
"    :ok\n"
"    iex> Registry.keys(Registry.UniqueUnregisterTest, self())\n"
"    []\n"
"\n"
"重複可のレジストリで同じことを。\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateUnregisterTest)\n"
"    iex> Registry.register(Registry.DuplicateUnregisterTest, \"hello\", :"
"world)\n"
"    iex> Registry.register(Registry.DuplicateUnregisterTest, \"hello\", :"
"world)\n"
"    iex> Registry.keys(Registry.DuplicateUnregisterTest, self())\n"
"    [\"hello\", \"hello\"]\n"
"    iex> Registry.unregister(Registry.DuplicateUnregisterTest, \"hello\")\n"
"    :ok\n"
"    iex> Registry.keys(Registry.DuplicateUnregisterTest, self())\n"
"    []\n"
"\n"

#. TRANSLATORS: @type meta_key
#: lib/registry.ex:171
msgid "The type of registry metadata keys"
msgstr "レジストリメタデータキーの型"

#. TRANSLATORS: def Registry.update_value(registry, key, callback)
#: lib/registry.ex:275
msgid ""
"Updates the value for `key` for the current process in the unique "
"`registry`.\n"
"\n"
"Returns a `{new_value, old_value}` tuple or `:error` if there\n"
"is no such key assigned to the current process.\n"
"\n"
"If a non-unique registry is given, an error is raised.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UpdateTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.UpdateTest, \"hello\", 1)\n"
"    iex> Registry.lookup(Registry.UpdateTest, \"hello\")\n"
"    [{self(), 1}]\n"
"    iex> Registry.update_value(Registry.UpdateTest, \"hello\", & &1 + 1)\n"
"    {2, 1}\n"
"    iex> Registry.lookup(Registry.UpdateTest, \"hello\")\n"
"    [{self(), 2}]\n"
"\n"
msgstr ""
"一意な`registry`内の現在のプロセスの`key`の値を更新します。\n"
"\n"
"タプル`{new_value, old_value}` を返します。現在のプロセスに\n"
"そのようなキーが関連付けらていない場合は、`;error`を返します。\n"
"\n"
"一意でないレジストリが指定された場合は、エラーが発生します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UpdateTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.UpdateTest, \"hello\", 1)\n"
"    iex> Registry.lookup(Registry.UpdateTest, \"hello\")\n"
"    [{self(), 1}]\n"
"    iex> Registry.update_value(Registry.UpdateTest, \"hello\", & &1 + 1)\n"
"    {2, 1}\n"
"    iex> Registry.lookup(Registry.UpdateTest, \"hello\")\n"
"    [{self(), 2}]\n"
"\n"

#. TRANSLATORS: def Registry.Partition.key_name(registry, partition)
#: lib/registry.ex:845
msgid "Returns the name of key partition table.\n"
msgstr "キーパーティションテーブルの名前を返します。\n"

#. TRANSLATORS: @type meta_value
#: lib/registry.ex:174
msgid "The type of registry metadata values"
msgstr "レジストリメタデータ値の型"

#. TRANSLATORS: @type registry
#: lib/registry.ex:159
msgid "The registry identifier"
msgstr "レジストリ識別子"

#. TRANSLATORS: def Registry.match(registry, key, pattern)
#: lib/registry.ex:439
msgid ""
"Returns `{pid, value}` pairs under the given `key` in `registry` that match "
"`pattern`.\n"
"\n"
"Pattern must be an atom or a tuple that will match the structure of the\n"
"value stored in the registry. The atom `:_` can be used to ignore a given\n"
"value or tuple element, while :\"$1\" can be used to temporarily assign "
"part\n"
"of pattern to a variable for a subsequent comparison.\n"
"\n"
"An empty list will be returned if there is no match.\n"
"\n"
"For unique registries, a single partition lookup is necessary. For\n"
"duplicate registries, all partitions must be looked up.\n"
"\n"
"## Examples\n"
"\n"
"In the example below we register the current process under the same\n"
"key in a duplicate registry but with different values:\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.MatchTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.MatchTest, \"hello\", {1, :"
"atom, 1})\n"
"    iex> {:ok, _} = Registry.register(Registry.MatchTest, \"hello\", {2, :"
"atom, 2})\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {1, :_, :_})\n"
"    [{self(), {1, :atom, 1}}]\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {2, :_, :_})\n"
"    [{self(), {2, :atom, 2}}]\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {:_, :atom, :_}) |> "
"Enum.sort()\n"
"    [{self(), {1, :atom, 1}}, {self(), {2, :atom, 2}}]\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {:\"$1\", :_, :"
"\"$1\"}) |> Enum.sort()\n"
"    [{self(), {1, :atom, 1}}, {self(), {2, :atom, 2}}]\n"
"\n"
msgstr ""
"指定された`registry`の`key`に対する`pattern`にマッチする`{pid, value}`組を返"
"します。\n"
"\n"
"パターンはレジストリに格納されている値の構造にマッチするアトムまたはタプル"
"で\n"
"なければなりません。アトム`:_`は指定された値またはタプル要素を無視するのに\n"
"使用できます。:\"$1”はパターンの一部を一時的に変数に代入し、後の比較で使用\n"
"できるようにします。\n"
"\n"
"マッチするものがない場合は空のリストが返ります。\n"
"\n"
"一意のレジストリに対しては、単一のパーティション検索が必要です。 \n"
"重複可のレジストリでは、すべてのパーティションを検索する必要があります。\n"
"\n"
"## 例\n"
"\n"
"以下の例では、重複可のレジストリの同じキーの下に、異なる値を付けて、現在の\n"
"プロセスを登録しています。\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.MatchTest)\n"
"    iex> {:ok, _} = Registry.register(Registry.MatchTest, \"hello\", {1, :"
"atom, 1})\n"
"    iex> {:ok, _} = Registry.register(Registry.MatchTest, \"hello\", {2, :"
"atom, 2})\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {1, :_, :_})\n"
"    [{self(), {1, :atom, 1}}]\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {2, :_, :_})\n"
"    [{self(), {2, :atom, 2}}]\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {:_, :atom, :_}) |> "
"Enum.sort()\n"
"    [{self(), {1, :atom, 1}}, {self(), {2, :atom, 2}}]\n"
"    iex> Registry.match(Registry.MatchTest, \"hello\", {:\"$1\", :_, :"
"\"$1\"}) |> Enum.sort()\n"
"    [{self(), {1, :atom, 1}}, {self(), {2, :atom, 2}}]\n"
"\n"

#. TRANSLATORS: def Registry.lookup(registry, key)
#: lib/registry.ex:382
msgid ""
"Finds the `{pid, value}` pair for the given `key` in `registry` in no "
"particular order.\n"
"\n"
"An empty list if there is no match.\n"
"\n"
"For unique registries, a single partition lookup is necessary. For\n"
"duplicate registries, all partitions must be looked up.\n"
"\n"
"## Examples\n"
"\n"
"In the example below we register the current process and look it up\n"
"both from itself and other processes:\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueLookupTest)\n"
"    iex> Registry.lookup(Registry.UniqueLookupTest, \"hello\")\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.UniqueLookupTest, \"hello\", :"
"world)\n"
"    iex> Registry.lookup(Registry.UniqueLookupTest, \"hello\")\n"
"    [{self(), :world}]\n"
"    iex> Task.async(fn -> Registry.lookup(Registry.UniqueLookupTest, \"hello"
"\") end) |> Task.await\n"
"    [{self(), :world}]\n"
"\n"
"The same applies to duplicate registries:\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateLookupTest)\n"
"    iex> Registry.lookup(Registry.DuplicateLookupTest, \"hello\")\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateLookupTest, \"hello"
"\", :world)\n"
"    iex> Registry.lookup(Registry.DuplicateLookupTest, \"hello\")\n"
"    [{self(), :world}]\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateLookupTest, \"hello"
"\", :another)\n"
"    iex> Enum.sort(Registry.lookup(Registry.DuplicateLookupTest, \"hello"
"\"))\n"
"    [{self(), :another}, {self(), :world}]\n"
"\n"
msgstr ""
"指定された`registry`の`key`に対する`{pid, value}`組を順不同で探します。\n"
"\n"
"マッチするものがない場合は空のリストが返ります。\n"
"\n"
"一意のレジストリに対しては、単一のパーティション検索が必要です。 \n"
"重複可のレジストリでは、すべてのパーティションを検索する必要があります。\n"
"\n"
"## 例\n"
"\n"
"以下の例では、カレントプロセスを登録して、自分自身と他のプロセスの両方から\n"
"それを検索しています。\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.UniqueLookupTest)\n"
"    iex> Registry.lookup(Registry.UniqueLookupTest, \"hello\")\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.UniqueLookupTest, \"hello\", :"
"world)\n"
"    iex> Registry.lookup(Registry.UniqueLookupTest, \"hello\")\n"
"    [{self(), :world}]\n"
"    iex> Task.async(fn -> Registry.lookup(Registry.UniqueLookupTest, \"hello"
"\") end) |> Task.await\n"
"    [{self(), :world}]\n"
"\n"
"同じことを重複可のレジストリに適用します。\n"
"\n"
"    iex> Registry.start_link(:duplicate, Registry.DuplicateLookupTest)\n"
"    iex> Registry.lookup(Registry.DuplicateLookupTest, \"hello\")\n"
"    []\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateLookupTest, \"hello"
"\", :world)\n"
"    iex> Registry.lookup(Registry.DuplicateLookupTest, \"hello\")\n"
"    [{self(), :world}]\n"
"    iex> {:ok, _} = Registry.register(Registry.DuplicateLookupTest, \"hello"
"\", :another)\n"
"    iex> Enum.sort(Registry.lookup(Registry.DuplicateLookupTest, \"hello"
"\"))\n"
"    [{self(), :another}, {self(), :world}]\n"
"\n"

#. TRANSLATORS: def Registry.dispatch(registry, key, mfa_or_fun)
#: lib/registry.ex:317
msgid ""
"Invokes the callback with all entries under `key` in each partition\n"
"for the given `registry`.\n"
"\n"
"The list of `entries` is a non-empty list of two-element tuples where\n"
"the first element is the pid and the second element is the value\n"
"associated to the pid. If there are no entries for the given key,\n"
"the callback is never invoked.\n"
"\n"
"If the registry is not partitioned, the callback is invoked in the process\n"
"that calls `dispatch/3`. If the registry is partitioned, the callback is\n"
"invoked concurrently per partition by starting a task linked to the\n"
"caller. The callback, however, is only invoked if there are entries for "
"that\n"
"partition.\n"
"\n"
"See the module documentation for examples of using the `dispatch/3`\n"
"function for building custom dispatching or a pubsub system.\n"
msgstr ""
"指定された`registry`の各パーティションで`key`の下にあるすべての\n"
"エントリを引数にコールバックを実行します。\n"
"\n"
"`entries`のリストは2要素タプルの空でないリストです。\n"
"タプルの第1要素はpidで、第2要素はpidに関連付けられる\n"
"値です。指定されたキーにエントリが存在しない場合は\n"
"コールバックは実行されません。\n"
"\n"
"レジストリが分割されていない場合は、コールバックは`dispatch/3`を\n"
"呼び出したプロセスで実行されます。レジストリが分割されている場合は、\n"
"コールバックは、呼び出し元にリンクしたタスクを起動することにより、\n"
"パーティションごとに並行して実行されます。ただし、コールバックは\n"
"そのパーティションにエントリが存在する場合にのみ実行されます。\n"
"\n"
"関数`dispatch/3`をカスタムディスパッチの束縛やpubsubシステムとして\n"
"使用する例はモジュールドキュメントを参照してください。\n"

#. TRANSLATORS: def Registry.Partition.pid_name(name, partition)
#: lib/registry.ex:853
msgid "Returns the name of pid partition table.\n"
msgstr "pidパーティションテーブルの名前を返します。\n"

#. TRANSLATORS: @type key
#: lib/registry.ex:165
msgid "The type of keys allowed on registration"
msgstr "登録時に許されるキーの型"

#. TRANSLATORS: def Registry.meta(registry, key)
#: lib/registry.ex:680
msgid ""
"Reads registry metadata given on `start_link/3`.\n"
"\n"
"Atoms and tuples are allowed as keys.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.MetaTest, meta: [custom_key: "
"\"custom_value\"])\n"
"    iex> Registry.meta(Registry.MetaTest, :custom_key)\n"
"    {:ok, \"custom_value\"}\n"
"    iex> Registry.meta(Registry.MetaTest, :unknown_key)\n"
"    :error\n"
"\n"
msgstr ""
"`start_link/3`で指定したレジストリメタデータを読み込みます。\n"
"\n"
"キーにはアトムとタプルが使用できます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Registry.start_link(:unique, Registry.MetaTest, meta: [custom_key: "
"\"custom_value\"])\n"
"    iex> Registry.meta(Registry.MetaTest, :custom_key)\n"
"    {:ok, \"custom_value\"}\n"
"    iex> Registry.meta(Registry.MetaTest, :unknown_key)\n"
"    :error\n"
"\n"

#. TRANSLATORS: @type kind
#: lib/registry.ex:162
msgid "The type of the registry"
msgstr "レジストリの型"

#. TRANSLATORS: Elixir.Registry Summary
#: lib/registry.ex:2
msgid ""
"A local, decentralized and scalable key-value process storage.\n"
"\n"
"It allows developers to lookup one or more processes with a given key.\n"
"If the registry has `:unique` keys, a key points to 0 or 1 processes.\n"
"If the registry allows `:duplicate` keys, a single key may point to any\n"
"number of processes. In both cases, different keys could identify the\n"
"same process.\n"
"\n"
"Each entry in the registry is associated to the process that has\n"
"registered the key. If the process crashes, the keys associated to that\n"
"process are automatically removed. All key comparisons in the registry\n"
"are done using the match operation (`===`).\n"
"\n"
"The registry can be used for different purposes, such as name lookups "
"(using\n"
"the `:via` option), storing properties, custom dispatching rules, or a "
"pubsub\n"
"implementation. We explore some of those use cases below.\n"
"\n"
"The registry may also be transparently partitioned, which provides\n"
"more scalable behaviour for running registries on highly concurrent\n"
"environments with thousands or millions of entries.\n"
"\n"
"## Using in `:via`\n"
"\n"
"Once the registry is started with a given name (using\n"
"`Registry.start_link/2`), it can be used to register and access named\n"
"processes using the `{:via, Registry, {registry, key}}` tuple:\n"
"\n"
"    {:ok, _} = Registry.start_link(:unique, Registry.ViaTest)\n"
"    name = {:via, Registry, {Registry.ViaTest, \"agent\"}}\n"
"    {:ok, _} = Agent.start_link(fn -> 0 end, name: name)\n"
"    Agent.get(name, & &1)\n"
"    #=> 0\n"
"    Agent.update(name, & &1 + 1)\n"
"    Agent.get(name, & &1)\n"
"    #=> 1\n"
"\n"
"Typically the registry is started as part of a supervision tree though:\n"
"\n"
"    supervisor(Registry, [:unique, Registry.ViaTest])\n"
"\n"
"Only registries with unique keys can be used in `:via`. If the name is\n"
"already taken, the case-specific `start_link` function (`Agent."
"start_link/2`\n"
"in the example above) will return `{:error, {:already_started, current_pid}}"
"`.\n"
"\n"
"## Using as a dispatcher\n"
"\n"
"`Registry` has a dispatch mechanism that allows developers to implement "
"custom\n"
"dispatch logic triggered from the caller. For example, let's say we have a\n"
"duplicate registry started as so:\n"
"\n"
"    {:ok, _} = Registry.start_link(:duplicate, Registry.DispatcherTest)\n"
"\n"
"By calling `register/3`, different processes can register under a given key\n"
"and associate any value under that key. In this case, let's register the\n"
"current process under the key `\"hello\"` and attach the `{IO, :inspect}` "
"tuple\n"
"to it:\n"
"\n"
"    {:ok, _} = Registry.register(Registry.DispatcherTest, \"hello\", {IO, :"
"inspect})\n"
"\n"
"Now, an entity interested in dispatching events for a given key may call\n"
"`dispatch/3` passing in the key and a callback. This callback will be "
"invoked\n"
"with a list of all the values registered under the requested key, alongside\n"
"the pid of the process that registered each value, in the form of `{pid,\n"
"value}` tuples. In our example, `value` will be the `{module, function}` "
"tuple\n"
"in the code above:\n"
"\n"
"    Registry.dispatch(Registry.DispatcherTest, \"hello\", fn entries ->\n"
"      for {pid, {module, function}} <- entries, do: apply(module, function, "
"[pid])\n"
"    end)\n"
"    # Prints #PID<...> where the pid is for the process that called "
"register/3 above\n"
"    #=> :ok\n"
"\n"
"Dispatching happens in the process that calls `dispatch/3` either serially "
"or\n"
"concurrently in case of multiple partitions (via spawned tasks). The\n"
"registered processes are not involved in dispatching unless involving them "
"is\n"
"done explicitly (for example, by sending them a message in the callback).\n"
"\n"
"Furthermore, if there is a failure when dispatching, due to a bad\n"
"registration, dispatching will always fail and the registered process will "
"not\n"
"be notified. Therefore let's make sure we at least wrap and report those\n"
"errors:\n"
"\n"
"    require Logger\n"
"    Registry.dispatch(Registry.DispatcherTest, \"hello\", fn entries ->\n"
"      for {pid, {module, function}} <- entries do\n"
"        try do\n"
"          apply(module, function, [pid])\n"
"        catch\n"
"          kind, reason ->\n"
"            formatted = Exception.format(kind, reason, System.stacktrace)\n"
"            Logger.error \"Registry.dispatch/3 failed with #{formatted}\"\n"
"        end\n"
"      end\n"
"    end)\n"
"    # Prints #PID<...>\n"
"    #=> :ok\n"
"\n"
"You could also replace the whole `apply` system by explicitly sending\n"
"messages. That's the example we will see next.\n"
"\n"
"## Using as a PubSub\n"
"\n"
"Registries can also be used to implement a local, non-distributed, scalable\n"
"PubSub by relying on the `dispatch/3` function, similarly to the previous\n"
"section: in this case, however, we will send messages to each associated\n"
"process, instead of invoking a given module-function.\n"
"\n"
"In this example, we will also set the number of partitions to the number of\n"
"schedulers online, which will make the registry more performant on highly\n"
"concurrent environments as each partition will spawn a new process, "
"allowing\n"
"dispatching to happen in parallel:\n"
"\n"
"    {:ok, _} = Registry.start_link(:duplicate, Registry.PubSubTest,\n"
"                                   partitions: System.schedulers_online)\n"
"    {:ok, _} = Registry.register(Registry.PubSubTest, \"hello\", [])\n"
"    Registry.dispatch(Registry.PubSubTest, \"hello\", fn entries ->\n"
"      for {pid, _} <- entries, do: send(pid, {:broadcast, \"world\"})\n"
"    end)\n"
"    #=> :ok\n"
"\n"
"The example above broadcasted the message `{:broadcast, \"world\"}` to all\n"
"processes registered under the \"topic\" (or \"key\" as we called it until "
"now)\n"
"`\"hello\"`.\n"
"\n"
"The third argument given to `register/3` is a value associated to the\n"
"current process. While in the previous section we used it when dispatching,\n"
"in this particular example we are not interested in it, so we have set it\n"
"to an empty list. You could store a more meaningful value if necessary.\n"
"\n"
"## Registrations\n"
"\n"
"Looking up, dispatching and registering are efficient and immediate at\n"
"the cost of delayed unsubscription. For example, if a process crashes,\n"
"its keys are automatically removed from the registry but the change may\n"
"not propagate immediately. This means certain operations may return "
"processes\n"
"that are already dead. When such may happen, it will be explicitly stated\n"
"in the function documentation.\n"
"\n"
"However, keep in mind those cases are typically not an issue. After all, a\n"
"process referenced by a pid may crash at any time, including between "
"getting\n"
"the value from the registry and sending it a message. Many parts of the "
"standard\n"
"library are designed to cope with that, such as `Process.monitor/1` which "
"will\n"
"deliver the `:DOWN` message immediately if the monitored process is already "
"dead\n"
"and `Kernel.send/2` which acts as a no-op for dead processes.\n"
"\n"
"## ETS\n"
"\n"
"Note that the registry uses one ETS table plus two ETS tables per "
"partition.\n"
msgstr ""
"ローカルの分散型でスケーラブルなキー・バリュープロセスストレージです。\n"
"\n"
"指定されたキーで1つ以上のプロセスを検索できます。レジストリが\n"
"`:unique`キーを持つ場合、キーは0または1個のプロセスを指します。\n"
"レジストリが`:duplicate`キーを許す場合は、1つのキーが任意の数の\n"
"プロセスを指すことができます。どちらの場合も、異なるキーで同じ\n"
"プロセスを識別することができます。\n"
"\n"
"レジストリの各エントリはキーを登録したプロセスに関連付けられています。\n"
"プロセスがクラッシュした場合、そのプロセスに関連付けれれたキーは\n"
"自動的に削除されます。レジストリにおけるすべてのキーの比較は照合\n"
"演算子（`===`）を使用して行われます。\n"
"\n"
"レジストリは別の目的にも使用することができます。たとえば、（`:viw`\n"
"オプションを使用した）名前の検索やプロパティの保存、カスタムディスパッチ、\n"
"pubsubの実装です。これらのユースケースの一部は以下で検討します。\n"
"\n"
"レジストリは透過的に分割される場合もあり、何千、何万もの\n"
"エントリを持つ高度に並行した環境で実行するためのよりスケーラブルな\n"
"動作を提供します。\n"
"\n"
"## `:via`での使用\n"
"\n"
"レジストリが（`Registry.start_link/2`を使用して）指定された名前で\n"
"起動されると、タプル `{:via, Registry, {registry, key}}`を使用して\n"
"名前付きのプロセスの登録とアクセスに使用できます。\n"
"\n"
"    {:ok, _} = Registry.start_link(:unique, Registry.ViaTest)\n"
"    name = {:via, Registry, {Registry.ViaTest, \"agent\"}}\n"
"    {:ok, _} = Agent.start_link(fn -> 0 end, name: name)\n"
"    Agent.get(name, & &1)\n"
"    #=> 0\n"
"    Agent.update(name, & &1 + 1)\n"
"    Agent.get(name, & &1)\n"
"    #=> 1\n"
"\n"
"通常、レジストリは監視ツリーの一部として起動されます。\n"
"\n"
"    supervisor(Registry, [:unique, Registry.ViaTest])\n"
"\n"
"ユニークキーを持つレジストリだけが`;via`で使用できます。名前がすでに\n"
"使われていた場合は、ケース固有の関数`start_link`（上の例では\n"
"`Agent.start_link/2`）は`{:error, {:already_started, current_pid}}`を返しま"
"す。\n"
"\n"
"## ディスパッチャとしての使用\n"
"\n"
"`Registry`は呼び出し元からトリガされるカスタムディスパッチャ\n"
"ロジックを実装可能にするディスパッチャ機構を持っています。たとえば、\n"
"重複したレジストリを次のように起動したとします。\n"
"\n"
"    {:ok, _} = Registry.start_link(:duplicate, Registry.DispatcherTest)\n"
"\n"
"`register/3`を呼び出すことによって、異なるプロセスが指定されたキーの\n"
"下に登録し、そのキーの下に任意の値を関連付けることができます。\n"
"今回は、現在のプロセスをキー \"hello”の下に登録し、`{IO, :inspect}`\n"
"タプルをそれに添付しましょう。\n"
"\n"
"    {:ok, _} = Registry.register(Registry.DispatcherTest, \"hello\", {IO, :"
"inspect})\n"
"\n"
"これで、指定されたキーのイベントのディスパッチに関心のあるエンティティは\n"
"そのキーとコールバックを渡して`dispatch/3`を呼び出すことができます。\n"
"このコールバックは、リクエストされたキーの下に登録されたすべての値のリスト\n"
"と、タプル`{pid, value}`の形で各値を登録したプロセスのPIDと共に\n"
"呼び出されます。ここでの例では、`value`は上のコードにあるタプル\n"
"`{module, function}`です。\n"
"\n"
"    Registry.dispatch(Registry.DispatcherTest, \"hello\", fn entries ->\n"
"      for {pid, {module, function}} <- entries, do: apply(module, function, "
"[pid])\n"
"    end)\n"
"    # #PID<...> を表示します。pidは上でregister/3を呼び出したプロセスのもので"
"す\n"
"    #=> :ok\n"
"\n"
"ディスパッチは、複数パーティションの場合（生成されたタスクを介して）逐次的\n"
"または並行して`dispatch/3`を呼び出したプロセス内で発生します。\n"
"登録されたプロセスは（たてえば、コールバック内でメッセージを送信する\n"
"など）明示的に関与しない限り、ディスパッチには関与しません。\n"
"\n"
"さらに、ディスパッチ時に障害が発生した場合は、登録不良により、\n"
"ディスパッチは常に失敗し、登録されたプロセスは通知されません。 \n"
"したがって、少なくともこれらのエラーをラップして報告するように\n"
"しましょう。\n"
"\n"
"    require Logger\n"
"    Registry.dispatch(Registry.DispatcherTest, \"hello\", fn entries ->\n"
"      for {pid, {module, function}} <- entries do\n"
"        try do\n"
"          apply(module, function, [pid])\n"
"        catch\n"
"          kind, reason ->\n"
"            formatted = Exception.format(kind, reason, System.stacktrace)\n"
"            Logger.error \"Registry.dispatch/3 failed with #{formatted}\"\n"
"        end\n"
"      end\n"
"    end)\n"
"    # #PID<...>を表示\n"
"    #=> :ok\n"
"\n"
"明示的なメッセージ送信により`apply`システム全体を置き換えることも\n"
"できます。それが次に見る例です。\n"
"\n"
"## PubSubとしての使用\n"
"\n"
"レジストリは、前のセクションと同様に、関数`dispatch/3`に依存することで\n"
"ローカルの分散型でスケーラブルなPubSubの実装にも使用することができます。\n"
"ただし、今回は指定されたモジュールの関数を実行する代わりに、関連する\n"
"各プロセスにメッセージを送信します。\n"
"\n"
"この例では、パーティションの数をオンラインのスケジューラ数に設定します。\n"
"これにより、各パーティションが新しいプロセスを生成し、ディスパッチを\n"
"並行して実行できるようになるため、並行性の高い環境でレジストリをより\n"
"効率的にします。\n"
"\n"
"    {:ok, _} = Registry.start_link(:duplicate, Registry.PubSubTest,\n"
"                                   partitions: System.schedulers_online)\n"
"    {:ok, _} = Registry.register(Registry.PubSubTest, \"hello\", [])\n"
"    Registry.dispatch(Registry.PubSubTest, \"hello\", fn entries ->\n"
"      for {pid, _} <- entries, do: send(pid, {:broadcast, \"world\"})\n"
"    end)\n"
"    #=> :ok\n"
"\n"
"上の例では、「トピック」（これまでは「キー」と呼ばれていた）`”hello”`の\n"
"下に登録されているすべてのプロセスにメッセージ `{:broadcast, \"world\"}`を\n"
"ブロードキャストしています。\n"
"\n"
"`register/3`に指定される第3引数は現在のプロセスに関連付けられる値です。\n"
"先のセクションではディスパッチ時にそれを使用しましたが、\n"
"今回の例では興味がありませんおで、空のリストを設定しました。\n"
"必要であればより意味のある値を格納することができます。\n"
"\n"
"## 登録\n"
"\n"
"ルックアップ、ディスパッチ、登録は、効率的かつ即時に行われますが、\n"
"遅延購読解除を犠牲にしています。たとえば、プロセスがクラッシュした場合、\n"
"そのキーはレジストリから自動的に削除されますが、変更はただちには反映\n"
"されません。 これは、特定の操作によってすでに死んでいるプロセスが\n"
"返される可能性があることを意味します。 そのようなことが発生する場合は、\n"
"関数のドキュメントに明示的に示されています。\n"
"\n"
"ただし、そのようなケースは通常は問題にはならないことに注意してください。\n"
"結局のところ、pidで参照されるプロセスは、レジストリから値を取得してから\n"
"メッセージを送信する間を含め、いつでもクラッシュする可能性があります。\n"
"標準ライブラリの多くは、これに対処するよう設計されています。たとえば、\n"
"監視されているプロセスが既に死んでいる場合に直ちに`:DOWN`メッセージを\n"
"配信する`Process.monitor/1`や死んだプロセスにはno-opとして動作する\n"
"`Kernel.send/2`などです。\n"
"\n"
"## ETS\n"
"\n"
"レジストリはETSテーブルを1つと、さらにパーティション当たり2つのETSテーブルを"
"使用することに注意してください。\n"

#. TRANSLATORS: def Registry.Partition.start_link(registry, arg)
#: lib/registry.ex:861
msgid ""
"Starts the registry partition.\n"
"\n"
"The process is only responsible for monitoring, demonitoring\n"
"and cleaning up when monitored processes crash.\n"
msgstr ""
"レジストリパーティションを起動します。\n"
"\n"
"このプロセスの責務ははプロセスの監視、監視の解除、クラッシュした際の後始末\n"
"のみです。\n"
