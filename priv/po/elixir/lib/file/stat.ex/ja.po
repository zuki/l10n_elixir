msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-03-27 10:48+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"POT-Creation-Date: \n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def File.Stat.from_record(file_info)
#: lib/file/stat.ex:70
msgid "Converts a `:file_info` record into a `File.Stat`.\n"
msgstr "`:file_info`レコードを`File.Stat`構造体に変換します。\n"

#. TRANSLATORS: Elixir.File.Stat Summary
#: lib/file/stat.ex:4
msgid ""
"A struct that holds file information.\n"
"\n"
"In Erlang, this struct is represented by a `:file_info` record.\n"
"Therefore this module also provides functions for converting\n"
"between the Erlang record and the Elixir struct.\n"
"\n"
"Its fields are:\n"
"\n"
"  * `size` - size of file in bytes.\n"
"\n"
"  * `type` - `:device | :directory | :regular | :other`; the type of "
"the\n"
"    file.\n"
"\n"
"  * `access` - `:read | :write | :read_write | :none`; the current "
"system\n"
"    access to the file.\n"
"\n"
"  * `atime` - the last time the file was read.\n"
"\n"
"  * `mtime` - the last time the file was written.\n"
"\n"
"  * `ctime` - the interpretation of this time field depends on the "
"operating\n"
"    system. On Unix, it is the last time the file or the inode was "
"changed.\n"
"    In Windows, it is the time of creation.\n"
"\n"
"  * `mode` - the file permissions.\n"
"\n"
"  * `links` - the number of links to this file. This is always 1 for "
"file\n"
"    systems which have no concept of links.\n"
"\n"
"  * `major_device` - identifies the file system where the file is "
"located.\n"
"    In Windows, the number indicates a drive as follows: 0 means A:, 1 "
"means\n"
"    B:, and so on.\n"
"\n"
"  * `minor_device` - only valid for character devices on Unix. In all "
"other\n"
"    cases, this field is zero.\n"
"\n"
"  * `inode` - gives the inode number. On non-Unix file systems, this "
"field\n"
"    will be zero.\n"
"\n"
"  * `uid` - indicates the owner of the file. Will be zero for non-Unix "
"file\n"
"    systems.\n"
"\n"
"  * `gid` - indicates the group that owns the file. Will be zero for\n"
"    non-Unix file systems.\n"
"\n"
"The time type returned in `atime`, `mtime`, and `ctime` is dependent "
"on the\n"
"time type set in options. `{:time, type}` where type can be `:local`,\n"
"`:universal`, or `:posix`. Default is `:universal`.\n"
msgstr ""
"ファイル情報を保持する構造体です。\n"
"\n"
"Erlangでは、この構造体は`:file_info`レコードで表現されています。\n"
"したがって、このモジュールは、ErlangレコードとElixir構造体を変関する\n"
"関数も提供します。\n"
"\n"
"構造体のフィールドは以下の通りです。\n"
"\n"
"  * `size` - バイト単位のファイルの大きさ\n"
"\n"
"  * `type` - `:device | :directory | :regular | :other`; ファイルのタイ"
"プ\n"
"\n"
"  * `access` - `:read | :write | :read_write | :none`; \n"
"    現在のシステムがファイルにアクセスする仕方\n"
"\n"
"  * `atime` - ファイルが最後に読まれた時刻\n"
"\n"
"  * `mtime` - ファイルに最後に書き込まれた時刻\n"
"\n"
"  * `ctime` - この時刻フィールドの解釈はオペレーティングシステムに依存"
"します。\n"
"    Unixでは、ファイルまたはそのinodeが最後に変更された時刻です。\n"
"    Windowsでは、作成された時刻です。\n"
"\n"
"  * `mode` - ファイルのパーミッション\n"
"\n"
"  * `links` - このファイルのリンクの数です。リンクの概念がない\n"
"    ファイルシステムでは常に1です。\n"
"\n"
"  * `major_device` - ファイルが置かれているファイルシステムの識別子で"
"す。\n"
"    Windowsではこの数字は次のようにドライブを指定します; 0 は A:, 1 は "
"B:、など\n"
"\n"
"  * `minor_device` - Unixのキャラクタデバイスでのみ有効です。他の場"
"合、\n"
"     このフィールドは0です。\n"
"\n"
"  * `inode` - inode番号です。非Unixファイルシステムでは、このフィールド"
"は\n"
"     0になります。\n"
"\n"
"  * `uid` - ファイルの所有者を示します。非Unixファイルシステムでは、\n"
"    0になります。\n"
"\n"
"  * `gid` - ファイルを所有するグループを示します。\n"
"    非Unixファイルシステムでは0になります。\n"
"\n"
"`atime`, `mtime`, `ctime`で返される時刻の型は、オプションで\n"
"設定する時刻型`{:time, type}`によります。ここtypeには、\n"
"`:local`、`:universal`、`:posix`を指定できます。\n"
"デフォルトは`:universal`です。\n"

#. TRANSLATORS: def File.Stat.to_record(stat)
#: lib/file/stat.ex:63
msgid "Converts a `File.Stat` struct to a `:file_info` record.\n"
msgstr "`File.Stat`構造体を`:file_info`レコードに変換します。\n"
