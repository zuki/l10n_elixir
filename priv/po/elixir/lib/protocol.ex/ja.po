msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-03-16 10:35+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"POT-Creation-Date: \n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def Protocol.assert_protocol!(module)
#: lib/protocol.ex:56
msgid ""
"Checks if the given module is loaded and is protocol.\n"
"\n"
"Returns `:ok` if so, otherwise raises `ArgumentError`.\n"
msgstr ""
"指定したモジュールがロードされ、それがプロトコルであるか否かをチェックします。\n"
"\n"
"そうである場合は`:ok`を、そうでなければ`ArgumentError`を発生させます。\n"

#. TRANSLATORS: def Protocol.extract_protocols(paths)
#: lib/protocol.ex:129
msgid ""
"Extracts all protocols from the given paths.\n"
"\n"
"The paths can be either a charlist or a string. Internally\n"
"they are worked on as charlists, so passing them as lists\n"
"avoid extra conversion.\n"
"\n"
"Does not load any of the protocols.\n"
"\n"
"## Examples\n"
"\n"
"    # Get Elixir's ebin and retrieve all protocols\n"
"    iex> path = :code.lib_dir(:elixir, :ebin)\n"
"    iex> mods = Protocol.extract_protocols([path])\n"
"    iex> Enumerable in mods\n"
"    true\n"
"\n"
msgstr ""
"指定したパスからすべてのプロトコルを抽出します。\n"
"\n"
"パスには、文字のリストまたは文字列を指定できます。内部的には\n"
"文字のリストで動作しますので、文字のリストを渡すと余分な変換が\n"
"避けられます。\n"
"\n"
"実装をロードすることはありません。\n"
"\n"
"## 例\n"
"\n"
"    # Elixirのebinディレクトリを取得し、全てのプロトコルを取り出す\n"
"    iex> path = :code.lib_dir(:elixir, :ebin)\n"
"    iex> mods = Protocol.extract_protocols([path])\n"
"    iex> Enumerable in mods\n"
"    true\n"
"\n"

#. TRANSLATORS: def Protocol.assert_impl!(protocol, base)
#: lib/protocol.ex:82
msgid ""
"Checks if the given module is loaded and is an implementation\n"
"of the given protocol.\n"
"\n"
"Returns `:ok` if so, otherwise raises `ArgumentError`.\n"
msgstr ""
"指定したモジュールがロードされ、それが指定したプロトコルの実装であるか否かを\n"
"チェックします。\n"
"\n"
"そうである場合は`:ok`を、そうでなければ`ArgumentError`を発生させます。\n"

#. TRANSLATORS: defmacro Protocol.derive(protocol, module, options \\ [])
#: lib/protocol.ex:117
msgid "Derives the `protocol` for `module` with the given options.\n"
msgstr "指定したオプションで`module`のための`protocol`を導出します。\n"

#. TRANSLATORS: def Protocol.extract_impls(protocol, paths)
#: lib/protocol.ex:158
msgid ""
"Extracts all types implemented for the given protocol from\n"
"the given paths.\n"
"\n"
"The paths can be either a charlist or a string. Internally\n"
"they are worked on as charlists, so passing them as lists\n"
"avoid extra conversion.\n"
"\n"
"Does not load any of the implementations.\n"
"\n"
"## Examples\n"
"\n"
"    # Get Elixir's ebin and retrieve all protocols\n"
"    iex> path = :code.lib_dir(:elixir, :ebin)\n"
"    iex> mods = Protocol.extract_impls(Enumerable, [path])\n"
"    iex> List in mods\n"
"    true\n"
"\n"
msgstr ""
"指定したパスから指定したプロトコルが実装されているすべての型を抽出します。\n"
"\n"
"パスには、文字のリストまたは文字列を指定できます。内部的には\n"
"文字のリストで動作しますので、文字のリストを渡すと余分な変換が\n"
"避けられます。\n"
"\n"
"実装をロードすることはありません。\n"
"\n"
"## 例\n"
"\n"
"    # Elixirのebinディレクトリを取得し、全てのプロトコルを取り出す\n"
"    iex> path = :code.lib_dir(:elixir, :ebin)\n"
"    iex> mods = Protocol.extract_impls(Enumerable, [path])\n"
"    iex> List in mods\n"
"    true\n"
"\n"

#. TRANSLATORS: def Protocol.consolidated?(protocol)
#: lib/protocol.ex:220
msgid "Returns `true` if the protocol was consolidated.\n"
msgstr "プロトコルが統合（consolidate）されている場合、`true`を返します。\n"

#. TRANSLATORS: defmacro Protocol.def(signature)
#: lib/protocol.ex:6
msgid ""
"Defines a new protocol function.\n"
"\n"
"Protocols do not allow functions to be defined directly, instead, the\n"
"regular `Kernel.def/*` macros are replaced by this macro which\n"
"defines the protocol functions with the appropriate callbacks.\n"
msgstr ""
"新しいプロトコル関数を定義します。\n"
"\n"
"プロトコルは関数を直接定義することはできます。代わりに、通常の\n"
"`Kernel.def/*`マクロは、適切なコールバックでプロトコル関数を\n"
"定義するこのマクロに置き換えられます。\n"

#. TRANSLATORS: def Protocol.consolidate(protocol, types)
#: lib/protocol.ex:228
msgid ""
"Receives a protocol and a list of implementations and\n"
"consolidates the given protocol.\n"
"\n"
"Consolidation happens by changing the protocol `impl_for`\n"
"in the abstract format to have fast lookup rules. Usually\n"
"the list of implementations to use during consolidation\n"
"are retrieved with the help of `extract_impls/2`.\n"
"\n"
"It returns the updated version of the protocol bytecode.\n"
"A given bytecode or protocol implementation can be checked\n"
"to be consolidated or not by analyzing the protocol\n"
"attribute:\n"
"\n"
"    Protocol.consolidated?(Enumerable)\n"
"\n"
"If the first element of the tuple is `true`, it means\n"
"the protocol was consolidated.\n"
"\n"
"This function does not load the protocol at any point\n"
"nor loads the new bytecode for the compiled module.\n"
"However each implementation must be available and\n"
"it will be loaded.\n"
msgstr ""
"プロトコルと実装のリストを受け取り、指定したプロトコルを\n"
"統合（consolidattion）します。\n"
"\n"
"統合は、抽象フォーマットの`impl_for`プロトコルを高速検索規則に\n"
"変更することにより行われます。通常、統合時に使用する実装のリストは\n"
"`extract_impls/2`の使用して取得されます。\n"
"\n"
"プロトコルバイトコードの更新版を返します。プロトコル属性を分析する\n"
"ことにより、指定したバイトコードまたはプロトコル実装が統合されたか\n"
"否かをチェックできます。\n"
"\n"
"    Protocol.consolidated?(Enumerable)\n"
"\n"
"タプルの第1要素が`true`の場合、プロトコルが統合されたことを意味します。\n"
"\n"
"この関数は、いかなる時点においてもプロトコルをロードしません。また、\n"
"コンパイルされたモジュールの新バイトコードをロードすることもありません。\n"
"しかし、各実装は利用可能であり、ロードされます。\n"

#. TRANSLATORS: Elixir.Protocol Summary
#: lib/protocol.ex:2
msgid "Functions for working with protocols.\n"
msgstr "プロトコルを処理する関数です。\n"
