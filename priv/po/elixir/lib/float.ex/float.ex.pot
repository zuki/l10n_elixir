#. TRANSLATORS: def Float.parse(binary)
#: lib/float.ex:12 
msgid ""
"Parses a binary into a float.\n"
"\n"
"If successful, returns a tuple in the form of `{float, remainder_of_binary}`;\n"
"when the binary cannot be coerced into a valid float, the atom `:error` is\n"
"returned.\n"
"\n"
"If the size of float exceeds the maximum size of `1.7976931348623157e+308`,\n"
"the `ArgumentError` exception is raised.\n"
"\n"
"If you want to convert a string-formatted float directly to a float,\n"
"`String.to_float/1` can be used instead.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.parse(\"34\")\n"
"    {34.0, \"\"}\n"
"    iex> Float.parse(\"34.25\")\n"
"    {34.25, \"\"}\n"
"    iex> Float.parse(\"56.5xyz\")\n"
"    {56.5, \"xyz\"}\n"
"\n"
"    iex> Float.parse(\"pi\")\n"
"    :error\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.ratio(float)
#: lib/float.ex:303 
msgid ""
"Returns a pair of integers whose ratio is exactly equal\n"
"to the original float and with a positive denominator.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.ratio(3.14)\n"
"    {7070651414971679, 2251799813685248}\n"
"    iex> Float.ratio(-3.14)\n"
"    {-7070651414971679, 2251799813685248}\n"
"    iex> Float.ratio(1.5)\n"
"    {3, 2}\n"
"    iex> Float.ratio(-1.5)\n"
"    {-3, 2}\n"
"    iex> Float.ratio(16.0)\n"
"    {16, 1}\n"
"    iex> Float.ratio(-16.0)\n"
"    {-16, 1}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.round(float, precision \\ 0)
#: lib/float.ex:151 
msgid ""
"Rounds a floating point value to an arbitrary number of fractional\n"
"digits (between 0 and 15).\n"
"\n"
"The rounding direction always ties to half up. The operation is\n"
"performed on the binary floating point, without a conversion to decimal.\n"
"\n"
"This function only accepts floats and always returns a float. Use\n"
"`Kernel.round/1` if you want a function that accepts both floats\n"
"and integers and always returns an integer.\n"
"\n"
"The behaviour of `round/2` for floats can be surprising. For example:\n"
"\n"
"    iex> Float.round(5.5675, 3)\n"
"    5.567\n"
"\n"
"One may have expected it to round to the half up 5.568. This is not a bug.\n"
"Most decimal fractions cannot be represented as a binary floating point\n"
"and therefore the number above is internally represented as 5.567499999,\n"
"which explains the behaviour above. If you want exact rounding for decimals,\n"
"you must use a decimal library. The behaviour above is also in accordance\n"
"to reference implementations, such as \"Correctly Rounded Binary-Decimal and\n"
"Decimal-Binary Conversions\" by David M. Gay.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.round(12.5)\n"
"    13.0\n"
"    iex> Float.round(5.5674, 3)\n"
"    5.567\n"
"    iex> Float.round(5.5675, 3)\n"
"    5.567\n"
"    iex> Float.round(-5.5674, 3)\n"
"    -5.567\n"
"    iex> Float.round(-5.5675)\n"
"    -6.0\n"
"    iex> Float.round(12.341444444444441, 15)\n"
"    12.341444444444441\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.floor(number, precision \\ 0)
#: lib/float.ex:78 
msgid ""
"Rounds a float to the largest integer less than or equal to `num`.\n"
"\n"
"`floor/2` also accepts a precision to round a floating point value down\n"
"to an arbitrary number of fractional digits (between 0 and 15).\n"
"The operation is performed on the binary floating point, without a\n"
"conversion to decimal.\n"
"\n"
"The behaviour of `floor/2` for floats can be surprising. For example:\n"
"\n"
"    iex> Float.floor(12.52, 2)\n"
"    12.51\n"
"\n"
"One may have expected it to floor to 12.52. This is not a bug.\n"
"Most decimal fractions cannot be represented as a binary floating point\n"
"and therefore the number above is internally represented as 12.51999999,\n"
"which explains the behaviour above.\n"
"\n"
"This function always returns a float. `Kernel.trunc/1` may be used instead to\n"
"truncate the result to an integer afterwards.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.floor(34.25)\n"
"    34.0\n"
"    iex> Float.floor(-56.5)\n"
"    -57.0\n"
"    iex> Float.floor(34.259, 2)\n"
"    34.25\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.to_string(float)
#: lib/float.ex:382 
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of the given float.\n"
"\n"
"It uses the shortest representation according to algorithm described\n"
"in \"Printing Floating-Point Numbers Quickly and Accurately\" in\n"
"Proceedings of the SIGPLAN '96 Conference on Programming Language\n"
"Design and Implementation.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_string(7.0)\n"
"    \"7.0\"\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Float Summary
#: lib/float.ex:4 
msgid ""
"Functions for working with floating point numbers.\n"
msgstr ""
#. TRANSLATORS: def Float.ceil(number, precision \\ 0)
#: lib/float.ex:114 
msgid ""
"Rounds a float to the smallest integer greater than or equal to `num`.\n"
"\n"
"`ceil/2` also accepts a precision to round a floating point value down\n"
"to an arbitrary number of fractional digits (between 0 and 15).\n"
"\n"
"The operation is performed on the binary floating point, without a\n"
"conversion to decimal.\n"
"\n"
"The behaviour of `ceil/2` for floats can be surprising. For example:\n"
"\n"
"    iex> Float.ceil(-12.52, 2)\n"
"    -12.51\n"
"\n"
"One may have expected it to ceil to -12.52. This is not a bug.\n"
"Most decimal fractions cannot be represented as a binary floating point\n"
"and therefore the number above is internally represented as -12.51999999,\n"
"which explains the behaviour above.\n"
"\n"
"This function always returns floats. `Kernel.trunc/1` may be used instead to\n"
"truncate the result to an integer afterwards.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.ceil(34.25)\n"
"    35.0\n"
"    iex> Float.ceil(-56.5)\n"
"    -56.0\n"
"    iex> Float.ceil(34.251, 2)\n"
"    34.26\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.to_charlist(float)
#: lib/float.ex:362 
msgid ""
"Returns a charlist which corresponds to the text representation\n"
"of the given float.\n"
"\n"
"It uses the shortest representation according to algorithm described\n"
"in \"Printing Floating-Point Numbers Quickly and Accurately\" in\n"
"Proceedings of the SIGPLAN '96 Conference on Programming Language\n"
"Design and Implementation.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_charlist(7.0)\n"
"    '7.0'\n"
"\n"
msgstr ""
