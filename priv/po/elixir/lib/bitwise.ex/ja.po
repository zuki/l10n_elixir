msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-24 21:48+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: defmacro Bitwise.bsl(left, right)
#: lib/bitwise.ex:146
msgid ""
"Calculates the result of an arithmetic left bitshift.\n"
"\n"
"    iex> bsl(1, 2)\n"
"    4\n"
"    iex> bsl(1, -2)\n"
"    0\n"
"    iex> bsl(-1, 2)\n"
"    -4\n"
"    iex> bsl(-1, -2)\n"
"    -1\n"
"\n"
msgstr ""
"算術左ビットシフト演算を行います。\n"
"\n"
"    iex> bsl(1, 2)\n"
"    4\n"
"    iex> bsl(1, -2)\n"
"    0\n"
"    iex> bsl(-1, 2)\n"
"    -4\n"
"    iex> bsl(-1, -2)\n"
"    -1\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.^^^(left, right)
#: lib/bitwise.ex:135
msgid ""
"Infix operator; calculates the bitwise XOR of its arguments.\n"
"\n"
"    iex> 9 ^^^ 3\n"
"    10\n"
"\n"
msgstr ""
"中置演算子です。2つの引数のビットXOR演算を行います。\n"
"\n"
"    iex> 9 ^^^ 3\n"
"    10\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.&&&(left, right)
#: lib/bitwise.ex:91
msgid ""
"Infix operator; calculates the bitwise AND of its arguments.\n"
"\n"
"    iex> 9 &&& 3\n"
"    1\n"
"\n"
msgstr ""
"中置演算子です。2つの引数のビットAND演算を行います。\n"
"\n"
"    iex> 9 &&& 3\n"
"    1\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.>>>(left, right)
#: lib/bitwise.ex:197
msgid ""
"Infix operator; calculates the result of an arithmetic right bitshift.\n"
"\n"
"    iex> 1 >>> 2\n"
"    0\n"
"    iex> 1 >>> -2\n"
"    4\n"
"    iex> -1 >>> 2\n"
"    -1\n"
"    iex> -1 >>> -2\n"
"    -4\n"
"\n"
msgstr ""
"中置演算子です。算術右ビットシフト演算を行います。\n"
"\n"
"    iex> 1 >>> 2\n"
"    0\n"
"    iex> 1 >>> -2\n"
"    4\n"
"    iex> -1 >>> 2\n"
"    -1\n"
"    iex> -1 >>> -2\n"
"    -4\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.bor(left, right)
#: lib/bitwise.ex:102
msgid ""
"Calculates the bitwise OR of its arguments.\n"
"\n"
"    iex> bor(9, 3)\n"
"    11\n"
"\n"
msgstr ""
"2つの引数のビットOR演算を行います。\n"
"\n"
"    iex> bor(9, 3)\n"
"    11\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.bxor(left, right)
#: lib/bitwise.ex:124
msgid ""
"Calculates the bitwise XOR of its arguments.\n"
"\n"
"    iex> bxor(9, 3)\n"
"    10\n"
"\n"
msgstr ""
"2つの引数のビットXOR演算を行います。\n"
"\n"
"    iex> bxor(9, 3)\n"
"    10\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.bsr(left, right)
#: lib/bitwise.ex:180
msgid ""
"Calculates the result of an arithmetic right bitshift.\n"
"\n"
"    iex> bsr(1, 2)\n"
"    0\n"
"    iex> bsr(1, -2)\n"
"    4\n"
"    iex> bsr(-1, 2)\n"
"    -1\n"
"    iex> bsr(-1, -2)\n"
"    -4\n"
"\n"
msgstr ""
"算術右ビットシフト演算を行います。\n"
"\n"
"    iex> bsr(1, 2)\n"
"    0\n"
"    iex> bsr(1, -2)\n"
"    4\n"
"    iex> bsr(-1, 2)\n"
"    -1\n"
"    iex> bsr(-1, -2)\n"
"    -4\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.bnot(expr)
#: lib/bitwise.ex:54
msgid ""
"Calculates the bitwise NOT of its argument.\n"
"\n"
"    iex> bnot(2)\n"
"    -3\n"
"    iex> bnot(2) &&& 3\n"
"    1\n"
"\n"
msgstr ""
"2つの引数のビットNOT演算を行います。\n"
"\n"
"    iex> bnot(2)\n"
"    -3\n"
"    iex> bnot(2) &&& 3\n"
"    1\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.band(left, right)
#: lib/bitwise.ex:80
msgid ""
"Calculates the bitwise AND of its arguments.\n"
"\n"
"    iex> band(9, 3)\n"
"    1\n"
"\n"
msgstr ""
"2つの引数のビットAND演算を行います。\n"
"\n"
"    iex> band(9, 3)\n"
"    1\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.<<<(left, right)
#: lib/bitwise.ex:163
msgid ""
"Infix operator; calculates the result of an arithmetic left bitshift.\n"
"\n"
"    iex> 1 <<< 2\n"
"    4\n"
"    iex> 1 <<< -2\n"
"    0\n"
"    iex> -1 <<< 2\n"
"    -4\n"
"    iex> -1 <<< -2\n"
"    -1\n"
"\n"
msgstr ""
"中置演算子です。算術左ビットシフト演算を行います。\n"
"\n"
"    iex> 1 <<< 2\n"
"    4\n"
"    iex> 1 <<< -2\n"
"    0\n"
"    iex> -1 <<< 2\n"
"    -4\n"
"    iex> -1 <<< -2\n"
"    -1\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.|||(left, right)
#: lib/bitwise.ex:113
msgid ""
"Infix operator; calculates the bitwise OR of its arguments.\n"
"\n"
"    iex> 9 ||| 3\n"
"    11\n"
"\n"
msgstr ""
"中置演算子です。2つの引数のビットOR演算を行います。\n"
"\n"
"    iex> 9 ||| 3\n"
"    11\n"
"\n"

#. TRANSLATORS: defmacro Bitwise.~~~(expr)
#: lib/bitwise.ex:67
msgid ""
"Prefix (unary) operator; calculates the bitwise NOT of its argument.\n"
"\n"
"    iex> ~~~2\n"
"    -3\n"
"    iex> ~~~2 &&& 3\n"
"    1\n"
"\n"
msgstr ""
"前置（単項）演算子です。 引数のビットのNOT演算を行います。\n"
"\n"
"    iex> ~~~2\n"
"    -3\n"
"    iex> ~~~2 &&& 3\n"
"    1\n"
"\n"

#. TRANSLATORS: Elixir.Bitwise Summary
#: lib/bitwise.ex:2
msgid ""
"A set of macros that perform calculations on bits.\n"
"\n"
"The macros in this module come in two flavors: named or\n"
"operators. For example:\n"
"\n"
"    iex> use Bitwise\n"
"    iex> bnot 1   # named\n"
"    -2\n"
"    iex> 1 &&& 1  # operator\n"
"    1\n"
"\n"
"If you prefer to use only operators or skip them, you can\n"
"pass the following options:\n"
"\n"
"  * `:only_operators` - includes only operators\n"
"  * `:skip_operators` - skips operators\n"
"\n"
"For example:\n"
"\n"
"    iex> use Bitwise, only_operators: true\n"
"    iex> 1 &&& 1\n"
"    1\n"
"\n"
"When invoked with no options, `use Bitwise` is equivalent\n"
"to `import Bitwise`.\n"
"\n"
"All bitwise macros can be used in guards:\n"
"\n"
"    iex> use Bitwise\n"
"    iex> odd? = fn int when band(int, 1) == 1 -> true; _ -> false end\n"
"    iex> odd?.(1)\n"
"    true\n"
"\n"
msgstr ""
"ビット演算をするマクロです\n"
"\n"
"このモジュールには2種類のマクロがあります。 名前付きマクロと\n"
"演算子マクロです。たとえば、\n"
"\n"
"    iex> use Bitwise\n"
"    iex> bnot 1   # 名前付き\n"
"    -2\n"
"    iex> 1 &&& 1  # 演算子\n"
"    1\n"
"\n"
"演算子マクロだけ使いたい、または演算子マクロはスキップしたい場合は、\n"
"次のオプションを渡します。\n"
"\n"
"  * `:only_operators` - 演算子マクロのみを含みます\n"
"  * `:skip_operators` - 演算子マクロをスキップします\n"
"\n"
"たとえば、\n"
"\n"
"    iex> use Bitwise, only_operators: true\n"
"    iex> 1 &&& 1\n"
"    1\n"
"\n"
"オプションなしで起動した場合、`use Bitwise`は`import Bitwise`と\n"
"同じです。\n"
"\n"
"すべてのbitwiseマクロはガードで使えます。\n"
"\n"
"    iex> use Bitwise\n"
"    iex> odd? = fn(int) when band(int, 1) == 1 -> true; (_) -> false end\n"
"    iex> odd?.(1)\n"
"    true\n"
"\n"
