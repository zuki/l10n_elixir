msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-22 18:42+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: def Collectable.into(collectable)
#: lib/collectable.ex:31
msgid ""
"Returns a function that collects values alongside\n"
"the initial accumulation value.\n"
"\n"
"The returned function receives a collectable and injects a given\n"
"value into it for every `{:cont, term}` instruction.\n"
"\n"
"`:done` is passed when no further values will be injected, useful\n"
"for closing resources and normalizing values. A collectable must\n"
"be returned on `:done`.\n"
"\n"
"If injection is suddenly interrupted, `:halt` is passed and it can\n"
"return any value, as it won't be used.\n"
msgstr ""
"初期アキュムレータ値と共に値を集める関数を返します。\n"
"\n"
"返される関数は、collectableを受け取り、`{:cont, term}`指令毎に\n"
"指定した値をcollectableに注入します。\n"
"\n"
"注入する値がなくなると`:done`が渡されます。これは、リソースのクローズや\n"
"値の正規化に役立ちます。`:done`により、collectableが返されなければなりませ"
"ん。\n"
"\n"
"注入が突然中断された場合、`:halt`が渡されます。返り値は使われないので、\n"
"任意の値を返すことができます。\n"

#. TRANSLATORS: Elixir.Collectable Summary
#: lib/collectable.ex:2
msgid ""
"A protocol to traverse data structures.\n"
"\n"
"The `Enum.into/2` function uses this protocol to insert an\n"
"enumerable into a collection:\n"
"\n"
"    iex> Enum.into([a: 1, b: 2], %{})\n"
"    %{a: 1, b: 2}\n"
"\n"
"## Why Collectable?\n"
"\n"
"The `Enumerable` protocol is useful to take values out of a collection.\n"
"In order to support a wide range of values, the functions provided by\n"
"the `Enumerable` protocol do not keep shape. For example, passing a\n"
"map to `Enum.map/2` always returns a list.\n"
"\n"
"This design is intentional. `Enumerable` was designed to support infinite\n"
"collections, resources and other structures with fixed shape. For example,\n"
"it doesn't make sense to insert values into a range, as it has a fixed\n"
"shape where just the range limits are stored.\n"
"\n"
"The `Collectable` module was designed to fill the gap left by the\n"
"`Enumerable` protocol. `into/1` can be seen as the opposite of\n"
"`Enumerable.reduce/3`. If `Enumerable` is about taking values out,\n"
"`Collectable.into/1` is about collecting those values into a structure.\n"
msgstr ""
"データ構造を走査するプロトコルです。\n"
"\n"
"`Enum.into/2`関数は、このプロトコルを使ってコレクションにenumerableを\n"
"挿入します。\n"
"\n"
"    iex> Enum.into([a: 1, b: 2], %{})\n"
"    %{a: 1, b: 2}\n"
"\n"
"## 何故、Collectableが必要か?\n"
"\n"
"`Enumerable`プロトコルはコレクションから値を取り出すのに役立ちます。\n"
"広範囲にわたる値をサポートするために、`Enumerable`プロトコルにより\n"
"提供される関数は形を保持しません。たとえば、`Enum.map/2`にマップを\n"
"渡すと、常にリストを返します。\n"
"\n"
"この設計は意図的なものです。`Enumerable`は、無限のコレクション、リソース、\n"
"その他の固定した形を持つ構造をサポートするために設計されました。たとえば、\n"
"範囲に値を挿入することは意味をなしません。なぜなら、範囲は、範囲限界が格納\n"
"されているだけという固定した形を持つからです。\n"
"\n"
"`Collectable`モジュールは、`Enumerable`プロトコルにより残ったギャップを\n"
"埋めるために設計されました。`into/1`は`Enumerable.reduce/3`とは正反対と\n"
"みなすことができます。`Enumerable`が値を取り出すものだとしたら、\n"
"`Collectable.into/1`は構造に値を収集するものです。\n"
