#. TRANSLATORS: def System.compiled_endianness()
#: lib/system.ex:146 
msgid ""
"Returns the endianness the system was compiled with.\n"
msgstr ""
#. TRANSLATORS: def System.delete_env(varname)
#: lib/system.ex:411 
msgid ""
"Deletes an environment variable.\n"
"\n"
"Removes the variable `varname` from the environment.\n"
msgstr ""
#. TRANSLATORS: def System.at_exit(fun)
#: lib/system.ex:314 
msgid ""
"Registers a program exit handler function.\n"
"\n"
"Registers a function that will be invoked at the end of program execution.\n"
"Useful for invoking a hook in \"script\" mode.\n"
"\n"
"The handler always executes in a different process from the one it was\n"
"registered in. As a consequence, any resources managed by the calling process\n"
"(ETS tables, open files, etc.) won't be available by the time the handler\n"
"function is invoked.\n"
"\n"
"The function must receive the exit status code as an argument.\n"
msgstr ""
#. TRANSLATORS: def System.get_pid()
#: lib/system.ex:378 
msgid ""
"Erlang VM process identifier.\n"
"\n"
"Returns the process identifier of the current Erlang emulator\n"
"in the format most commonly used by the operating system environment.\n"
"\n"
"For more information, see [`:os.getpid/0`](http://www.erlang.org/doc/man/os.html#getpid-0).\n"
msgstr ""
#. TRANSLATORS: def System.get_env()
#: lib/system.ex:348 
msgid ""
"System environment variables.\n"
"\n"
"Returns a list of all environment variables. Each variable is given as a\n"
"`{name, value}` tuple where both `name` and `value` are strings.\n"
msgstr ""
#. TRANSLATORS: def System.tmp_dir()
#: lib/system.ex:260 
msgid ""
"Writable temporary directory.\n"
"\n"
"Returns a writable temporary directory.\n"
"Searches for directories in the following order:\n"
"\n"
"  1. the directory named by the TMPDIR environment variable\n"
"  2. the directory named by the TEMP environment variable\n"
"  3. the directory named by the TMP environment variable\n"
"  4. `C:\\TMP` on Windows or `/tmp` on Unix\n"
"  5. as a last resort, the current working directory\n"
"\n"
"Returns `nil` if none of the above are writable.\n"
msgstr ""
#. TRANSLATORS: def System.schedulers_online()
#: lib/system.ex:767 
msgid ""
"Returns the number of schedulers online in the VM.\n"
msgstr ""
#. TRANSLATORS: def System.version()
#: lib/system.ex:154 
msgid ""
"Elixir version information.\n"
"\n"
"Returns Elixir's version as binary.\n"
msgstr ""
#. TRANSLATORS: @type time_unit
#: lib/system.ex:65 
msgid ""
"The time unit to be passed to functions like `monotonic_time/1` and others.\n"
"\n"
"The `:second`, `:millisecond`, `:microsecond` and `:nanosecond` time\n"
"units controls the return value of the functions that accept a time unit.\n"
"\n"
"A time unit can also be a strictly positive integer. In this case, it\n"
"represents the \"parts per second\": the time will be returned in `1 /\n"
"parts_per_second` seconds. For example, using the `:millisecond` time unit\n"
"is equivalent to using `1000` as the time unit (as the time will be returned\n"
"in 1/1000 seconds - milliseconds).\n"
"\n"
"Keep in mind the Erlang API prior to version 19.1 will use `:milli_seconds`,\n"
"`:micro_seconds` and `:nano_seconds` as time units although Elixir normalizes\n"
"their spelling to match the SI convention.\n"
msgstr ""
#. TRANSLATORS: def System.argv(args)
#: lib/system.ex:197 
msgid ""
"Modifies command line arguments.\n"
"\n"
"Changes the list of command line arguments. Use it with caution,\n"
"as it destroys any previous argv information.\n"
msgstr ""
#. TRANSLATORS: def System.schedulers()
#: lib/system.ex:759 
msgid ""
"Returns the number of schedulers in the VM.\n"
msgstr ""
#. TRANSLATORS: Elixir.System Summary
#: lib/system.ex:2 
msgid ""
"The `System` module provides functions that interact directly\n"
"with the VM or the host system.\n"
"\n"
"## Time\n"
"\n"
"The `System` module also provides functions that work with time,\n"
"returning different times kept by the system with support for\n"
"different time units.\n"
"\n"
"One of the complexities in relying on system times is that they\n"
"may be adjusted. For example, when you enter and leave daylight\n"
"saving time, the system clock will be adjusted, often adding\n"
"or removing one hour. We call such changes \"time warps\". In\n"
"order to understand how such changes may be harmful, imagine\n"
"the following code:\n"
"\n"
"    ## DO NOT DO THIS\n"
"    prev = System.os_time()\n"
"    # ... execute some code ...\n"
"    next = System.os_time()\n"
"    diff = next - prev\n"
"\n"
"If, while the code is executing, the system clock changes,\n"
"some code that executed in 1 second may be reported as taking\n"
"over 1 hour! To address such concerns, the VM provides a\n"
"monotonic time via `System.monotonic_time/0` which never\n"
"decreases and does not leap:\n"
"\n"
"    ## DO THIS\n"
"    prev = System.monotonic_time()\n"
"    # ... execute some code ...\n"
"    next = System.monotonic_time()\n"
"    diff = next - prev\n"
"\n"
"Generally speaking, the VM provides three time measurements:\n"
"\n"
"  * `os_time/0` - the time reported by the OS. This time may be\n"
"    adjusted forwards or backwards in time with no limitation;\n"
"\n"
"  * `system_time/0` - the VM view of the `os_time/0`. The system time and OS\n"
"    time may not match in case of time warps although the VM works towards\n"
"    aligning them. This time is not monotonic (i.e., it may decrease)\n"
"    as its behaviour is configured [by the VM time warp\n"
"    mode](http://www.erlang.org/doc/apps/erts/time_correction.html#Time_Warp_Modes);\n"
"\n"
"  * `monotonic_time/0` - a monotonically increasing time provided\n"
"    by the Erlang VM.\n"
"\n"
"The time functions in this module work in the `:native` unit\n"
"(unless specified otherwise), which is OS dependent. Most of\n"
"the time, all calculations are done in the `:native` unit, to\n"
"avoid loss of precision, with `convert_time_unit/3` being\n"
"invoked at the end to convert to a specific time unit like\n"
"`:millisecond` or `:microsecond`. See the `t:time_unit/0` type for\n"
"more information.\n"
"\n"
"For a more complete rundown on the VM support for different\n"
"times, see the [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html)\n"
"in the Erlang docs.\n"
msgstr ""
#. TRANSLATORS: def System.tmp_dir!()
#: lib/system.ex:282 
msgid ""
"Writable temporary directory, exception on error.\n"
"\n"
"Same as `tmp_dir/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no temp dir is set.\n"
msgstr ""
#. TRANSLATORS: def System.user_home!()
#: lib/system.ex:249 
msgid ""
"User home directory, exception on error.\n"
"\n"
"Same as `user_home/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no user home is set.\n"
msgstr ""
#. TRANSLATORS: def System.otp_release()
#: lib/system.ex:751 
msgid ""
"Returns the OTP release number.\n"
msgstr ""
#. TRANSLATORS: def System.convert_time_unit(time, from_unit, to_unit)
#: lib/system.ex:678 
msgid ""
"Converts `time` from time unit `from_unit` to time unit `to_unit`.\n"
"\n"
"The result is rounded via the floor function.\n"
"\n"
"`convert_time_unit/3` accepts an additional time unit (other than the\n"
"ones in the `t:time_unit/0` type) called `:native`. `:native` is the time\n"
"unit used by the Erlang runtime system. It's determined when the runtime\n"
"starts and stays the same until the runtime is stopped. To determine what\n"
"the `:native` unit amounts to in a system, you can call this function to\n"
"convert 1 second to the `:native` time unit (i.e.,\n"
"`System.convert_time_unit(1, :second, :native)`).\n"
msgstr ""
#. TRANSLATORS: def System.system_time(unit)
#: lib/system.ex:666 
msgid ""
"Returns the current system time in the given time unit.\n"
"\n"
"It is the VM view of the `os_time/0`. They may not match in\n"
"case of time warps although the VM works towards aligning\n"
"them. This time is not monotonic.\n"
msgstr ""
#. TRANSLATORS: def System.find_executable(program)
#: lib/system.ex:331 
msgid ""
"Locates an executable on the system.\n"
"\n"
"This function looks up an executable program given\n"
"its name using the environment variable PATH on Unix\n"
"and Windows. It also considers the proper executable\n"
"extension for each OS, so for Windows it will try to\n"
"lookup files with `.com`, `.cmd` or similar extensions.\n"
msgstr ""
#. TRANSLATORS: def System.argv()
#: lib/system.ex:187 
msgid ""
"Lists command line arguments.\n"
"\n"
"Returns the list of command line arguments passed to the program.\n"
msgstr ""
#. TRANSLATORS: def System.time_offset()
#: lib/system.ex:696 
msgid ""
"Returns the current time offset between the Erlang VM monotonic\n"
"time and the Erlang VM system time.\n"
"\n"
"The result is returned in the `:native` time unit.\n"
"\n"
"See `time_offset/1` for more information.\n"
"\n"
"Inlined by the compiler into `:erlang.time_offset/0`.\n"
msgstr ""
#. TRANSLATORS: def System.cwd()
#: lib/system.ex:208 
msgid ""
"Current working directory.\n"
"\n"
"Returns the current working directory or `nil` if one\n"
"is not available.\n"
msgstr ""
#. TRANSLATORS: def System.halt(status \\ 0)
#: lib/system.ex:435 
msgid ""
"Halts the Erlang runtime system.\n"
"\n"
"Halts the Erlang runtime system where the argument `status` must be a\n"
"non-negative integer, the atom `:abort` or a binary.\n"
"\n"
"  * If an integer, the runtime system exits with the integer value which\n"
"    is returned to the operating system.\n"
"\n"
"  * If `:abort`, the runtime system aborts producing a core dump, if that is\n"
"    enabled in the operating system.\n"
"\n"
"  * If a string, an Erlang crash dump is produced with status as slogan,\n"
"    and then the runtime system exits with status code 1.\n"
"\n"
"Note that on many platforms, only the status codes 0-255 are supported\n"
"by the operating system.\n"
"\n"
"For more information, see [`:erlang.halt/1`](http://www.erlang.org/doc/man/erlang.html#halt-1).\n"
"\n"
"## Examples\n"
"\n"
"    System.halt(0)\n"
"    System.halt(1)\n"
"    System.halt(:abort)\n"
"\n"
msgstr ""
#. TRANSLATORS: def System.put_env(enum)
#: lib/system.ex:400 
msgid ""
"Sets multiple environment variables.\n"
"\n"
"Sets a new value for each environment variable corresponding\n"
"to each key in `dict`.\n"
msgstr ""
#. TRANSLATORS: def System.endianness()
#: lib/system.ex:139 
msgid ""
"Returns the endianness.\n"
msgstr ""
#. TRANSLATORS: def System.stacktrace()
#: lib/system.ex:422 
msgid ""
"Last exception stacktrace.\n"
"\n"
"Note that the Erlang VM (and therefore this function) does not\n"
"return the current stacktrace but rather the stacktrace of the\n"
"latest exception.\n"
"\n"
"Inlined by the compiler into `:erlang.get_stacktrace/0`.\n"
msgstr ""
#. TRANSLATORS: def System.monotonic_time(unit)
#: lib/system.ex:641 
msgid ""
"Returns the current monotonic time in the given time unit.\n"
"\n"
"This time is monotonically increasing and starts in an unspecified\n"
"point in time.\n"
msgstr ""
#. TRANSLATORS: def System.os_time()
#: lib/system.ex:725 
msgid ""
"Returns the current OS time.\n"
"\n"
"The result is returned in the `:native` time unit.\n"
"\n"
"This time may be adjusted forwards or backwards in time\n"
"with no limitation and is not monotonic.\n"
"\n"
"Inlined by the compiler into `:os.system_time/0`.\n"
msgstr ""
#. TRANSLATORS: def System.unique_integer(modifiers \\ [])
#: lib/system.ex:775 
msgid ""
"Generates and returns an integer that is unique in the current runtime\n"
"instance.\n"
"\n"
"\"Unique\" means that this function, called with the same list of `modifiers`,\n"
"will never return the same integer more than once on the current runtime\n"
"instance.\n"
"\n"
"If `modifiers` is `[]`, then a unique integer (that can be positive or negative) is returned.\n"
"Other modifiers can be passed to change the properties of the returned integer:\n"
"\n"
"  * `:positive` - the returned integer is guaranteed to be positive.\n"
"  * `:monotonic` - the returned integer is monotonically increasing. This\n"
"    means that, on the same runtime instance (but even on different\n"
"    processes), integers returned using the `:monotonic` modifier will always\n"
"    be strictly less than integers returned by successive calls with the\n"
"    `:monotonic` modifier.\n"
"\n"
"All modifiers listed above can be combined; repeated modifiers in `modifiers`\n"
"will be ignored.\n"
"\n"
"Inlined by the compiler into `:erlang.unique_integer/1`.\n"
msgstr ""
#. TRANSLATORS: def System.put_env(varname, value)
#: lib/system.ex:389 
msgid ""
"Sets an environment variable value.\n"
"\n"
"Sets a new `value` for the environment variable `varname`.\n"
msgstr ""
#. TRANSLATORS: def System.build_info()
#: lib/system.ex:162 
msgid ""
"Elixir build information.\n"
"\n"
"Returns a keyword list with Elixir version, Git short revision hash and compilation date.\n"
msgstr ""
#. TRANSLATORS: def System.os_time(unit)
#: lib/system.ex:740 
msgid ""
"Returns the current OS time in the given time `unit`.\n"
"\n"
"This time may be adjusted forwards or backwards in time\n"
"with no limitation and is not monotonic.\n"
msgstr ""
#. TRANSLATORS: def System.cwd!()
#: lib/system.ex:230 
msgid ""
"Current working directory, exception on error.\n"
"\n"
"Returns the current working directory or raises `RuntimeError`.\n"
msgstr ""
#. TRANSLATORS: def System.get_env(varname)
#: lib/system.ex:363 
msgid ""
"Environment variable value.\n"
"\n"
"Returns the value of the environment variable\n"
"`varname` as a binary, or `nil` if the environment\n"
"variable is undefined.\n"
msgstr ""
#. TRANSLATORS: def System.monotonic_time()
#: lib/system.ex:628 
msgid ""
"Returns the current monotonic time in the `:native` time unit.\n"
"\n"
"This time is monotonically increasing and starts in an unspecified\n"
"point in time.\n"
"\n"
"Inlined by the compiler into `:erlang.monotonic_time/0`.\n"
msgstr ""
#. TRANSLATORS: def System.cmd(command, args, opts \\ [])
#: lib/system.ex:474 
msgid ""
"Executes the given `command` with `args`.\n"
"\n"
"`command` is expected to be an executable available in PATH\n"
"unless an absolute path is given.\n"
"\n"
"`args` must be a list of binaries which the executable will receive\n"
"as its arguments as is. This means that:\n"
"\n"
"  * environment variables will not be interpolated\n"
"  * wildcard expansion will not happen (unless `Path.wildcard/2` is used\n"
"    explicitly)\n"
"  * arguments do not need to be escaped or quoted for shell safety\n"
"\n"
"This function returns a tuple containing the collected result\n"
"and the command exit status.\n"
"\n"
"Internally, this function uses a `Port` for interacting with the\n"
"outside world. However, if you plan to run a long-running program,\n"
"ports guarantee stdin/stdout devices will be closed but it does not\n"
"automatically terminate the problem. The documentation for the\n"
"`Port` module describes this problem and possible solutions under\n"
"the \"Zombie processes\" section.\n"
"\n"
"## Examples\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], env: [{\"MIX_ENV\", \"test\"}]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], into: IO.stream(:stdio, :line)\n"
"    hello\n"
"    {%IO.Stream{}, 0}\n"
"\n"
"## Options\n"
"\n"
"  * `:into` - injects the result into the given collectable, defaults to `\"\"`\n"
"  * `:cd` - the directory to run the command in\n"
"  * `:env` - an enumerable of tuples containing environment key-value as binary\n"
"  * `:arg0` - sets the command arg0\n"
"  * `:stderr_to_stdout` - redirects stderr to stdout when `true`\n"
"  * `:parallelism` - when `true`, the VM will schedule port tasks to improve\n"
"    parallelism in the system. If set to `false`, the VM will try to perform\n"
"    commands immediately, improving latency at the expense of parallelism.\n"
"    The default can be set on system startup by passing the \"+spp\" argument\n"
"    to `--erl`.\n"
"\n"
"## Error reasons\n"
"\n"
"If invalid arguments are given, `ArgumentError` is raised by\n"
"`System.cmd/3`. `System.cmd/3` also expects a strict set of\n"
"options and will raise if unknown or invalid options are given.\n"
"\n"
"Furthermore, `System.cmd/3` may fail with one of the POSIX reasons\n"
"detailed below:\n"
"\n"
"  * `:system_limit` - all available ports in the Erlang emulator are in use\n"
"\n"
"  * `:enomem` - there was not enough memory to create the port\n"
"\n"
"  * `:eagain` - there are no more available operating system processes\n"
"\n"
"  * `:enametoolong` - the external command given was too long\n"
"\n"
"  * `:emfile` - there are no more available file descriptors\n"
"    (for the operating system process that the Erlang emulator runs in)\n"
"\n"
"  * `:enfile` - the file table is full (for the entire operating system)\n"
"\n"
"  * `:eacces` - the command does not point to an executable file\n"
"\n"
"  * `:enoent` - the command does not point to an existing file\n"
"\n"
"## Shell commands\n"
"\n"
"If you desire to execute a trusted command inside a shell, with pipes,\n"
"redirecting and so on, please check\n"
"[`:os.cmd/1`](http://www.erlang.org/doc/man/os.html#cmd-1).\n"
msgstr ""
#. TRANSLATORS: def System.user_home()
#: lib/system.ex:240 
msgid ""
"User home directory.\n"
"\n"
"Returns the user home directory (platform independent).\n"
msgstr ""
#. TRANSLATORS: def System.time_offset(unit)
#: lib/system.ex:711 
msgid ""
"Returns the current time offset between the Erlang VM monotonic\n"
"time and the Erlang VM system time.\n"
"\n"
"The result is returned in the given time unit `unit`. The returned\n"
"offset, added to an Erlang monotonic time (e.g., obtained with\n"
"`monotonic_time/1`), gives the Erlang system time that corresponds\n"
"to that monotonic time.\n"
msgstr ""
#. TRANSLATORS: def System.system_time()
#: lib/system.ex:652 
msgid ""
"Returns the current system time in the `:native` time unit.\n"
"\n"
"It is the VM view of the `os_time/0`. They may not match in\n"
"case of time warps although the VM works towards aligning\n"
"them. This time is not monotonic.\n"
"\n"
"Inlined by the compiler into `:erlang.system_time/0`.\n"
msgstr ""
