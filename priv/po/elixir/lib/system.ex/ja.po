msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-01-31 11:03+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#. TRANSLATORS: def System.compiled_endianness()
#: lib/system.ex:146
msgid "Returns the endianness the system was compiled with.\n"
msgstr "システムがコンパイルされたエンディアンを返します。\n"

#. TRANSLATORS: def System.delete_env(varname)
#: lib/system.ex:411
msgid ""
"Deletes an environment variable.\n"
"\n"
"Removes the variable `varname` from the environment.\n"
msgstr ""
"環境変数を削除します。\n"
"\n"
"環境から変数`varname`を削除します。\n"

#. TRANSLATORS: def System.at_exit(fun)
#: lib/system.ex:314
msgid ""
"Registers a program exit handler function.\n"
"\n"
"Registers a function that will be invoked at the end of program execution.\n"
"Useful for invoking a hook in \"script\" mode.\n"
"\n"
"The handler always executes in a different process from the one it was\n"
"registered in. As a consequence, any resources managed by the calling "
"process\n"
"(ETS tables, open files, etc.) won't be available by the time the handler\n"
"function is invoked.\n"
"\n"
"The function must receive the exit status code as an argument.\n"
msgstr ""
"プログラムのexitハンドラ関数を登録します。\n"
"\n"
"プログラム実行の終了時に実行される関数を登録します。\"script\"モード\n"
"でフックとして実行するのに便利です。\n"
"\n"
"ハンドラは常に登録されたものとは別のプロセスで実行されます。その結果、\n"
"呼び出したプロセスで管理されているいかなるリソース(ETSテーブル、開い\n"
"ているファイルなど)も、ハンドラ関数が実行される際には利用できません。\n"
"\n"
"関数は引数としてexitステータスコードを受け取らなくてはなりません。\n"

#. TRANSLATORS: def System.get_pid()
#: lib/system.ex:378
msgid ""
"Erlang VM process identifier.\n"
"\n"
"Returns the process identifier of the current Erlang emulator\n"
"in the format most commonly used by the operating system environment.\n"
"\n"
"For more information, see [`:os.getpid/0`](http://www.erlang.org/doc/man/os."
"html#getpid-0).\n"
msgstr ""
"Erlang VMプロセス識別子。\n"
"\n"
"オペレーティングシステム環境で最も一般的に使われる形式で\n"
"現在のErlangエミュレータのプロセス識別子を返します。\n"
"\n"
"詳細は \n"
"[`:os.getpid/0`](http://www.erlang.org/doc/man/os.html#getpid-0)\n"
"を参照してください。\n"

#. TRANSLATORS: def System.get_env()
#: lib/system.ex:348
msgid ""
"System environment variables.\n"
"\n"
"Returns a list of all environment variables. Each variable is given as a\n"
"`{name, value}` tuple where both `name` and `value` are strings.\n"
msgstr ""
"システム環境変数。\n"
"\n"
"すべての環境変数のリストを返します。各変数はタプル`{name, value}`で\n"
"示されます。ここで、`name`と`value`はどちらも文字列です。\n"

#. TRANSLATORS: def System.tmp_dir()
#: lib/system.ex:260
msgid ""
"Writable temporary directory.\n"
"\n"
"Returns a writable temporary directory.\n"
"Searches for directories in the following order:\n"
"\n"
"  1. the directory named by the TMPDIR environment variable\n"
"  2. the directory named by the TEMP environment variable\n"
"  3. the directory named by the TMP environment variable\n"
"  4. `C:\\TMP` on Windows or `/tmp` on Unix\n"
"  5. as a last resort, the current working directory\n"
"\n"
"Returns `nil` if none of the above are writable.\n"
msgstr ""
"書き込み可能なテンポラリディレクトリ。\n"
"\n"
"書き込み可能なテンポラリディレクトリを返します。\n"
"以下の順序でディレクトリを探します:\n"
"\n"
"  1. TMPDIR環境変数で指定されたディレクトリ\n"
"  2. TEMP環境変数で指定されたディレクトリ\n"
"  3. TMP環境変数で指定されたディレクトリ\n"
"  4. Windowsでは`C:\\TMP`、Linuxでは`/tmp`\n"
"  5. 最後の手段として、カレントワーキングディレクトリ\n"
"\n"
"上のすべてが書き込み可能でなかった場合は`nil`を返します。\n"

#. TRANSLATORS: def System.schedulers_online()
#: lib/system.ex:767
msgid "Returns the number of schedulers online in the VM.\n"
msgstr "VMでオンラインのスケジューラの数を返します。\n"

#. TRANSLATORS: def System.version()
#: lib/system.ex:154
msgid ""
"Elixir version information.\n"
"\n"
"Returns Elixir's version as binary.\n"
msgstr ""
"Elixirバージョン情報。\n"
"\n"
"Elixirのバージョンをバイナリで返します。\n"

#. TRANSLATORS: @type time_unit
#: lib/system.ex:65
msgid ""
"The time unit to be passed to functions like `monotonic_time/1` and others.\n"
"\n"
"The `:second`, `:millisecond`, `:microsecond` and `:nanosecond` time\n"
"units controls the return value of the functions that accept a time unit.\n"
"\n"
"A time unit can also be a strictly positive integer. In this case, it\n"
"represents the \"parts per second\": the time will be returned in `1 /\n"
"parts_per_second` seconds. For example, using the `:millisecond` time unit\n"
"is equivalent to using `1000` as the time unit (as the time will be "
"returned\n"
"in 1/1000 seconds - milliseconds).\n"
"\n"
"Keep in mind the Erlang API prior to version 19.1 will use `:"
"milli_seconds`,\n"
"`:micro_seconds` and `:nano_seconds` as time units although Elixir "
"normalizes\n"
"their spelling to match the SI convention.\n"
msgstr ""
"`monotonic_time/1`などの関数に渡す時間単位。\n"
"\n"
"`:second`, `:millisecond`, `:microsecond`, `:nanosecond`の各時間単位は、\n"
"時間単位を受け入れる関数の戻り値を制御します。\n"
"\n"
"時間単位は、厳密な正の整数でも指定できます。 この場合は「整数分の1秒」を\n"
"表します。\n"
"時間は`1 / parts_per_second`秒で返されます。 たとえば、`:millsecond`時間単位"
"は\n"
"時間単位として`1000`を使用することと同等です\n"
"（時間は1/1000秒 、すんわちミリ秒で返されるためです）。\n"
"\n"
"ElixirはSI規則に一致するように正規化を行っていますが、バージョン19.1より前"
"の\n"
"Erlang APIでは、 `:milli_seconds`, `:micro_seconds`, \n"
"`:nano_seconds`を時間単位として使用していることに留意してください。\n"

#. TRANSLATORS: def System.schedulers()
#: lib/system.ex:759
msgid "Returns the number of schedulers in the VM.\n"
msgstr "VMのスケジューラの数を返します。\n"

#. TRANSLATORS: Elixir.System Summary
#: lib/system.ex:2
msgid ""
"The `System` module provides functions that interact directly\n"
"with the VM or the host system.\n"
"\n"
"## Time\n"
"\n"
"The `System` module also provides functions that work with time,\n"
"returning different times kept by the system with support for\n"
"different time units.\n"
"\n"
"One of the complexities in relying on system times is that they\n"
"may be adjusted. For example, when you enter and leave daylight\n"
"saving time, the system clock will be adjusted, often adding\n"
"or removing one hour. We call such changes \"time warps\". In\n"
"order to understand how such changes may be harmful, imagine\n"
"the following code:\n"
"\n"
"    ## DO NOT DO THIS\n"
"    prev = System.os_time()\n"
"    # ... execute some code ...\n"
"    next = System.os_time()\n"
"    diff = next - prev\n"
"\n"
"If, while the code is executing, the system clock changes,\n"
"some code that executed in 1 second may be reported as taking\n"
"over 1 hour! To address such concerns, the VM provides a\n"
"monotonic time via `System.monotonic_time/0` which never\n"
"decreases and does not leap:\n"
"\n"
"    ## DO THIS\n"
"    prev = System.monotonic_time()\n"
"    # ... execute some code ...\n"
"    next = System.monotonic_time()\n"
"    diff = next - prev\n"
"\n"
"Generally speaking, the VM provides three time measurements:\n"
"\n"
"  * `os_time/0` - the time reported by the OS. This time may be\n"
"    adjusted forwards or backwards in time with no limitation;\n"
"\n"
"  * `system_time/0` - the VM view of the `os_time/0`. The system time and "
"OS\n"
"    time may not match in case of time warps although the VM works towards\n"
"    aligning them. This time is not monotonic (i.e., it may decrease)\n"
"    as its behaviour is configured [by the VM time warp\n"
"    mode](http://www.erlang.org/doc/apps/erts/time_correction."
"html#Time_Warp_Modes);\n"
"\n"
"  * `monotonic_time/0` - a monotonically increasing time provided\n"
"    by the Erlang VM.\n"
"\n"
"The time functions in this module work in the `:native` unit\n"
"(unless specified otherwise), which is OS dependent. Most of\n"
"the time, all calculations are done in the `:native` unit, to\n"
"avoid loss of precision, with `convert_time_unit/3` being\n"
"invoked at the end to convert to a specific time unit like\n"
"`:millisecond` or `:microsecond`. See the `t:time_unit/0` type for\n"
"more information.\n"
"\n"
"For a more complete rundown on the VM support for different\n"
"times, see the [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html)\n"
"in the Erlang docs.\n"
msgstr ""
"`System`モジュールはVMまたｈホストシステムと直接対話する機能を\n"
"提供します。\n"
"\n"
"##  時間\n"
"`System`モジュールは、時間を扱う関数も提供しており、様々な\n"
"時間単位をサポートするシステムによって保持されている様々な時間を\n"
"返します。\n"
"\n"
"システム時間に頼る際の複雑さの1つは、システム時間は調整\n"
"できることです。 \n"
"たとえば、夏時間を入力して放置すると、システムクロックは調整され、\n"
"しばしば1時間が追加または削除されます。 我々はそのような変更を\n"
"「タイムワープ」と呼びます。 そのような変更がどのように危険なのかを\n"
"理解するには、次のコードを想像してください。\n"
"\n"
"    ## これはしないでください\n"
"    prev = System.os_time()\n"
"    # ... 何らかのコードを実行 ...\n"
"    next = System.os_time()\n"
"    diff = next - prev\n"
"\n"
"コードの実行中に、システムクロックが変更されたとしたら、1秒で\n"
"実行されたコードが1時間以上かかったと報告されるかもしれません。\n"
"このような問題に対処するために、VMは`System.monotonic_time/0`を\n"
"介して単調な時間を提供します。これは決して減少も、跳躍もしません。\n"
"\n"
"    ## こうしてください\n"
"    prev = System.monotonic_time()\n"
"    # ... 何らかのコードを実行 ...\n"
"    next = System.monotonic_time()\n"
"    diff = next - prev\n"
"\n"
"一般に、VMは3つの時間測定値を提供します。\n"
"\n"
"  * `os_time/0` - OSにより報告される時間です。この時間は無制限に時間を前方\n"
"    または後方に調整する場合があります。\n"
"\n"
"  * `system_time/0` - the VM view of the `os_time/0`をVMが見た時間です。シス"
"テム時間と\n"
"     OS時間はVMは整合するように動作しますが、タイムワープが生じた場合一致しま"
"せん。この時間は\n"
"     単調ではありません（すなわち、減少することがあります）。そのふるまいは"
"[VMタイムワープモード\n"
"     により](http://www.erlang.org/doc/apps/erts/time_correction."
"html#Time_Warp_Modes)\n"
"     構成できるからです。\n"
"  * `monotonic_time/0` - Erlang VMが提供する単調増加する\n"
"     時間\n"
"\n"
"このモジュールの時間関数は（特に指定しない限り）`:naive`単位で\n"
"動作します。これはOSに依存します。ほとんどの場合、すべての計算は\n"
"精度を落とさないために`:naive`単位で行われ、最後に`convert_time_unit/3`が\n"
"呼び出され、`:millisecond`や`:microsecond`などの特定の時間単位に\n"
"変換されます。詳細は、`t:time_unit/0`型を参照して\n"
"ください。\n"
"\n"
"さまざまな時間のVMサポートのより完全な概要については、Erlangドキュメントの\n"
"[時間と時刻の修正に関する章](http://www.erlang.org/doc/apps/erts/"
"time_correction.html)を\n"
"参照してください。\n"

#. TRANSLATORS: def System.tmp_dir!()
#: lib/system.ex:282
msgid ""
"Writable temporary directory, exception on error.\n"
"\n"
"Same as `tmp_dir/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no temp dir is set.\n"
msgstr ""
"書き込み可能なテンポラリディレクトリ、エラーで例外。\n"
"\n"
"`tmp_dir/0`と同じですが、テンポラリディレクトリが設定\n"
"されない場合は`nil`を返すかわりに、`RuntimeError`を発生させます。\n"

#. TRANSLATORS: def System.user_home!()
#: lib/system.ex:249
msgid ""
"User home directory, exception on error.\n"
"\n"
"Same as `user_home/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no user home is set.\n"
msgstr ""
"ユーザホームディレクトリ、エラー時に例外。\n"
"\n"
"`user_home/0`と同じですが、ユーザホームが設定されて\n"
"いない場合、`nil`を返す代わりに`RuntimeError`を発生させます。\n"

#. TRANSLATORS: def System.argv(args)
#: lib/system.ex:197
msgid ""
"Modifies command line arguments.\n"
"\n"
"Changes the list of command line arguments. Use it with caution,\n"
"as it destroys any previous argv information.\n"
msgstr ""
"コマンドライン引数を変更します。\n"
"\n"
"コマンドライン引数のリストを変更します。\n"
"以前のargv情報は全て破壊されますので、使用には注意してください。\n"

#. TRANSLATORS: def System.otp_release()
#: lib/system.ex:751
msgid "Returns the OTP release number.\n"
msgstr "OTPリリース番号を返します。\n"

#. TRANSLATORS: def System.put_env(enum)
#: lib/system.ex:400
msgid ""
"Sets multiple environment variables.\n"
"\n"
"Sets a new value for each environment variable corresponding\n"
"to each key in `dict`.\n"
msgstr ""
"複数の環境変数を設定します。\n"
"\n"
"`dict`の各キーに対応する各環境変数に\n"
"新しい値を設定します。\n"

#. TRANSLATORS: def System.endianness()
#: lib/system.ex:139
msgid "Returns the endianness.\n"
msgstr "エンディアンを返します。\n"

#. TRANSLATORS: def System.convert_time_unit(time, from_unit, to_unit)
#: lib/system.ex:678
msgid ""
"Converts `time` from time unit `from_unit` to time unit `to_unit`.\n"
"\n"
"The result is rounded via the floor function.\n"
"\n"
"`convert_time_unit/3` accepts an additional time unit (other than the\n"
"ones in the `t:time_unit/0` type) called `:native`. `:native` is the time\n"
"unit used by the Erlang runtime system. It's determined when the runtime\n"
"starts and stays the same until the runtime is stopped. To determine what\n"
"the `:native` unit amounts to in a system, you can call this function to\n"
"convert 1 second to the `:native` time unit (i.e.,\n"
"`System.convert_time_unit(1, :second, :native)`).\n"
msgstr ""
"`time`を時間単位`from_unit`から時間単位`to_unit`に変換します。\n"
"\n"
"結果はfloor関数で丸められます。\n"
"\n"
"`convert_time_unit/3`は`:native`という（`t:time_unit/0`型以外の）\n"
"追加の時間単位を受け付けます。`:native`はErlangランタイムシステムで\n"
"使用されている時間単位です。ランタイムが起動される際に決定され、ランタイム"
"が\n"
"停止するまで同じ状態を保ちます。`:native`単位がシステムの中でどのような\n"
"量になっているかを判断するには、この関数を使用して1秒を`:native`時間\n"
"単位に変換します（すなわち、`System.convert_time_unit(1, :second, :native)`\n"
"を実行します）。\n"

#. TRANSLATORS: def System.stacktrace()
#: lib/system.ex:422
msgid ""
"Last exception stacktrace.\n"
"\n"
"Note that the Erlang VM (and therefore this function) does not\n"
"return the current stacktrace but rather the stacktrace of the\n"
"latest exception.\n"
"\n"
"Inlined by the compiler into `:erlang.get_stacktrace/0`.\n"
msgstr ""
"最後の例外スタックトレース。\n"
"\n"
"Erlang VM(そして、この関数)は現在のスタックトレースではなく、\n"
"最後の例外のスタックトレースを返すことに\n"
"注意してください。\n"
"\n"
"コンパイラにより`:erlang.get_stacktrace/0`にインライン化されます。\n"

#. TRANSLATORS: def System.monotonic_time(unit)
#: lib/system.ex:641
msgid ""
"Returns the current monotonic time in the given time unit.\n"
"\n"
"This time is monotonically increasing and starts in an unspecified\n"
"point in time.\n"
msgstr ""
"現在の単調増加時間を指定された時間単位で返します。\n"
"\n"
"この時間は、不特定の時間に始まり、\n"
"単調に増加します。\n"

#. TRANSLATORS: def System.argv()
#: lib/system.ex:187
msgid ""
"Lists command line arguments.\n"
"\n"
"Returns the list of command line arguments passed to the program.\n"
msgstr ""
"コマンドライン引数をリストします。\n"
"\n"
"プログラムに渡された、コマンドライン引数のリストを返します。\n"

#. TRANSLATORS: def System.time_offset()
#: lib/system.ex:696
msgid ""
"Returns the current time offset between the Erlang VM monotonic\n"
"time and the Erlang VM system time.\n"
"\n"
"The result is returned in the `:native` time unit.\n"
"\n"
"See `time_offset/1` for more information.\n"
"\n"
"Inlined by the compiler into `:erlang.time_offset/0`.\n"
msgstr ""
"Erlang VM単調増加時間とErlang VMシステム時間の間の\n"
"現在の時間オフセットを返します。\n"
"\n"
"結果は`:native`時間単位で返されます。\n"
"\n"
"詳細は `time_offset/1`を参照してください。\n"
"\n"
"コンパイラにより、`:erlang.time_offset/0`にインライン化されます。\n"

#. TRANSLATORS: def System.cwd()
#: lib/system.ex:208
msgid ""
"Current working directory.\n"
"\n"
"Returns the current working directory or `nil` if one\n"
"is not available.\n"
msgstr ""
"カレントワーキングディレクトリ。\n"
"\n"
"カレントワーキングディレクトリを返します。\n"
"利用できない場合は`nil`を返します。\n"

#. TRANSLATORS: def System.halt(status \\ 0)
#: lib/system.ex:435
msgid ""
"Halts the Erlang runtime system.\n"
"\n"
"Halts the Erlang runtime system where the argument `status` must be a\n"
"non-negative integer, the atom `:abort` or a binary.\n"
"\n"
"  * If an integer, the runtime system exits with the integer value which\n"
"    is returned to the operating system.\n"
"\n"
"  * If `:abort`, the runtime system aborts producing a core dump, if that "
"is\n"
"    enabled in the operating system.\n"
"\n"
"  * If a string, an Erlang crash dump is produced with status as slogan,\n"
"    and then the runtime system exits with status code 1.\n"
"\n"
"Note that on many platforms, only the status codes 0-255 are supported\n"
"by the operating system.\n"
"\n"
"For more information, see [`:erlang.halt/1`](http://www.erlang.org/doc/man/"
"erlang.html#halt-1).\n"
"\n"
"## Examples\n"
"\n"
"    System.halt(0)\n"
"    System.halt(1)\n"
"    System.halt(:abort)\n"
"\n"
msgstr ""
"Erlangランタイムシステムを停止します。\n"
"\n"
"Erlangランタイムシステムを停止します。引数`status`は非負の整数か、\n"
"アトム`:abort`か、バイナリでなければなりません。\n"
"\n"
"  * 整数の場合、ランタイムシステムはその整数値で終了し、\n"
"    オペレーティングシステムにその値を返します。\n"
"\n"
"  * `:abort`の場合、ランタイムシステムはアボートし、オペレーティング\n"
"    システムがコアダンプを有効にしていれば、コアダンプを生成します。\n"
"\n"
"  * 文字列の場合、文字列をステータスとするErlangクラッシュダンプが生成さ"
"れ、\n"
"    ランタイムシステムはステータスコード 1で終了します。\n"
"\n"
"多くのプラットフォームでは、オペレーティングシステムがサポートする\n"
"ステータスコードは0-255だけであることに注意してください。\n"
"\n"
"詳細は、\n"
"[`:erlang.halt/1`](http://www.erlang.org/doc/man/erlang.html#halt-1)\n"
"をチェックしてください。\n"
"\n"
"## 例\n"
"\n"
"    System.halt(0)\n"
"    System.halt(1)\n"
"    System.halt(:abort)\n"
"\n"

#. TRANSLATORS: def System.os_time()
#: lib/system.ex:725
msgid ""
"Returns the current OS time.\n"
"\n"
"The result is returned in the `:native` time unit.\n"
"\n"
"This time may be adjusted forwards or backwards in time\n"
"with no limitation and is not monotonic.\n"
"\n"
"Inlined by the compiler into `:os.system_time/0`.\n"
msgstr ""
"現在のOS時間を返します。\n"
"\n"
"結果は`:native`時間単位で返されます。\n"
"\n"
"この時間は時間の前方または後方に無制限に調整される場合があり、\n"
"単調増加ではありません。\n"
"\n"
"コンパイラにより、`:erlang.time_offset/0`にインライン化されます。\n"

#. TRANSLATORS: def System.find_executable(program)
#: lib/system.ex:331
msgid ""
"Locates an executable on the system.\n"
"\n"
"This function looks up an executable program given\n"
"its name using the environment variable PATH on Unix\n"
"and Windows. It also considers the proper executable\n"
"extension for each OS, so for Windows it will try to\n"
"lookup files with `.com`, `.cmd` or similar extensions.\n"
msgstr ""
"システム上の実行ファイルの場所を探します。\n"
"\n"
"この関数は、UnixやWindowsの環境変数PATHを使用して\n"
"指定された名前の実行可能プログラムを探します。\n"
"各OSにおける適切な実行可能ファイルの拡張子を考慮しますので、\n"
"たとえば、Windowsでは、`.com`や`.cmd`などの拡張子の\n"
"ファイルを探します。\n"

#. TRANSLATORS: def System.system_time(unit)
#: lib/system.ex:666
msgid ""
"Returns the current system time in the given time unit.\n"
"\n"
"It is the VM view of the `os_time/0`. They may not match in\n"
"case of time warps although the VM works towards aligning\n"
"them. This time is not monotonic.\n"
msgstr ""
"現在のシステム時間を指定された時間単位で返します。\n"
"\n"
"これはVMから見た`os_time/0`です。VMは両者を整合させようと\n"
"しますが、タイムワープがあると両者は一致しない場合があります。\n"
"この時間は単調増加ではありません。\n"

#. TRANSLATORS: def System.unique_integer(modifiers \\ [])
#: lib/system.ex:775
msgid ""
"Generates and returns an integer that is unique in the current runtime\n"
"instance.\n"
"\n"
"\"Unique\" means that this function, called with the same list of "
"`modifiers`,\n"
"will never return the same integer more than once on the current runtime\n"
"instance.\n"
"\n"
"If `modifiers` is `[]`, then a unique integer (that can be positive or "
"negative) is returned.\n"
"Other modifiers can be passed to change the properties of the returned "
"integer:\n"
"\n"
"  * `:positive` - the returned integer is guaranteed to be positive.\n"
"  * `:monotonic` - the returned integer is monotonically increasing. This\n"
"    means that, on the same runtime instance (but even on different\n"
"    processes), integers returned using the `:monotonic` modifier will "
"always\n"
"    be strictly less than integers returned by successive calls with the\n"
"    `:monotonic` modifier.\n"
"\n"
"All modifiers listed above can be combined; repeated modifiers in "
"`modifiers`\n"
"will be ignored.\n"
"\n"
"Inlined by the compiler into `:erlang.unique_integer/1`.\n"
msgstr ""
"現在のランタイムインスタンスでのユニークな整数を生成して返します。\n"
"\n"
"ここで\"ユニーク\"とは、同じ`modifiers`のリストで呼び出されると、\n"
"この関数は現在のランタイムインスタンスにおいて同じ整数を二度と\n"
"返さないことを意味します。\n"
"\n"
"`modifiers`が`[]`の場合は、ユニークな整数(正負両方が有り得ます)が\n"
"返されます。他の修飾子を渡すことで、返される整数の属性を変更することが\n"
"できます:\n"
"\n"
"  * `:positive` - 返される整数が正であるが保証されます。\n"
"  * `:monotonic` - 返される整数は単調増加です。これは、同じランタイム\n"
"    インスタンスでは(プロセスが異なっても)、`:monotonic`修飾子\n"
"    を使用して返された整数は、後続の`:monotonic`修飾子を\n"
"    使用した呼出しで返される整数より常に確実に小さいことを\n"
"    意味します。\n"
"\n"
"上にあげたすべての修飾子は組み合わせることができ; `modifiers`の\n"
"中で重複した修飾子は単に無視されます。\n"
"\n"
"コンパイラにより`:erlang.unique_integer/1`にインライン化されます。\n"

#. TRANSLATORS: def System.put_env(varname, value)
#: lib/system.ex:389
msgid ""
"Sets an environment variable value.\n"
"\n"
"Sets a new `value` for the environment variable `varname`.\n"
msgstr ""
"環境変数の値を設定します。\n"
"\n"
"環境変数`varname`に新しい値`value`を設定します。\n"

#. TRANSLATORS: def System.monotonic_time()
#: lib/system.ex:628
msgid ""
"Returns the current monotonic time in the `:native` time unit.\n"
"\n"
"This time is monotonically increasing and starts in an unspecified\n"
"point in time.\n"
"\n"
"Inlined by the compiler into `:erlang.monotonic_time/0`.\n"
msgstr ""
"現在の単調増加時間を`:native`時間単位で返します。\n"
"\n"
"この時間は、不特定の時間に始まり、\n"
"単調に増加します。\n"
"\n"
"コンパイラにより、`:erlang.monotonic_time/0`にインライン化されます。\n"

#. TRANSLATORS: def System.cwd!()
#: lib/system.ex:230
msgid ""
"Current working directory, exception on error.\n"
"\n"
"Returns the current working directory or raises `RuntimeError`.\n"
msgstr ""
"カレントワーキングディレクトリ。エラー時は例外。\n"
"\n"
"カレントワーキングディレクトリを返します。または、`RuntimeError`を発生させま"
"す。\n"

#. TRANSLATORS: def System.get_env(varname)
#: lib/system.ex:363
msgid ""
"Environment variable value.\n"
"\n"
"Returns the value of the environment variable\n"
"`varname` as a binary, or `nil` if the environment\n"
"variable is undefined.\n"
msgstr ""
"環境変数値。\n"
"\n"
"環境変数`varname`の値をバイナリで返します。\n"
"環境変数が未定義の場合は`nil`を\n"
"返します。\n"

#. TRANSLATORS: def System.build_info()
#: lib/system.ex:162
msgid ""
"Elixir build information.\n"
"\n"
"Returns a keyword list with Elixir version, Git short revision hash and "
"compilation date.\n"
msgstr ""
"Elixirビルドインフォメーションです。\n"
"\n"
"Elixirバージョン、gitリビジョンハッシュの短縮版、コンパイル日時を含むキーワー"
"ドリストを返します。\n"

#. TRANSLATORS: def System.cmd(command, args, opts \\ [])
#: lib/system.ex:474
msgid ""
"Executes the given `command` with `args`.\n"
"\n"
"`command` is expected to be an executable available in PATH\n"
"unless an absolute path is given.\n"
"\n"
"`args` must be a list of binaries which the executable will receive\n"
"as its arguments as is. This means that:\n"
"\n"
"  * environment variables will not be interpolated\n"
"  * wildcard expansion will not happen (unless `Path.wildcard/2` is used\n"
"    explicitly)\n"
"  * arguments do not need to be escaped or quoted for shell safety\n"
"\n"
"This function returns a tuple containing the collected result\n"
"and the command exit status.\n"
"\n"
"Internally, this function uses a `Port` for interacting with the\n"
"outside world. However, if you plan to run a long-running program,\n"
"ports guarantee stdin/stdout devices will be closed but it does not\n"
"automatically terminate the problem. The documentation for the\n"
"`Port` module describes this problem and possible solutions under\n"
"the \"Zombie processes\" section.\n"
"\n"
"## Examples\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], env: [{\"MIX_ENV\", \"test\"}]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], into: IO.stream(:stdio, :line)\n"
"    hello\n"
"    {%IO.Stream{}, 0}\n"
"\n"
"## Options\n"
"\n"
"  * `:into` - injects the result into the given collectable, defaults to `"
"\"\"`\n"
"  * `:cd` - the directory to run the command in\n"
"  * `:env` - an enumerable of tuples containing environment key-value as "
"binary\n"
"  * `:arg0` - sets the command arg0\n"
"  * `:stderr_to_stdout` - redirects stderr to stdout when `true`\n"
"  * `:parallelism` - when `true`, the VM will schedule port tasks to "
"improve\n"
"    parallelism in the system. If set to `false`, the VM will try to "
"perform\n"
"    commands immediately, improving latency at the expense of parallelism.\n"
"    The default can be set on system startup by passing the \"+spp\" "
"argument\n"
"    to `--erl`.\n"
"\n"
"## Error reasons\n"
"\n"
"If invalid arguments are given, `ArgumentError` is raised by\n"
"`System.cmd/3`. `System.cmd/3` also expects a strict set of\n"
"options and will raise if unknown or invalid options are given.\n"
"\n"
"Furthermore, `System.cmd/3` may fail with one of the POSIX reasons\n"
"detailed below:\n"
"\n"
"  * `:system_limit` - all available ports in the Erlang emulator are in use\n"
"\n"
"  * `:enomem` - there was not enough memory to create the port\n"
"\n"
"  * `:eagain` - there are no more available operating system processes\n"
"\n"
"  * `:enametoolong` - the external command given was too long\n"
"\n"
"  * `:emfile` - there are no more available file descriptors\n"
"    (for the operating system process that the Erlang emulator runs in)\n"
"\n"
"  * `:enfile` - the file table is full (for the entire operating system)\n"
"\n"
"  * `:eacces` - the command does not point to an executable file\n"
"\n"
"  * `:enoent` - the command does not point to an existing file\n"
"\n"
"## Shell commands\n"
"\n"
"If you desire to execute a trusted command inside a shell, with pipes,\n"
"redirecting and so on, please check\n"
"[`:os.cmd/1`](http://www.erlang.org/doc/man/os.html#cmd-1).\n"
msgstr ""
"指定された`command`を引数`args`で実行します。\n"
"\n"
"`command`は、絶対パスが指定されないかぎり、PATHで利用可能な\n"
"実行可能ファイルであると期待されます。\n"
"\n"
"`args`は、実行可能ファイルが引数としてそのまま受け取るバイナリのリストで\n"
"なければなりません。これは次を意味します。\n"
"\n"
"  * 環境変数は補間されません\n"
"  * ワイルドカードの展開は行われません（`Path.wildcard/2`が明示的に\n"
"    使用されない限り）\n"
"  * 引数はシェル安全のためのエスケープやクォートをする必要はありません\n"
"\n"
"この関数は収集した結果とコマンドの終了ステータスを含む\n"
"タプルを返します。\n"
"\n"
"内部的には、この機能は外界と対話するために`Port`を使用します。\n"
"ただし、長期実行プログラムを実行する予定の場合、ポートは標準入出\n"
"デバイスが閉じられることを保証しますが、それが問題を自動的に終了する\n"
"わけではありません。`Port`モジュールのドキュメントでは、この問題と\n"
"「ゾンビプロセス」のセクションで考えられる解決方法について\n"
"説明しています。\n"
"\n"
"## 例\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], env: [{\"MIX_ENV\", \"test\"}]\n"
"    {\"hello\\n\", 0}\n"
"    \n"
"    iex> System.cmd \"echo\", [\"hello\"], into: IO.stream(:stdio, :line)\n"
"    hello\n"
"    {%IO.Stream{}, 0}\n"
"\n"
"## オプション\n"
"\n"
"  * `:into` - 指定されたたCollectableに結果を挿入します。デフォルトは`\"\"`で"
"す\n"
"  * `:cd` - コマンドを実行するディレクトリを指定します\n"
"  * `:env` - 環境変数キー・バリューをバイナリで含むタプルのEnumerableを指定し"
"ます\n"
"  * `:arg0` - コマンドのarg0を指定します\n"
"  * `:stderr_to_stdout` - `true`にすると、標準エラー出力を標準出力にリダイレ"
"クトします\n"
"  * `:parallelism` - `true`にすると、VMはポートタスクをスケジューリングし"
"て、\n"
"    システムの並列性を向上させます。`false`に設定すると、VMはコマンドを\n"
"    直ちに実行しようとし、並列性を犠牲にしてレイテンシを改善します。\n"
"    デフォルトはシステム起動時に\"+spp\"引数に`--el`を渡すことで\n"
"    設定できます。\n"
"\n"
"## エラー理由\n"
"\n"
"無効な引数が指定された場合、`System.cmd/3`は`ArgumentError`を\n"
"発生させます。`System.cmd/3`は、正しい組合せのオプションを期待して\n"
"おり、不明あるいは無効なオプションが指定されると例外を発生させます。\n"
"\n"
"さらに、`System.cmd/3`は、次のいずれかのPOSIXエラー理由で\n"
"失敗することがあります:\n"
"\n"
"  * `:system_limit` - Erlangエミュレータで使用可能なすべてポートが使用中で"
"す\n"
"\n"
"  * `:enomem` - ポートを作成するための十分なメモリがありません\n"
"\n"
"  * `:eagain` - 使用可能なオペレーティングシステムプロセスがもうありません\n"
"\n"
"  * `:enametoolong` - 指定された外部コマンドが長過ぎます\n"
"\n"
"  * `:emfile` - 使用可能なファイルディスクリプタがもうありません\n"
"    (Erlangエミュレータが実行されるオペレーティングシステムプロセス用)\n"
"\n"
"  * `:enfile` - フィルテーブルが一杯です(オペレーティングシステム全体で)\n"
"\n"
"  * `:eacces` - commandが実行可能ファイルを指していない\n"
"\n"
"  * `:enoent` - commandが既存のファイルを指していない\n"
"\n"
"## シェルコマンド\n"
"\n"
"シェルの中で信頼できるコマンドをパイプやリダイレクトなどと実行したい\n"
"場合は、[`:os.cmd/1`](http://www.erlang.org/doc/man/os.html#cmd-1)\n"
"をチェックしてください。\n"

#. TRANSLATORS: def System.os_time(unit)
#: lib/system.ex:740
msgid ""
"Returns the current OS time in the given time `unit`.\n"
"\n"
"This time may be adjusted forwards or backwards in time\n"
"with no limitation and is not monotonic.\n"
msgstr ""
"現在のOS時間を指定された時間単位`unit`で返します。\n"
"\n"
"この時間は時間の前方または後方に無制限に調整される場合があり、\n"
"単調増加ではありません。\n"

#. TRANSLATORS: def System.user_home()
#: lib/system.ex:240
msgid ""
"User home directory.\n"
"\n"
"Returns the user home directory (platform independent).\n"
msgstr ""
"ユーザホームディレクトリ。\n"
"\n"
"(プラットフォーム非依存の)ユーザホームディレクトリを返します。\n"

#. TRANSLATORS: def System.time_offset(unit)
#: lib/system.ex:711
msgid ""
"Returns the current time offset between the Erlang VM monotonic\n"
"time and the Erlang VM system time.\n"
"\n"
"The result is returned in the given time unit `unit`. The returned\n"
"offset, added to an Erlang monotonic time (e.g., obtained with\n"
"`monotonic_time/1`), gives the Erlang system time that corresponds\n"
"to that monotonic time.\n"
msgstr ""
"Erlang VM単調増加時間とErlang VMシステム時間の間の\n"
"現在の時間オフセットを返します。\n"
"\n"
"結果は指定された`unit`時間単位で返されます。返されたオフセット\n"
"をErlang単調増加時間 (`monotonic_time/1`で得られる時間)に\n"
"加えると、単調増加時間に対応するErlangシステム時間が得られます。\n"

#. TRANSLATORS: def System.system_time()
#: lib/system.ex:652
msgid ""
"Returns the current system time in the `:native` time unit.\n"
"\n"
"It is the VM view of the `os_time/0`. They may not match in\n"
"case of time warps although the VM works towards aligning\n"
"them. This time is not monotonic.\n"
"\n"
"Inlined by the compiler into `:erlang.system_time/0`.\n"
msgstr ""
"現在のシステム時間を`:native`時間単位で返します。\n"
"\n"
"これはVMから見た`os_time/0`です。VMは両者を整合させようと\n"
"しますが、タイムワープがあると両者は一致しない場合があります。\n"
"この時間は単調増加ではありません。\n"
"\n"
"コンパイラにより `:erlang.system_time/0` にインライン化されます。\n"
