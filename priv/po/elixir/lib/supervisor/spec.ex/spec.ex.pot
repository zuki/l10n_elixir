#. TRANSLATORS: @type spec
#: lib/supervisor/spec.ex:119 
msgid ""
"The supervisor specification"
msgstr ""
#. TRANSLATORS: @type strategy
#: lib/supervisor/spec.ex:101 
msgid ""
"Supported strategies"
msgstr ""
#. TRANSLATORS: def Supervisor.Spec.supervise(children, options)
#: lib/supervisor/spec.ex:127 
msgid ""
"Receives a list of children (workers or supervisors) to\n"
"supervise and a set of options.\n"
"\n"
"Returns a tuple containing the supervisor specification. This tuple can be\n"
"used as the return value of the `c:init/1` callback when implementing a\n"
"module-based supervisor.\n"
"\n"
"## Examples\n"
"\n"
"    supervise(children, strategy: :one_for_one)\n"
"\n"
"## Options\n"
"\n"
"  * `:strategy` - the restart strategy option. It can be either\n"
"    `:one_for_one`, `:rest_for_one`, `:one_for_all`, or\n"
"    `:simple_one_for_one`. You can learn more about strategies\n"
"    in the `Supervisor` module docs.\n"
"\n"
"  * `:max_restarts` - the maximum amount of restarts allowed in\n"
"    a time frame. Defaults to `3`.\n"
"\n"
"  * `:max_seconds` - the time frame in which `:max_restarts` applies.\n"
"    Defaults to `5`.\n"
"\n"
"The `:strategy` option is required and by default a maximum of 3 restarts is\n"
"allowed within 5 seconds. Check the `Supervisor` module for a detailed\n"
"description of the available strategies.\n"
msgstr ""
#. TRANSLATORS: Elixir.Supervisor.Spec Summary
#: lib/supervisor/spec.ex:2 
msgid ""
"Convenience functions for defining supervisor specifications.\n"
"\n"
"## Example\n"
"\n"
"By using the functions in this module one can specify the children\n"
"to be used under a supervisor, started with `Supervisor.start_link/2`:\n"
"\n"
"    import Supervisor.Spec\n"
"\n"
"    children = [\n"
"      worker(MyWorker, [arg1, arg2, arg3]),\n"
"      supervisor(MySupervisor, [arg1])\n"
"    ]\n"
"\n"
"    Supervisor.start_link(children, strategy: :one_for_one)\n"
"\n"
"Sometimes, it may be handy to define supervisors backed\n"
"by a module:\n"
"\n"
"    defmodule MySupervisor do\n"
"      use Supervisor\n"
"\n"
"      def start_link(arg) do\n"
"        Supervisor.start_link(__MODULE__, arg)\n"
"      end\n"
"\n"
"      def init(arg) do\n"
"        children = [\n"
"          worker(MyWorker, [arg], restart: :temporary)\n"
"        ]\n"
"\n"
"        supervise(children, strategy: :simple_one_for_one)\n"
"      end\n"
"    end\n"
"\n"
"Notice in this case we don't have to explicitly import\n"
"`Supervisor.Spec` as `use Supervisor` automatically does so.\n"
"Defining a module-based supervisor can be useful, for example,\n"
"to perform initialization tasks in the `c:init/1` callback.\n"
"\n"
"## Supervisor and worker options\n"
"\n"
"In the example above, we defined specs for workers and supervisors.\n"
"These specs (both for workers as well as supervisors) accept the\n"
"following options:\n"
"\n"
"  * `:id` - a name used to identify the child specification\n"
"    internally by the supervisor; defaults to the given module\n"
"    name for the child worker/supervisor\n"
"\n"
"  * `:function` - the function to invoke on the child to start it\n"
"\n"
"  * `:restart` - an atom that defines when a terminated child process should\n"
"    be restarted (see the \"Restart values\" section below)\n"
"\n"
"  * `:shutdown` - an atom that defines how a child process should be\n"
"    terminated (see the \"Shutdown values\" section below)\n"
"\n"
"  * `:modules` - it should be a list with one element `[module]`,\n"
"    where module is the name of the callback module only if the\n"
"    child process is a `Supervisor` or `GenServer`; if the child\n"
"    process is a `GenEvent`, `:modules` should be `:dynamic`\n"
"\n"
"### Restart values (:restart)\n"
"\n"
"The following restart values are supported in the `:restart` option:\n"
"\n"
"  * `:permanent` - the child process is always restarted\n"
"\n"
"  * `:temporary` - the child process is never restarted (not even\n"
"    when the supervisor's strategy is `:rest_for_one` or `:one_for_all`)\n"
"\n"
"  * `:transient` - the child process is restarted only if it\n"
"    terminates abnormally, i.e., with an exit reason other than\n"
"    `:normal`, `:shutdown` or `{:shutdown, term}`\n"
"\n"
"### Shutdown values (:shutdown)\n"
"\n"
"The following shutdown values are supported in the `:shutdown` option:\n"
"\n"
"  * `:brutal_kill` - the child process is unconditionally terminated\n"
"    using `Process.exit(child, :kill)`\n"
"\n"
"  * `:infinity` - if the child process is a supervisor, this is a mechanism\n"
"    to give the subtree enough time to shutdown; it can also be used with\n"
"    workers with care\n"
"\n"
"  * any integer - the value of `:shutdown` can also be any integer meaning\n"
"    that the supervisor tells the child process to terminate by calling\n"
"    `Process.exit(child, :shutdown)` and then waits for an exit signal back.\n"
"    If no exit signal is received within the specified time (the value of this\n"
"    option, in milliseconds), the child process is unconditionally terminated\n"
"    using `Process.exit(child, :kill)`\n"
"\n"
msgstr ""
#. TRANSLATORS: def Supervisor.Spec.supervisor(module, args, options \\ [])
#: lib/supervisor/spec.ex:211 
msgid ""
"Defines the given `module` as a supervisor which will be started\n"
"with the given arguments.\n"
"\n"
"    supervisor(ExUnit.Runner, [], restart: :permanent)\n"
"\n"
"By default, the function `start_link` is invoked on the given\n"
"module. Overall, the default values for the options are:\n"
"\n"
"    [id: module,\n"
"     function: :start_link,\n"
"     restart: :permanent,\n"
"     shutdown: :infinity,\n"
"     modules: [module]]\n"
"\n"
"Check the documentation for the `Supervisor.Spec` module for more\n"
"information on the options.\n"
msgstr ""
#. TRANSLATORS: def Supervisor.Spec.worker(module, args, options \\ [])
#: lib/supervisor/spec.ex:187 
msgid ""
"Defines the given `module` as a worker which will be started\n"
"with the given arguments.\n"
"\n"
"    worker(ExUnit.Runner, [], restart: :permanent)\n"
"\n"
"By default, the function `start_link` is invoked on the given\n"
"module. Overall, the default values for the options are:\n"
"\n"
"    [id: module,\n"
"     function: :start_link,\n"
"     restart: :permanent,\n"
"     shutdown: 5000,\n"
"     modules: [module]]\n"
"\n"
"Check the documentation for the `Supervisor.Spec` module for more\n"
"information on the options.\n"
msgstr ""
#. TRANSLATORS: @type restart
#: lib/supervisor/spec.ex:104 
msgid ""
"Supported restart values"
msgstr ""
#. TRANSLATORS: @type modules
#: lib/supervisor/spec.ex:113 
msgid ""
"Supported module values"
msgstr ""
#. TRANSLATORS: @type shutdown
#: lib/supervisor/spec.ex:107 
msgid ""
"Supported shutdown values"
msgstr ""
#. TRANSLATORS: @type child_id
#: lib/supervisor/spec.ex:116 
msgid ""
"Supported id values"
msgstr ""
#. TRANSLATORS: @type worker
#: lib/supervisor/spec.ex:110 
msgid ""
"Supported worker values"
msgstr ""
