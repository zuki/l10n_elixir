msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-22 18:26+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: Elixir.Range Summary
#: lib/range.ex:2
msgid ""
"Defines a range.\n"
"\n"
"A range represents a discrete number of values where\n"
"the first and last values are integers.\n"
"\n"
"Ranges can be either increasing (first <= last) or\n"
"decreasing (first > last). Ranges are also always\n"
"inclusive.\n"
"\n"
"A Range is represented internally as a struct. However,\n"
"the most common form of creating and matching on ranges\n"
"is via the `../2` macro, auto-imported from `Kernel`:\n"
"\n"
"    iex> range = 1..3\n"
"    1..3\n"
"    iex> first..last = range\n"
"    iex> first\n"
"    1\n"
"    iex> last\n"
"    3\n"
"\n"
"A Range implements the Enumerable protocol, which means\n"
"all of the functions in the Enum module is available:\n"
"\n"
"    iex> range = 1..10\n"
"    1..10\n"
"    iex> Enum.reduce(range, 0, fn i, acc -> i * i + acc end)\n"
"    385\n"
"    iex> Enum.count(range)\n"
"    10\n"
"    iex> Enum.member?(range, 11)\n"
"    false\n"
"    iex> Enum.member?(range, 8)\n"
"    true\n"
"\n"
msgstr ""
"範囲（Range）を定義します。\n"
"\n"
"範囲は最初と最後の値が整数の離散値を表します。\n"
"\n"
"範囲は昇順（first <= last）、降順（first > last）いずれも可能です。\n"
"範囲の境界は常に含まれます。\n"
"\n"
"範囲は内部では構造体として表現されます。しかし、範囲の作成と\n"
"マッチングに使用するもっとも一般的な形式は`Kernel`により自動\n"
"インポートされる`../2`マクロによるものです。\n"
"\n"
"    iex> range = 1..3\n"
"    1..3\n"
"    iex> first..last = range\n"
"    iex> first\n"
"    1\n"
"    iex> last\n"
"    3\n"
"\n"
"範囲はEnumerableプロトコルを実装しています。これは\n"
"Enumモジュールの関数がすべて使えるということを意味します。\n"
"\n"
"    iex> range = 1..10\n"
"    1..10\n"
"    iex> Enum.reduce(range, 0, fn i, acc -> i * i + acc end)\n"
"    385\n"
"    iex> Enum.count(range)\n"
"    10\n"
"    iex> Enum.member?(range, 11)\n"
"    false\n"
"    iex> Enum.member?(range, 8)\n"
"    true\n"
"\n"

#. TRANSLATORS: def Range.new(first, last)
#: lib/range.ex:46
msgid "Creates a new range.\n"
msgstr "新しい範囲を作成します。\n"

#. TRANSLATORS: def Range.range?(term)
#: lib/range.ex:60
msgid ""
"Returns `true` if the given `term` is a valid range.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Range.range?(1..3)\n"
"    true\n"
"\n"
"    iex> Range.range?(0)\n"
"    false\n"
"\n"
msgstr ""
"指定した`term`が正しい範囲の場合、`true`を返します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Range.range?(1..3)\n"
"    true\n"
"\n"
"    iex> Range.range?(0)\n"
"    false\n"
"\n"

#~ msgid "Counts how many items are in the range.\n"
#~ msgstr "範囲(range)のアイテムの数を数えます。\n"

#~ msgid "Returns the function that calculates the next item.\n"
#~ msgstr "次のアイテムを計算する関数を返します。\n"

#~ msgid "A protocol used for iterating range elements.\n"
#~ msgstr "範囲(range)の要素の繰返しのために使われるプロトコルです。\n"
