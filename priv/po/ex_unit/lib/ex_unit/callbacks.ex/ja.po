msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-01-23 11:04+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def ExUnit.Callbacks.on_exit(name_or_ref \\ make_ref(), callback)
#: lib/ex_unit/callbacks.ex:198
msgid ""
"Defines a callback that runs on the test (or test case) exit.\n"
"\n"
"`callback` is a function that receives no arguments and\n"
"runs in a separate process than the caller.\n"
"\n"
"`on_exit/2` is usually called from `setup` and `setup_all` callbacks,\n"
"often to undo the action performed during `setup`. However, `on_exit/2`\n"
"may also be called dynamically, where a reference can be used to\n"
"guarantee the callback will be invoked only once.\n"
msgstr ""
"テスト(またはテストケース)のexit時に実行すべき\n"
"コールバックを定義します。\n"
"\n"
"`callback` は引数なしの関数で、呼び出し側とは別の\n"
"プロセスで実行されます。\n"
"\n"
"`on_exit/2`は通常、`setup`や`setup_all`コールバックから呼び出され、`setup`"
"の\n"
"間に実行されたアクションを取り消す目的で使用されますれます。しかしなが"
"ら、\n"
"`on_exit`が動的に呼び出される場合もあります。その場合、リファレンスはコー"
"ル\n"
"バックが一度だけ起動されることを保証するために使われます。\n"

#. TRANSLATORS: defmacro ExUnit.Callbacks.setup(var, block)
#: lib/ex_unit/callbacks.ex:132
msgid ""
"Defines a callback to be run before each test in a case.\n"
"\n"
"## Examples\n"
"\n"
"    setup context do\n"
"      [conn: Plug.Conn.build_conn()]\n"
"    end\n"
"\n"
msgstr ""
"ケース内の各々をテストする前に実行すべきコールバックを定義します。\n"
"\n"
"## 例\n"
"\n"
"    setup context do\n"
"      [conn: Plug.Conn.build_conn()]\n"
"    end\n"
"\n"

#. TRANSLATORS: defmacro ExUnit.Callbacks.setup_all(block)
#: lib/ex_unit/callbacks.ex:154
msgid ""
"Defines a callback to be run before all tests in a case.\n"
"\n"
"## Examples\n"
"\n"
"    setup_all :clean_up_tmp_directory\n"
"\n"
msgstr ""
"ケースの全てのテストの前に実行すべきコールバックを定義します。\n"
"\n"
"## 例\n"
"\n"
"    setup_all :clean_up_tmp_directory\n"
"\n"

#. TRANSLATORS: Elixir.ExUnit.Callbacks Summary
#: lib/ex_unit/callbacks.ex:2
msgid ""
"Defines ExUnit callbacks.\n"
"\n"
"This module defines both `setup_all` and `setup` callbacks, as well as\n"
"the `on_exit/2` facility.\n"
"\n"
"The setup callbacks are defined via macros and each one can optionally\n"
"receive a map with metadata, usually referred to as `context`. The\n"
"callback may optionally put extra data into `context` to be used in\n"
"the tests.\n"
"\n"
"The `setup_all` callbacks are invoked once to setup the test case before "
"any\n"
"test is run and all `setup` callbacks are run before each test. No callback\n"
"runs if the test case has no tests or all tests have been filtered out.\n"
"\n"
"`on_exit/2` callbacks are registered on demand, usually to undo an action\n"
"performed by a setup callback. `on_exit/2` may also take a reference,\n"
"allowing callback to be overridden in the future. A registered `on_exit/2`\n"
"callback always runs, while failures in `setup` and `setup_all` will stop\n"
"all remaining setup callbacks from executing.\n"
"\n"
"Finally, `setup_all` callbacks run in the test case process, while all\n"
"`setup` callbacks run in the same process as the test itself. `on_exit/2`\n"
"callbacks always run in a separate process than the test case or the\n"
"test itself. Since the test process exits with reason `:shutdown`, most\n"
"of times `on_exit/2` can be avoided as processes are going to clean\n"
"up on their own.\n"
"\n"
"## Context\n"
"\n"
"If you return `{:ok, keywords}` from `setup_all`, the keyword\n"
"will be merged into the current context and be available in all\n"
"subsequent `setup_all`, `setup` and the test itself.\n"
"\n"
"Similarly, returning `{:ok, keywords}` from `setup`, the keyword\n"
"returned will be merged into the current context and be available\n"
"in all subsequent `setup` and the `test` itself.\n"
"\n"
"Returning `:ok` leaves the context unchanged in both cases.\n"
"\n"
"Returning anything else from `setup_all` will force all tests to fail,\n"
"while a bad response from `setup` causes the current test to fail.\n"
"\n"
"## Examples\n"
"\n"
"    defmodule AssertionTest do\n"
"      use ExUnit.Case, async: true\n"
"\n"
"      # \"setup_all\" is called once to setup the case before any test is "
"run\n"
"      setup_all do\n"
"        IO.puts \"Starting AssertionTest\"\n"
"\n"
"        # No metadata\n"
"        :ok\n"
"      end\n"
"\n"
"      # \"setup\" is called before each test is run\n"
"      setup do\n"
"        IO.puts \"This is a setup callback\"\n"
"\n"
"        on_exit fn ->\n"
"          IO.puts \"This is invoked once the test is done\"\n"
"        end\n"
"\n"
"        # Returns extra metadata to be merged into context\n"
"        [hello: \"world\"]\n"
"      end\n"
"\n"
"      # Same as \"setup\", but receives the context\n"
"      # for the current test\n"
"      setup context do\n"
"        IO.puts \"Setting up: #{context[:test]}\"\n"
"        :ok\n"
"      end\n"
"\n"
"      # Setups can also invoke a local or imported function\n"
"      setup :invoke_local_or_imported_function\n"
"\n"
"      test \"always pass\" do\n"
"        assert true\n"
"      end\n"
"\n"
"      test \"another one\", context do\n"
"        assert context[:hello] == \"world\"\n"
"      end\n"
"\n"
"      defp invoke_local_or_imported_function(context) do\n"
"        [from_named_setup: true]\n"
"      end\n"
"    end\n"
"\n"
msgstr ""
"ExUnitコールバックを定義します。\n"
"\n"
"このモジュールは、`setup_all`と`setup`の２つのコールバックと\n"
"`on_exit/2`ツールを定義します。\n"
"\n"
"setupコールバックはマクロとして定義され、通常`context`として参照される\n"
"メタデータのマップをオプションとして受け取ることができます。\n"
"コールバックは、オプションで、テストで使われるべき追加のデータを\n"
"`context`に指定することもできます。\n"
"\n"
"`setup_all`コールバックはすべてのテストが実行される前にテストケースを設定"
"するために一度だけ\n"
"起動され、すべての`setup`コールバックは各テストの前に実行されます。テスト"
"ケースにテストが\n"
"存在しない、またはすべてのテストがフィルターで除外された場合はコールバック"
"は実行されません。\n"
"\n"
"`on_exit/2`コールバックは通常、setupコールバックにより実行されたアクション"
"を\n"
"元にもどすために、オンデマンドで登録されます。`on_exit/2`は、将来コール"
"バックを\n"
"上書きできるようにリファレンスを引数に取ることもできます。登録された"
"`on_exit/2`コールバックは\n"
"`setup`や`setup_all`の失敗が残りのすべてのsetupコールバックの実行を停止し"
"ても\n"
"常に実行されます。\n"
"\n"
"最後に、`setup_all`コールバックはテストケースプロセスの中で実行されます"
"が、\n"
"すべての`setup`コールバックはテストそれ自身と同じプロセスで実行されま"
"す。\n"
"`on_exit/2`コールバックは常にテーストケースまたはテスト自身とは別のプロセ"
"スで\n"
"実行されれます。テストプロセスはreason `:shutdown`で終了するので、\n"
"プロセスが自身をクリーンアプをする際に、`on_exit/2`はほとんどの場合、\n"
"避けることができます。\n"
"\n"
"## コンテキスト\n"
"\n"
"`setup_all`が`{:ok, keywords}`を返した場合、そのキーワードは\n"
"現在のコンテキストにマージされ、以降のすべての\n"
"`setup_all`、`setup`、およびtest自身で利用可能になります。\n"
"\n"
"同様に、`setup`が`{:ok, keywords}`を返した場合も、その\n"
"返されたキーワードは現在のコンテキストにマージされ、以降の全ての\n"
"`setup`や`test`自身で利用可能になります。\n"
"\n"
"`:ok`を返すと両方のケースでコンテキストは変更されません。\n"
"\n"
"`setup_all`がそれ以外を返した場合はすべてのテストを強制的に失敗にします"
"が、\n"
"`setup`がそれ以外を返した場合は、現在のテストを失敗にします。\n"
"\n"
"## 例\n"
"\n"
"    defmodule AssertionTest do\n"
"      use ExUnit.Case, async: true\n"
"\n"
"      # \"setup_all\" はすべてのテストが実行される前にケースをセットアップ"
"するために一度だけ呼ばれる\n"
"      setup_all do\n"
"        IO.puts \"Starting AssertionTest\"\n"
"\n"
"        # メタデータなし\n"
"        :ok\n"
"      end\n"
"\n"
"      # \"setup\" は各テストが実行される前に呼ばれる\n"
"      setup do\n"
"        IO.puts \"This is a setup callback\"\n"
"\n"
"        on_exit fn ->\n"
"          IO.puts \"This is invoked once the test is done\"\n"
"        end\n"
"\n"
"        # コンテキストにマージされるべき追加のメタデータを返す\n"
"        [hello: \"world\"]\n"
"      end\n"
"\n"
"      # \"setup”と同じだが、現在のテスト用に\n"
"      # コンテキストを受け取る\n"
"      setup context do\n"
"        IO.puts \"Setting up: #{context[:test]}\"\n"
"        :ok\n"
"      end\n"
"\n"
"      # Setupはローカル関数またはインポートした関数も呼び出すことができ"
"る\n"
"      setup :invoke_local_or_imported_function\n"
"\n"
"      test \"always pass\" do\n"
"        assert true\n"
"      end\n"
"\n"
"      test \"another one\", context do\n"
"        assert context[:hello] == \"world\"\n"
"      end\n"
"\n"
"      defp invoke_local_or_imported_function(context) do\n"
"        [from_named_setup: true]\n"
"      end\n"
"    end\n"
"\n"

#. TRANSLATORS: defmacro ExUnit.Callbacks.setup(block)
#: lib/ex_unit/callbacks.ex:113
msgid ""
"Defines a callback to be run before each test in a case.\n"
"\n"
"## Examples\n"
"\n"
"    setup :clean_up_tmp_directory\n"
"\n"
msgstr ""
"ケースの各テストの前に実行すべきコールバックを定義します。\n"
"\n"
"## 例\n"
"\n"
"    setup :clean_up_tmp_directory\n"
"\n"

#. TRANSLATORS: defmacro ExUnit.Callbacks.setup_all(var, block)
#: lib/ex_unit/callbacks.ex:175
msgid ""
"Defines a callback to be run before all tests in a case.\n"
"\n"
"## Examples\n"
"\n"
"    setup_all context do\n"
"      [conn: Plug.Conn.build_conn()]\n"
"    end\n"
"\n"
msgstr ""
"ケース内のすべてのテストの前に実行すべきコールバックを定義します。\n"
"\n"
"## 例\n"
"\n"
"    setup_all context do\n"
"      [conn: Plug.Conn.build_conn()]\n"
"    end\n"
"\n"
