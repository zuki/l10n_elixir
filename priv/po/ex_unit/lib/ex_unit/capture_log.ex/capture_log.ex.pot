#. TRANSLATORS: Elixir.ExUnit.CaptureLog Summary
#: lib/ex_unit/capture_log.ex:2 
msgid ""
"Functionality to capture logs for testing.\n"
"\n"
"## Examples\n"
"\n"
"    defmodule AssertionTest do\n"
"      use ExUnit.Case\n"
"\n"
"      import ExUnit.CaptureLog\n"
"\n"
"      test \"example\" do\n"
"        assert capture_log(fn ->\n"
"          Logger.error \"log msg\"\n"
"        end) =~ \"log msg\"\n"
"      end\n"
"\n"
"      test \"check multiple captures concurrently\" do\n"
"        fun = fn ->\n"
"          for msg <- [\"hello\", \"hi\"] do\n"
"            assert capture_log(fn -> Logger.error msg end) =~ msg\n"
"          end\n"
"          Logger.debug \"testing\"\n"
"        end\n"
"        assert capture_log(fun) =~ \"hello\"\n"
"        assert capture_log(fun) =~ \"testing\"\n"
"      end\n"
"    end\n"
"\n"
msgstr ""
#. TRANSLATORS: def ExUnit.CaptureLog.capture_log(opts \\ [], fun)
#: lib/ex_unit/capture_log.ex:34 
msgid ""
"Captures Logger messages generated when evaluating `fun`.\n"
"\n"
"Returns the binary which is the captured output.\n"
"\n"
"This function mutes the `:console` backend and captures any log\n"
"messages sent to Logger from the calling processes. It is possible\n"
"to ensure explicit log messages from other processes are captured\n"
"by waiting for their exit or monitor signal.\n"
"\n"
"However, `capture_log` does not guarantee to capture log messages\n"
"originated from processes spawned using a low level `Kernel` spawn\n"
"function (e.g. `Kernel.spawn/1`) and such processes exit with an\n"
"exception or a throw. Therefore, prefer using a `Task`, or other OTP\n"
"process, will send explicit logs before its exit or monitor signals\n"
"and will not cause VM generated log messages.\n"
"\n"
"Note that when the `async` is set to `true`, the messages from another\n"
"test might be captured. This is OK as long you consider such cases in\n"
"your assertions.\n"
"\n"
"It is possible to configure the level to capture with `:level`,\n"
"which will set the capturing level for the duration of the\n"
"capture, for instance, if the log level is set to :error\n"
"any message with the lower level will be ignored.\n"
"The default level is `nil`, which will capture all messages.\n"
"The behaviour is undetermined if async tests change Logger level.\n"
"\n"
"The format, metadata and colors can be configured with `:format`,\n"
"`:metadata` and `:colors` respectively. These three options\n"
"defaults to the `:console` backend configuration parameters.\n"
msgstr ""
