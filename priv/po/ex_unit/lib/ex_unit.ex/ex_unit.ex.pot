#. TRANSLATORS: def ExUnit.configuration()
#: lib/ex_unit.ex:225 
msgid ""
"Returns ExUnit configuration.\n"
msgstr ""
#. TRANSLATORS: def ExUnit.plural_rule(word, pluralization)
#: lib/ex_unit.ex:243 
msgid ""
"Registers a `pluralization` for `word`.\n"
"\n"
"If one is already registered, it is replaced.\n"
msgstr ""
#. TRANSLATORS: @type state
#: lib/ex_unit.ex:60 
msgid ""
"The error state returned by ExUnit.Test and ExUnit.TestCase"
msgstr ""
#. TRANSLATORS: def ExUnit.configure(options)
#: lib/ex_unit.ex:169 
msgid ""
"Configures ExUnit.\n"
"\n"
"## Options\n"
"\n"
"ExUnit supports the following options:\n"
"\n"
"  * `:assert_receive_timeout` - the timeout to be used on `assert_receive`\n"
"    calls. Defaults to 100ms.\n"
"\n"
"  * `:capture_log` - if ExUnit should default to keeping track of log messages\n"
"    and print them on test failure. Can be overridden for individual tests via\n"
"    `@tag capture_log: false`. Defaults to `false`.\n"
"\n"
"  * `:case_load_timeout` - the timeout to be used when loading a test case.\n"
"    Defaults to `60_000` milliseconds.\n"
"\n"
"  * `:colors` - a keyword list of colors to be used by some formatters.\n"
"    The only option so far is `[enabled: boolean]` which defaults to `IO.ANSI.enabled?/0`\n"
"\n"
"  * `:formatters` - the formatters that will print results;\n"
"    defaults to `[ExUnit.CLIFormatter]`\n"
"\n"
"  * `:max_cases` - maximum number of cases to run in parallel;\n"
"    defaults to `:erlang.system_info(:schedulers_online) * 2` to\n"
"    optimize both CPU-bound and IO-bound tests\n"
"\n"
"  * `:trace` - sets ExUnit into trace mode, this sets `:max_cases` to `1` and\n"
"    prints each test case and test while running\n"
"\n"
"  * `:autorun` - if ExUnit should run by default on exit; defaults to `true`\n"
"\n"
"  * `:include` - specifies which tests are run by skipping tests that do not\n"
"    match the filter. Keep in mind that all tests are included by default, so unless they are\n"
"    excluded first, the `:include` option has no effect.\n"
"\n"
"  * `:exclude` - specifies which tests are run by skipping tests that match the\n"
"    filter\n"
"\n"
"  * `:refute_receive_timeout` - the timeout to be used on `refute_receive`\n"
"    calls (defaults to 100ms)\n"
"\n"
"  * `:seed` - an integer seed value to randomize the test suite\n"
"\n"
"  * `:stacktrace_depth` - configures the stacktrace depth to be used\n"
"    on formatting and reporters (defaults to 20)\n"
"\n"
"  * `:timeout` - sets the timeout for the tests (default 60_000ms)\n"
"\n"
msgstr ""
#. TRANSLATORS: def ExUnit.plural_rule(word)
#: lib/ex_unit.ex:232 
msgid ""
"Returns the pluralization for `word`.\n"
"\n"
"If one is not registered, returns the word appended with an \"s\".\n"
msgstr ""
#. TRANSLATORS: Elixir.ExUnit Summary
#: lib/ex_unit.ex:2 
msgid ""
"Unit testing framework for Elixir.\n"
"\n"
"## Example\n"
"\n"
"A basic setup for ExUnit is shown below:\n"
"\n"
"    # File: assertion_test.exs\n"
"\n"
"    # 1) Start ExUnit.\n"
"    ExUnit.start\n"
"\n"
"    # 2) Create a new test module (test case) and use \"ExUnit.Case\".\n"
"    defmodule AssertionTest do\n"
"      # 3) Notice we pass \"async: true\", this runs the test case\n"
"      #    concurrently with other test cases. The individual tests\n"
"      #    within each test case are still run serially.\n"
"      use ExUnit.Case, async: true\n"
"\n"
"      # 4) Use the \"test\" macro instead of \"def\" for clarity.\n"
"      test \"the truth\" do\n"
"        assert true\n"
"      end\n"
"    end\n"
"\n"
"To run the tests above, run the file using `elixir` from the\n"
"command line. Assuming you named the file `assertion_test.exs`,\n"
"you can run it as:\n"
"\n"
"    elixir assertion_test.exs\n"
"\n"
"## Case, Callbacks and Assertions\n"
"\n"
"See `ExUnit.Case` and `ExUnit.Callbacks` for more information\n"
"about defining test cases and setting up callbacks.\n"
"\n"
"The `ExUnit.Assertions` module contains a set of macros to\n"
"generate assertions with appropriate error messages.\n"
"\n"
"## Integration with Mix\n"
"\n"
"Mix is the project management and build tool for Elixir. Invoking `mix test`\n"
"from the command line will run the tests in each file matching the pattern\n"
"`*_test.exs` found in the `test` directory of your project.\n"
"\n"
"You must create a `test_helper.exs` file inside the\n"
"`test` directory and put the code common to all tests there.\n"
"\n"
"The minimum example of a `test_helper.exs` file would be:\n"
"\n"
"    # test/test_helper.exs\n"
"    ExUnit.start\n"
"\n"
"Mix will load the `test_helper.exs` file before executing the tests.\n"
"It is not necessary to `require` the `test_helper.exs` file in your test\n"
"files. See `Mix.Tasks.Test` for more information.\n"
msgstr ""
#. TRANSLATORS: def ExUnit.run()
#: lib/ex_unit.ex:256 
msgid ""
"API used to run the tests. It is invoked automatically\n"
"if ExUnit is started via `ExUnit.start/1`.\n"
"\n"
"Returns a map containing the total number of tests, the number\n"
"of failures and the number of skipped tests.\n"
msgstr ""
#. TRANSLATORS: def ExUnit.start(options \\ [])
#: lib/ex_unit.ex:141 
msgid ""
"Starts ExUnit and automatically runs tests right before the\n"
"VM terminates. It accepts a set of options to configure `ExUnit`\n"
"(the same ones accepted by `configure/1`).\n"
"\n"
"If you want to run tests manually, you can set `:autorun` to `false`.\n"
msgstr ""
#. TRANSLATORS: Elixir.ExUnit.Test Summary
#: lib/ex_unit.ex:65 
msgid ""
"A struct that keeps information about the test.\n"
"\n"
"It is received by formatters and contains the following fields:\n"
"\n"
"  * `:name`  - the test name\n"
"  * `:case`  - the test case\n"
"  * `:state` - the test error state (see ExUnit.state)\n"
"  * `:time`  - the time to run the test\n"
"  * `:tags`  - the test tags\n"
"  * `:logs`  - the captured logs\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.ExUnit.TestCase Summary
#: lib/ex_unit.ex:89 
msgid ""
"A struct that keeps information about the test case.\n"
"\n"
"It is received by formatters and contains the following fields:\n"
"\n"
"  * `:name`  - the test case name\n"
"  * `:state` - the test error state (see ExUnit.state)\n"
"  * `:tests` - all tests for this case\n"
"\n"
msgstr ""
