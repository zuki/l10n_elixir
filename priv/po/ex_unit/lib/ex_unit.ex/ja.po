msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-01-23 11:04+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def ExUnit.configuration()
#: lib/ex_unit.ex:225
msgid "Returns ExUnit configuration.\n"
msgstr "ExUnitコンフィグレーションを返します。\n"

#. TRANSLATORS: def ExUnit.plural_rule(word, pluralization)
#: lib/ex_unit.ex:243
msgid ""
"Registers a `pluralization` for `word`.\n"
"\n"
"If one is already registered, it is replaced.\n"
msgstr ""
"`word`の複数形を登録します。\n"
"\n"
"すでに登録されていた場合は、置き換えます。\n"

#. TRANSLATORS: @type state
#: lib/ex_unit.ex:60
msgid "The error state returned by ExUnit.Test and ExUnit.TestCase"
msgstr "ExUnit.TestとExUnit.TestCaseにより返されるエラーステートです"

#. TRANSLATORS: def ExUnit.configure(options)
#: lib/ex_unit.ex:169
msgid ""
"Configures ExUnit.\n"
"\n"
"## Options\n"
"\n"
"ExUnit supports the following options:\n"
"\n"
"  * `:assert_receive_timeout` - the timeout to be used on `assert_receive`\n"
"    calls. Defaults to 100ms.\n"
"\n"
"  * `:capture_log` - if ExUnit should default to keeping track of log "
"messages\n"
"    and print them on test failure. Can be overridden for individual tests "
"via\n"
"    `@tag capture_log: false`. Defaults to `false`.\n"
"\n"
"  * `:case_load_timeout` - the timeout to be used when loading a test case.\n"
"    Defaults to `60_000` milliseconds.\n"
"\n"
"  * `:colors` - a keyword list of colors to be used by some formatters.\n"
"    The only option so far is `[enabled: boolean]` which defaults to `IO."
"ANSI.enabled?/0`\n"
"\n"
"  * `:formatters` - the formatters that will print results;\n"
"    defaults to `[ExUnit.CLIFormatter]`\n"
"\n"
"  * `:max_cases` - maximum number of cases to run in parallel;\n"
"    defaults to `:erlang.system_info(:schedulers_online) * 2` to\n"
"    optimize both CPU-bound and IO-bound tests\n"
"\n"
"  * `:trace` - sets ExUnit into trace mode, this sets `:max_cases` to `1` "
"and\n"
"    prints each test case and test while running\n"
"\n"
"  * `:autorun` - if ExUnit should run by default on exit; defaults to "
"`true`\n"
"\n"
"  * `:include` - specifies which tests are run by skipping tests that do "
"not\n"
"    match the filter. Keep in mind that all tests are included by default, "
"so unless they are\n"
"    excluded first, the `:include` option has no effect.\n"
"\n"
"  * `:exclude` - specifies which tests are run by skipping tests that match "
"the\n"
"    filter\n"
"\n"
"  * `:refute_receive_timeout` - the timeout to be used on `refute_receive`\n"
"    calls (defaults to 100ms)\n"
"\n"
"  * `:seed` - an integer seed value to randomize the test suite\n"
"\n"
"  * `:stacktrace_depth` - configures the stacktrace depth to be used\n"
"    on formatting and reporters (defaults to 20)\n"
"\n"
"  * `:timeout` - sets the timeout for the tests (default 60_000ms)\n"
"\n"
msgstr ""
"ExUnitを構成します。\n"
"\n"
"## オプション\n"
"\n"
"ExUnitは以下のオプションをサポートします:\n"
"\n"
"  * `:assert_receive_timeout` - `assert_receive`で使われるタイムアウトで"
"す。\n"
"    デフォルトは100msです\n"
"\n"
"  * `:capture_log` - デフォルトでログメッセージを記録し、ExUnitがテストを失敗"
"した際に\n"
"    それを出力するか否か。テスト毎に`@tag capture_log: false`で\n"
"    上書きできます。デフォルトは`false`です。\n"
"\n"
"  * `:colors` - いくつかのフォーマッタで使われる色のキーワード\n"
"    リストです。今のところ唯一のオプションは、デフォルトで\n"
"    `IO.ANSI.enabled?/0`になる、`[enabled: boolean]`です。\n"
"\n"
"  * `:formatters` - 結果を出力するフォーマッタです。デフォルトは\n"
"    `[ExUnit.CLIFormatter]`です\n"
"\n"
"  * `:max_cases` - 並行して走らせるテストケースの最大数です。\n"
"    デフォルトは`:erlang.system_info(:schedulers_online)`です\n"
"\n"
"  * `:trace` - ExUnitをtraceモードにセットします; これは\n"
"    `:max_case`を`1`にし、実行中のそれぞれのテストケースと\n"
"    テストを出力します\n"
"\n"
"  * `:autorun` - ExUnitをon exit(終了直前)に実行すべきか否か。 \n"
"    デフォルトは`true`です\n"
"\n"
"  * `:include` - 指定したフィルタにマッチしないテストをスキップして\n"
"   実行するテストを指定します。デフォルトですべてのテストが含まれていることに"
"留意してください。\n"
"　したがって、それらのテストが先に除外されていない限り`:include`オプションは"
"効果を持ちません。\n"
"\n"
"  * `:exclude` - 指定したフィルタにマッチしたテストをスキップする\n"
"    ようにします。\n"
"\n"
"  * `:refute_receive_timeout` - `refute_receive` を呼ぶ際に使われる\n"
"    タイムアウトです(デフォルトは100ms)\n"
"\n"
"  * `:seed` - テストスイートの乱数シードの整数を指定します\n"
"\n"
"  * `:stacktrace_depth` - フォーマットとレポートで使われるスタック\n"
"    トレースの深さを構成します(デフォルトは20)\n"
"\n"
"  * `:timeout` - testのタイムアウトをセットします(デフォルトは60_000ms)\n"

#. TRANSLATORS: def ExUnit.plural_rule(word)
#: lib/ex_unit.ex:232
msgid ""
"Returns the pluralization for `word`.\n"
"\n"
"If one is not registered, returns the word appended with an \"s\".\n"
msgstr ""
"`word`の複数形を返します。\n"
"\n"
"複数形が登録されていない場合は、”s”を後ろに付けた単語を返します。\n"

#. TRANSLATORS: Elixir.ExUnit Summary
#: lib/ex_unit.ex:2
msgid ""
"Unit testing framework for Elixir.\n"
"\n"
"## Example\n"
"\n"
"A basic setup for ExUnit is shown below:\n"
"\n"
"    # File: assertion_test.exs\n"
"\n"
"    # 1) Start ExUnit.\n"
"    ExUnit.start\n"
"\n"
"    # 2) Create a new test module (test case) and use \"ExUnit.Case\".\n"
"    defmodule AssertionTest do\n"
"      # 3) Notice we pass \"async: true\", this runs the test case\n"
"      #    concurrently with other test cases. The individual tests\n"
"      #    within each test case are still run serially.\n"
"      use ExUnit.Case, async: true\n"
"\n"
"      # 4) Use the \"test\" macro instead of \"def\" for clarity.\n"
"      test \"the truth\" do\n"
"        assert true\n"
"      end\n"
"    end\n"
"\n"
"To run the tests above, run the file using `elixir` from the\n"
"command line. Assuming you named the file `assertion_test.exs`,\n"
"you can run it as:\n"
"\n"
"    elixir assertion_test.exs\n"
"\n"
"## Case, Callbacks and Assertions\n"
"\n"
"See `ExUnit.Case` and `ExUnit.Callbacks` for more information\n"
"about defining test cases and setting up callbacks.\n"
"\n"
"The `ExUnit.Assertions` module contains a set of macros to\n"
"generate assertions with appropriate error messages.\n"
"\n"
"## Integration with Mix\n"
"\n"
"Mix is the project management and build tool for Elixir. Invoking `mix "
"test`\n"
"from the command line will run the tests in each file matching the pattern\n"
"`*_test.exs` found in the `test` directory of your project.\n"
"\n"
"You must create a `test_helper.exs` file inside the\n"
"`test` directory and put the code common to all tests there.\n"
"\n"
"The minimum example of a `test_helper.exs` file would be:\n"
"\n"
"    # test/test_helper.exs\n"
"    ExUnit.start\n"
"\n"
"Mix will load the `test_helper.exs` file before executing the tests.\n"
"It is not necessary to `require` the `test_helper.exs` file in your test\n"
"files. See `Mix.Tasks.Test` for more information.\n"
msgstr ""
"Elixirのためのユニットテストフレームワークです。\n"
"\n"
"## 例\n"
"\n"
"ExUnitの基本的なセットアップは以下の通りです:\n"
"\n"
"    # File: assertion_test.exs\n"
"\n"
"    # 1) ExUnitを開始する。\n"
"    ExUnit.start\n"
"\n"
"    # 2) 新しいテストモジュール（test case）を作成して、\"ExUnit.Case”をuseす"
"る。\n"
"    defmodule AssertionTest do\n"
"      # 3) \"async: true”を渡していることに注意。これはこのテストケースを\n"
"      #    他のテストケースと並行に実行する。\n"
"      use ExUnit.Case, async: true\n"
"\n"
"      # 4) 明快にするために”def”ではなく\"test”マクロを使用する。\n"
"      test \"the truth\" do\n"
"        assert true\n"
"      end\n"
"    end\n"
"\n"
"上のテストを走らせるため、コマンドラインから`elixir`を使い、\n"
"ファイルを走らせます。ファイルに`assertion_test.exs`と名付\n"
"けたとすると、以下のように走らせることができます:\n"
"\n"
"    elixir assertion_test.exs\n"
"\n"
"## Case、Callbacks、Assertions\n"
"\n"
"テストケースの定義についての詳細は、`ExUnit.Case`と\n"
"`ExUnit.Callbacks`を参照してください。\n"
"\n"
"`ExUnit.Assertions`モジュールは、適切なエラーメッセージととも\n"
"にアサーションを簡単に生成する一連のマクロを含みます。\n"
"\n"
"## Mixとの統合\n"
"\n"
"MixはElixirのためのプロジェクト管理・ビルドツールです。\n"
"コマンドラインから`mix test`を起動すると、プロジェクトの\n"
"`test`ディレクトリの`*_test.exs`パターンにマッチするファ\n"
"イルを見付けて、それぞれの中のテストを走らせます。\n"
"\n"
"`test`ディレクトリに`test_helper.exs`ファイルを作り、全てのテストに\n"
"共通のコードを書かなければなりません。\n"
"\n"
"`test_helper.exs`ファイルの最小限の例は次の通り:\n"
"\n"
"    # test/test_helper.exs\n"
"    ExUnit.start\n"
"\n"
"Mixはテストを実行する前に`test_helper.exs`ファイルをロードします。\n"
"testファイルに`test_helper.exs`を`require`する必要はありません。\n"
"詳細は`Mix.Tasks.Test`を参照してください。\n"

#. TRANSLATORS: def ExUnit.run()
#: lib/ex_unit.ex:256
msgid ""
"API used to run the tests. It is invoked automatically\n"
"if ExUnit is started via `ExUnit.start/1`.\n"
"\n"
"Returns a map containing the total number of tests, the number\n"
"of failures and the number of skipped tests.\n"
msgstr ""
"テストを走らせるために使われるAPIです。ExUnitが\n"
"`ExUnit.start/1`により開始すると、自動的に起動されます。\n"
"\n"
"テストの数、失敗の数とスキップしたテストの数を\n"
"含むマップを返します。\n"

#. TRANSLATORS: def ExUnit.start(options \\ [])
#: lib/ex_unit.ex:141
msgid ""
"Starts ExUnit and automatically runs tests right before the\n"
"VM terminates. It accepts a set of options to configure `ExUnit`\n"
"(the same ones accepted by `configure/1`).\n"
"\n"
"If you want to run tests manually, you can set `:autorun` to `false`.\n"
msgstr ""
"ExUnitを開始し、自動的にテストを走らせ、直後にVMを終了します。\n"
"`ExUnit`を構成するための、一組のオプションを受け入れます\n"
"(オプションは`configure/1`と同じです)。\n"
"\n"
"マニュルでテストを走らせたい場合は`:autorun`を`false`にセットしてください。\n"

#. TRANSLATORS: Elixir.ExUnit.Test Summary
#: lib/ex_unit.ex:65
msgid ""
"A struct that keeps information about the test.\n"
"\n"
"It is received by formatters and contains the following fields:\n"
"\n"
"  * `:name`  - the test name\n"
"  * `:case`  - the test case\n"
"  * `:state` - the test error state (see ExUnit.state)\n"
"  * `:time`  - the time to run the test\n"
"  * `:tags`  - the test tags\n"
"  * `:logs`  - the captured logs\n"
"\n"
msgstr ""
"テストについての情報を保持する構造体です。\n"
"\n"
"構造体はフォーマッタにより受信され、以下のフィールドを含みます:\n"
"\n"
"  * `:name`  - テスト名\n"
"  * `:case`  - テストケース\n"
"  * `:state` - テストステート (ExUnit.stateを参照)\n"
"  * `:time`  - テスト実行時刻\n"
"  * `:tags`  - テストのタグ\n"
"  * `:logs`  - キャプチャされたログ\n"
"\n"

#. TRANSLATORS: Elixir.ExUnit.TestCase Summary
#: lib/ex_unit.ex:89
msgid ""
"A struct that keeps information about the test case.\n"
"\n"
"It is received by formatters and contains the following fields:\n"
"\n"
"  * `:name`  - the test case name\n"
"  * `:state` - the test error state (see ExUnit.state)\n"
"  * `:tests` - all tests for this case\n"
"\n"
msgstr ""
"テストケースについての情報を保持する構造体です。\n"
"\n"
"フォーマッタにより受信され、以下のフィールドを含みます:\n"
"\n"
"  * `:name`  - テストケース名\n"
"  * `:state` - テストステート (see ExUnit.state)\n"
"  * `:tests` - このケースの全てのテスト\n"
"\n"
