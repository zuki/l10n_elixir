#. TRANSLATORS: def Mix.Utils.module_name_to_command(module, nesting \\ 0)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:254 
msgid ""
"Takes a module and converts it to a command.\n"
"\n"
"The nesting argument can be given in order to remove\n"
"the nesting of a module.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Mix.Utils.module_name_to_command(Mix.Tasks.Compile, 2)\n"
"    \"compile\"\n"
"\n"
"    iex> Mix.Utils.module_name_to_command(\"Mix.Tasks.Compile.Elixir\", 2)\n"
"    \"compile.elixir\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.can_write?(path)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:410 
msgid ""
"Prompts the user to overwrite the file if it exists. Returns\n"
"the user input.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.command_to_module_name(command)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:283 
msgid ""
"Takes a command and converts it to the module name format.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Mix.Utils.command_to_module_name(\"compile.elixir\")\n"
"    \"Compile.Elixir\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.extract_files(paths, exts_or_pattern)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:122 
msgid ""
"Extracts files from a list of paths.\n"
"\n"
"`exts_or_pattern` may be a list of extensions or a\n"
"`Path.wildcard/1` pattern.\n"
"\n"
"If the path in `paths` is a file, it is included in\n"
"the return result. If it is a directory, it is searched\n"
"recursively for files with the given extensions or matching\n"
"the given patterns.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.extract_stale(sources, targets)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:69 
msgid ""
"Extracts all stale `sources` compared to the given `targets`.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.write_dot_graph!(path, title, nodes, callback, opts \\ [])
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:200 
msgid ""
"Outputs the given tree according to the callback as a DOT graph.\n"
"\n"
"The callback will be invoked for each node and it\n"
"must return a `{printed, children}` tuple.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.print_tree(nodes, callback, opts \\ [])
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:151 
msgid ""
"Prints the given tree according to the callback.\n"
"\n"
"The callback will be invoked for each node and it\n"
"must return a `{printed, children}` tuple.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.compiling_n(n, ext)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:114 
msgid ""
"Prints n files are being compiled with the given extension.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.read_path(path, opts \\ [])
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:359 
msgid ""
"Opens and reads content from either a URL or a local filesystem path\n"
"and returns the contents as a `{:ok, binary}`, `:badpath` for invalid\n"
"paths or `{:local, message}` for local errors and `{:remote, message}`\n"
"for remote ones.\n"
"\n"
"## Options\n"
"\n"
"  * `:sha512` - checks against the given SHA-512 checksum. Returns\n"
"    `{:checksum, message}` in case it fails\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.mix_home()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:4 
msgid ""
"Gets the Mix home.\n"
"\n"
"It defaults to `~/.mix` unless the `MIX_HOME`\n"
"environment variable is set.\n"
"\n"
"Developers should only store entries in the\n"
"`MIX_HOME` directory which are guaranteed to\n"
"work across multiple Elixir versions, as it is\n"
"not recommended to swap the `MIX_HOME` directory\n"
"as configuration and other important data may be\n"
"stored there.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.command_to_module(command, at \\ Elixir)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:42 
msgid ""
"Takes a `command` name and attempts to load a module\n"
"with the command name converted to a module name\n"
"in the given `at` scope.\n"
"\n"
"Returns `{:module, module}` in case a module\n"
"exists and is loaded, `{:error, reason}` otherwise.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Mix.Utils.command_to_module(\"compile\", Mix.Tasks)\n"
"    {:module, Mix.Tasks.Compile}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.last_modified(path)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:87 
msgid ""
"Returns the date the given path was last modified.\n"
"\n"
"If the path does not exist, it returns the Unix epoch\n"
"(1970-01-01 00:00:00).\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.mix_paths()
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:21 
msgid ""
"Gets all paths defined in the MIX_PATH env variable.\n"
"\n"
"`MIX_PATH` may contain multiple paths. If on Windows, those\n"
"paths should be separated by `;`, if on Unix systems, use `:`.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.stale?(sources, targets)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:61 
msgid ""
"Returns `true` if any of the `sources` are stale\n"
"compared to the given `targets`.\n"
msgstr ""
#. TRANSLATORS: def Mix.Utils.symlink_or_copy(source, target)
#: /private/tmp/elixir-20170104-91709-1lzmmcr/elixir-1.4.0/lib/mix/lib/mix/utils.ex:299 
msgid ""
"Symlinks directory `source` to `target` or copies it recursively\n"
"in case symlink fails.\n"
"\n"
"Expects source and target to be absolute paths as it generates\n"
"a relative symlink.\n"
msgstr ""
