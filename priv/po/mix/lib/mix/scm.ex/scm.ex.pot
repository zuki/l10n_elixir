#. TRANSLATORS: @callback checked_out?/1
#: lib/mix/scm.ex:52 
msgid ""
"This behaviour function returns a boolean if the\n"
"dependency is available.\n"
msgstr ""
#. TRANSLATORS: @callback managers/1
#: lib/mix/scm.ex:114 
msgid ""
"Returns the usable managers for the dependency. This can be used\n"
"if the SCM has extra knowledge of the dependency, otherwise it\n"
"should return an empty list.\n"
msgstr ""
#. TRANSLATORS: def Mix.SCM.append(mod)
#: lib/mix/scm.ex:137 
msgid ""
"Appends the given SCM module to the list of available SCMs.\n"
msgstr ""
#. TRANSLATORS: def Mix.SCM.prepend(mod)
#: lib/mix/scm.ex:130 
msgid ""
"Prepends the given SCM module to the list of available SCMs.\n"
msgstr ""
#. TRANSLATORS: @callback format_lock/1
#: lib/mix/scm.ex:27 
msgid ""
"Returns a string representing the SCM. This is used\n"
"when printing the dependency and not for inspection,\n"
"so the amount of information should be concise and\n"
"easy to spot.\n"
"\n"
"If nil is returned, it means no lock information is available.\n"
msgstr ""
#. TRANSLATORS: def Mix.SCM.available()
#: lib/mix/scm.ex:121 
msgid ""
"Returns all available SCMs. Each SCM is tried in order\n"
"until a matching one is found.\n"
msgstr ""
#. TRANSLATORS: @callback fetchable?/0
#: lib/mix/scm.ex:9 
msgid ""
"Returns a boolean if the dependency can be fetched\n"
"or it is meant to be previously available in the\n"
"filesystem.\n"
"\n"
"Local dependencies (i.e. non fetchable ones) are automatically\n"
"recompiled every time the parent project is compiled.\n"
msgstr ""
#. TRANSLATORS: @callback equal?/2
#: lib/mix/scm.ex:107 
msgid ""
"Receives two options and must return `true` if they refer to the\n"
"same repository. The options are guaranteed to belong to the\n"
"same SCM.\n"
msgstr ""
#. TRANSLATORS: @callback checkout/1
#: lib/mix/scm.ex:58 
msgid ""
"This behaviour function checks out dependencies.\n"
"\n"
"If the dependency is locked, a lock is received in `opts`\n"
"and the repository must be check out at the lock. Otherwise,\n"
"no lock is given and the repository can be checked out\n"
"to the latest version.\n"
"\n"
"It must return the current lock.\n"
msgstr ""
#. TRANSLATORS: @callback format/1
#: lib/mix/scm.ex:19 
msgid ""
"Returns a string representing the SCM. This is used\n"
"when printing the dependency and not for inspection,\n"
"so the amount of information should be concise and\n"
"easy to spot.\n"
msgstr ""
#. TRANSLATORS: @callback update/1
#: lib/mix/scm.ex:70 
msgid ""
"This behaviour function updates dependencies. It may be\n"
"called by `deps.get` or `deps.update`.\n"
"\n"
"In the first scenario, a lock is received in `opts` and\n"
"the repository must be updated to the lock. In the second,\n"
"no lock is given and the repository can be updated freely.\n"
"\n"
"It must return the current lock.\n"
msgstr ""
#. TRANSLATORS: Elixir.Mix.SCM Summary
#: lib/mix/scm.ex:2 
msgid ""
"This module provides helper functions and defines the\n"
"behaviour required by any source code manager (SCM) used by Mix.\n"
msgstr ""
#. TRANSLATORS: @callback lock_status/1
#: lib/mix/scm.ex:82 
msgid ""
"This behaviour function checks the status of the lock. In\n"
"particular, it checks if the revision stored in the lock\n"
"is the same as the repository it is currently in.\n"
"\n"
"It may return:\n"
"\n"
"  * `:mismatch` - if the lock doesn't match and we need to\n"
"    simply move to the latest lock\n"
"\n"
"  * `:outdated` - the repository options are outdated in the\n"
"    lock and we need to trigger a full update\n"
"\n"
"  * `:ok` - everything is fine\n"
"\n"
"The lock is sent via `opts[:lock]` but it may not always be\n"
"available. In such cases, if the SCM requires a lock, it must\n"
"return `:lockmismatch`, otherwise simply `:ok`.\n"
"\n"
"Note the lock may also belong to another SCM and as such, an\n"
"structural check is required. A structural mismatch should always\n"
"return `:outdated`.\n"
msgstr ""
#. TRANSLATORS: @callback accepts_options/2
#: lib/mix/scm.ex:37 
msgid ""
"This behaviour function receives a keyword list of `opts`\n"
"and should return an updated list in case the SCM consumes\n"
"the available options. For example, when a developer specifies\n"
"a dependency:\n"
"\n"
"    {:foo, \"0.1.0\", github: \"foo/bar\"}\n"
"\n"
"Each registered SCM will be asked if they consume this dependency,\n"
"receiving `[github: \"foo/bar\"]` as argument. Since this option makes\n"
"sense for the Git SCM, it will return an update list of options\n"
"while other SCMs would simply return `nil`.\n"
msgstr ""
