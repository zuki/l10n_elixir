#. TRANSLATORS: def Mix.Project.app_path(config \\ config())
#: lib/mix/project.ex:419 
msgid ""
"Returns the application path inside the build.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.app_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.apps_paths(config \\ config())
#: lib/mix/project.ex:227 
msgid ""
"Returns a map with the umbrella child applications\n"
"paths based on `:apps_path` and `:apps` configurations.\n"
"\n"
"Returns `nil` if not an umbrella project.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.build_path(config \\ config())
#: lib/mix/project.ex:356 
msgid ""
"Returns the build path for this project.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/shared\"\n"
"\n"
"If `:build_per_environment` is set to `true`, it will create a new build per\n"
"environment:\n"
"\n"
"    Mix.env\n"
"    #=> :dev\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/dev\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.config_files()
#: lib/mix/project.ex:193 
msgid ""
"Returns a list of project configuration files for this project.\n"
"\n"
"This function is usually used in compilation tasks to trigger\n"
"a full recompilation whenever such configuration files change.\n"
"\n"
"By default it includes the mix.exs file, the lock manifest and\n"
"all config files in the `config` directory.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.consolidation_path(config \\ config())
#: lib/mix/project.ex:460 
msgid ""
"Returns the path where protocol consolidations are stored.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.build_structure(config \\ config(), opts \\ [])
#: lib/mix/project.ex:491 
msgid ""
"Builds the project structure for the current application.\n"
"\n"
"## Options\n"
"\n"
"  * `:symlink_ebin` - symlink ebin instead of copying it\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.deps_paths()
#: lib/mix/project.ex:340 
msgid ""
"Returns the full path of all dependencies as a map.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.deps_paths\n"
"    #=> %{foo: \"deps/foo\", bar: \"custom/path/dep\"}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.compile(args, config \\ config())
#: lib/mix/project.ex:467 
msgid ""
"Compiles the given project.\n"
"\n"
"It will run the compile task unless the project\n"
"is in build embedded mode, which may fail as an\n"
"explicit command to `mix compile` is required.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.config()
#: lib/mix/project.ex:170 
msgid ""
"Returns the project configuration.\n"
"\n"
"If there is no project defined, it still returns a keyword\n"
"list with default values. This allows many Mix tasks to work\n"
"without the need for an underlying project.\n"
"\n"
"Note this configuration is cached once the project is\n"
"pushed onto the stack. Calling it multiple times won't\n"
"cause it to be recomputed.\n"
"\n"
"Do not use `Mix.Project.config/0` to find the runtime configuration.\n"
"Use it only to configure aspects of your project (like\n"
"compilation directories) and not your application runtime.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.get!()
#: lib/mix/project.ex:156 
msgid ""
"Same as `get/0`, but raises an exception if there is no current project.\n"
"\n"
"This is usually called by tasks that need additional\n"
"functions on the project to be defined. Since such\n"
"tasks usually depend on a project being defined, this\n"
"function raises `Mix.NoProjectError` in case no project\n"
"is available.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.in_project(app, path, post_config \\ [], fun)
#: lib/mix/project.ex:278 
msgid ""
"Runs the given `fun` inside the given project.\n"
"\n"
"This function changes the current working directory and\n"
"loads the project at the given directory onto the project\n"
"stack.\n"
"\n"
"A `post_config` can be passed that will be merged into\n"
"the project configuration.\n"
"\n"
"`fun` is called with the module name of the given `Mix.Project`.\n"
"The return value of this function is the return value of `fun`.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.in_project :my_app, \"/path/to/my_app\", fn module ->\n"
"      \"Mixfile is: #{inspect module}\"\n"
"    end\n"
"    #=> \"Mixfile is: MyApp.Mixfile\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.manifest_path(config \\ config())
#: lib/mix/project.ex:393 
msgid ""
"Returns the path where manifests are stored.\n"
"\n"
"By default they are stored in the app path inside\n"
"the build directory. Umbrella applications have\n"
"the manifest path set to the root of the build directory.\n"
"Directories may be changed in future releases.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.manifest_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.get()
#: lib/mix/project.ex:138 
msgid ""
"Retrieves the current project if there is one.\n"
"\n"
"Otherwise `nil` is returned. It may happen in cases\n"
"there is no mixfile in the current directory.\n"
"\n"
"If you expect a project to be defined, i.e. it is a\n"
"requirement of the current task, you should call\n"
"`get!/0` instead.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.umbrella?(config \\ config())
#: lib/mix/project.ex:219 
msgid ""
"Returns `true` if project is an umbrella project.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.deps_path(config \\ config())
#: lib/mix/project.ex:324 
msgid ""
"Returns the path where dependencies are stored for this project.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.deps_path\n"
"    #=> \"/path/to/project/deps\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.compile_path(config \\ config())
#: lib/mix/project.ex:444 
msgid ""
"Returns the paths this project compiles to.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.compile_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app/ebin\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.ensure_structure(config \\ config(), opts \\ [])
#: lib/mix/project.ex:533 
msgid ""
"Ensures the project structure exists.\n"
"\n"
"In case it does exist, it is a no-op. Otherwise, it is built.\n"
msgstr ""
#. TRANSLATORS: Elixir.Mix.Project Summary
#: lib/mix/project.ex:2 
msgid ""
"Defines and manipulates Mix projects.\n"
"\n"
"A Mix project is defined by calling `use Mix.Project` in a module, usually\n"
"placed in `mix.exs`:\n"
"\n"
"    defmodule MyApp.Mixfile do\n"
"      use Mix.Project\n"
"\n"
"      def project do\n"
"        [app: :my_app,\n"
"         version: \"0.6.0\"]\n"
"      end\n"
"    end\n"
"\n"
"## Configuration\n"
"\n"
"In order to configure Mix, the module that `use`s `Mix.Project` should export\n"
"a `project/0` function that returns a keyword list representing configuration\n"
"for the project.\n"
"\n"
"This configuration can be read using `Mix.Project.config/0`. Note that\n"
"`config/0` won't fail if a project is not defined; this allows many Mix tasks\n"
"to work without a project.\n"
"\n"
"If a task requires a project to be defined or needs to access a\n"
"special function within the project, the task can call `Mix.Project.get!/0`\n"
"which fails with `Mix.NoProjectError` in the case a project is not\n"
"defined.\n"
"\n"
"There isn't a comprehensive list of all the options that can be returned by\n"
"`project/0` since many Mix tasks define their own options that they read from\n"
"this configuration. For example, look at the \"Configuration\" section in the\n"
"documentation for the `Mix.Tasks.Compile` task.\n"
"\n"
"These are a few options that are not used by just one Mix task (and will thus\n"
"be documented here):\n"
"\n"
"  * `:build_per_environment` - if `true`, builds will be *per-environment*. If\n"
"    `false`, builds will go in `_build/shared` regardless of the Mix\n"
"    environment. Defaults to `true`.\n"
"\n"
"  * `:aliases` - a list of task aliases. For more information, check out the\n"
"    \"Aliases\" section in the documentation for the `Mix` module. Defaults to\n"
"    `[]`.\n"
"\n"
"  * `:config_path` - a string representing the path of the main config\n"
"    file. See `config_files/0` for more information. Defaults to\n"
"    `\"config/config.exs\"`.\n"
"\n"
"  * `:default_task` - a string representing the default task to be run by\n"
"    `mix` when no task is specified. Defaults to `\"run\"`.\n"
"\n"
"  * `:deps` - a list of dependencies of this project. Refer to the\n"
"    documentation for the `Mix.Tasks.Deps` task for more information. Defaults\n"
"    to `[]`.\n"
"\n"
"  * `:deps_path` - directory where dependencies are stored. Also see\n"
"    `deps_path/1`. Defaults to `\"deps\"`.\n"
"\n"
"  * `:lockfile` - the name of the lockfile used by the `mix deps.*` family of\n"
"    tasks. Defaults to `\"mix.lock\"`.\n"
"\n"
"  * `:preferred_cli_env` - a keyword list of `{task, env}` tuples here `task`\n"
"    is the task name as an atom (for example, `:\"deps.get\"`) and `env` is the\n"
"    preferred environment (for example, `:test`). This option overrides what\n"
"    specified by the single tasks with the `@preferred_cli_env` attribute (see\n"
"    `Mix.Task`). Defaults to `[]`.\n"
"\n"
"For more options, keep an eye on the documentation for single Mix tasks; good\n"
"examples are the `Mix.Tasks.Compile` task and all the specific compiler tasks\n"
"(such as `Mix.Tasks.Compile.Elixir` or `Mix.Tasks.Compile.Erlang`).\n"
"\n"
"Note that sometimes the same configuration option is mentioned in the\n"
"documentation for different tasks; this is just because it's common for many\n"
"tasks to read and use the same configuration option (for example,\n"
"`:erlc_paths` is used by `mix compile.erlang`, `mix compile.yecc`, and other\n"
"tasks).\n"
"\n"
"## Erlang projects\n"
"\n"
"Mix can be used to manage Erlang projects that don't have any Elixir code. To\n"
"ensure Mix tasks work correctly for an Erlang project, `language: :erlang` has\n"
"to be part of the configuration returned by `project/0`. This setting also\n"
"makes sure Elixir is not added as a dependency to the generated `.app` file or\n"
"to the escript generated with `mix escript.build`, and so on.\n"
msgstr ""
#. TRANSLATORS: def Mix.Project.load_paths(config \\ config())
#: lib/mix/project.ex:547 
msgid ""
"Returns all load paths for this project.\n"
msgstr ""
