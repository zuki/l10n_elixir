msgid ""
msgstr ""
"Project-Id-Version: elixir 1.4.0\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-01-24 17:49+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#. TRANSLATORS: def Mix.Project.app_path(config \\ config())
#: lib/mix/project.ex:420
msgid ""
"Returns the application path inside the build.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.app_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"
msgstr ""
"ビルド内のアプリケーションパスを返します。\n"
"\n"
"返されるパスは展開されます。\n"
"\n"
"## 例\n"
"\n"
"    Mix.Project.app_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"

#. TRANSLATORS: def Mix.Project.apps_paths(config \\ config())
#: lib/mix/project.ex:227
msgid ""
"Returns a map with the umbrella child applications\n"
"paths based on `:apps_path` and `:apps` configurations.\n"
"\n"
"Returns `nil` if not an umbrella project.\n"
msgstr ""
"`:apps_path` と `:apps`の構成を元に アンブレラ子アプリケーションの\n"
"パスを持つマップを返します。\n"
"\n"
"アンブレラプロジェクトでない場合は`nil`を返します。\n"
"\n"

#. TRANSLATORS: def Mix.Project.build_path(config \\ config())
#: lib/mix/project.ex:357
msgid ""
"Returns the build path for this project.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/shared\"\n"
"\n"
"If `:build_per_environment` is set to `true`, it will create a new build "
"per\n"
"environment:\n"
"\n"
"    Mix.env\n"
"    #=> :dev\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/dev\"\n"
"\n"
msgstr ""
"このプロジェクトのビルドパスを返します。\n"
"\n"
"返されるパスは展開されます。\n"
"\n"
"## 例\n"
"\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/shared\"\n"
"\n"
"`:build_per_environment`が`true`に設定されている場合は\n"
" 環境ごとに新たなビルドを作成します。:\n"
"\n"
"    Mix.env\n"
"    #=> :dev\n"
"    Mix.Project.build_path\n"
"    #=> \"/path/to/project/_build/dev\"\n"
"\n"

#. TRANSLATORS: def Mix.Project.consolidation_path(config \\ config())
#: lib/mix/project.ex:461
msgid "Returns the path where protocol consolidations are stored.\n"
msgstr "プロトコルコンソリデーションが格納されているパスを返します。\n"

#. TRANSLATORS: def Mix.Project.build_structure(config \\ config(), opts \\ [])
#: lib/mix/project.ex:492
msgid ""
"Builds the project structure for the current application.\n"
"\n"
"## Options\n"
"\n"
"  * `:symlink_ebin` - symlink ebin instead of copying it\n"
"\n"
msgstr ""
"現在のアプリケーションのプロジェクト構造をビルドします。\n"
"\n"
"## オプション\n"
"\n"
"  * `:symlink_ebin` - ebinをコピーする代わりにシンボリックリンクする\n"
"\n"

#. TRANSLATORS: def Mix.Project.config_files()
#: lib/mix/project.ex:193
msgid ""
"Returns a list of project configuration files for this project.\n"
"\n"
"This function is usually used in compilation tasks to trigger\n"
"a full recompilation whenever such configuration files change.\n"
"\n"
"By default it includes the mix.exs file, the lock manifest and\n"
"all config files in the `config` directory.\n"
msgstr ""
"このプロジェクトのプロジェクト構成ファイルのリストを返します。\n"
"\n"
"この関数は通常、構成ファイルが変更される毎に再フルコンパイルを\n"
"起動させるためにコンパイルタスクで使用されます。\n"
"\n"
"デフォルトでは、mix.exsファイル、ロックマニフェスト、`config`ディレクトリの\n"
"すべての構成ファイルを含んでいます。\n"

#. TRANSLATORS: def Mix.Project.deps_paths()
#: lib/mix/project.ex:341
msgid ""
"Returns the full path of all dependencies as a map.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.deps_paths\n"
"    #=> %{foo: \"deps/foo\", bar: \"custom/path/dep\"}\n"
"\n"
msgstr ""
"すべての依存関係のフルパスをマップで返します。\n"
"\n"
"## 例\n"
"\n"
"    Mix.Project.deps_paths\n"
"    #=> %{foo: \"deps/foo\", bar: \"custom/path/dep\"}\n"
"\n"

#. TRANSLATORS: def Mix.Project.compile(args, config \\ config())
#: lib/mix/project.ex:468
msgid ""
"Compiles the given project.\n"
"\n"
"It will run the compile task unless the project\n"
"is in build embedded mode, which may fail as an\n"
"explicit command to `mix compile` is required.\n"
msgstr ""
"指定したプロジェクトをコンパイルします。\n"
"\n"
"プロジェクトが埋め込みビルドモードでない場合はコンパイルタスクを実行\n"
"します。埋め込みビルドモード場合は`mix compile`への明示的なコマンドが\n"
"必要なので失敗すでしょう。\n"

#. TRANSLATORS: def Mix.Project.config()
#: lib/mix/project.ex:170
msgid ""
"Returns the project configuration.\n"
"\n"
"If there is no project defined, it still returns a keyword\n"
"list with default values. This allows many Mix tasks to work\n"
"without the need for an underlying project.\n"
"\n"
"Note this configuration is cached once the project is\n"
"pushed onto the stack. Calling it multiple times won't\n"
"cause it to be recomputed.\n"
"\n"
"Do not use `Mix.Project.config/0` to find the runtime configuration.\n"
"Use it only to configure aspects of your project (like\n"
"compilation directories) and not your application runtime.\n"
msgstr ""
"プロジェクトの構成を返します。\n"
"\n"
"プロジェクトが定義されていない場合でも、デフォルト値による\n"
"キーワードリストを返します。これにより基本となるプロジェクトを\n"
"必要とすることなく多くのMixタスクが作動できます。\n"
"\n"
"この設定はプロジェクトが一旦スタックにプッシュされると\n"
"キャッシュされることに注意してください。複数回呼びしても\n"
"再計算を行うことはありません。\n"
"\n"
"実行中の構成を探すために`Mix.Project.config/0`を使わないでください。\n"
"（コンパイルディレクトリのような）プロジェクトの様相を構成するためにのみ\n"
"使用し、アプリケーションランタイムには使用しないでください。\n"

#. TRANSLATORS: def Mix.Project.get!()
#: lib/mix/project.ex:156
msgid ""
"Same as `get/0`, but raises an exception if there is no current project.\n"
"\n"
"This is usually called by tasks that need additional\n"
"functions on the project to be defined. Since such\n"
"tasks usually depend on a project being defined, this\n"
"function raises `Mix.NoProjectError` in case no project\n"
"is available.\n"
msgstr ""
"`get/0`と同じですが、カレントプロジェクトが存在しない場合、例外を発生しま"
"す。\n"
"\n"
"これは通常、プロジェクトに追加の関数を定義する必要がある\n"
"タスクにより呼び出されます。そのようなタスクは通常定義中の\n"
"プロジェクトに依存しますので、プロジェクトが利用できない場合、\n"
"この関数は`Mix.NoProjectError`を\n"
"発生します。\n"
"\n"

#. TRANSLATORS: def Mix.Project.manifest_path(config \\ config())
#: lib/mix/project.ex:394
msgid ""
"Returns the path where manifests are stored.\n"
"\n"
"By default they are stored in the app path inside\n"
"the build directory. Umbrella applications have\n"
"the manifest path set to the root of the build directory.\n"
"Directories may be changed in future releases.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.manifest_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"
msgstr ""
"マニフェストが格納されるパスを返します。\n"
"\n"
"デフォルトでは、マニフェストはビルドディレクトリ内の\n"
"appパスに格納されます。アンプレラアプリケーションは\n"
"ビルドディレクトリのルートに設定されたマニフェストパスを\n"
"持っています。ディレクトリは将来のリリースでは変更される可能性があります。\n"
"\n"
"返されるパスは展開されます。\n"
"\n"
"## 例\n"
"\n"
"    Mix.Project.manifest_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app\"\n"
"\n"
"\n"

#. TRANSLATORS: def Mix.Project.get()
#: lib/mix/project.ex:138
msgid ""
"Retrieves the current project if there is one.\n"
"\n"
"Otherwise `nil` is returned. It may happen in cases\n"
"there is no mixfile in the current directory.\n"
"\n"
"If you expect a project to be defined, i.e. it is a\n"
"requirement of the current task, you should call\n"
"`get!/0` instead.\n"
msgstr ""
"存在する場合、カレントプロジェクトを取り出します。\n"
"\n"
"そうでない場合は`nil`が返ります。これはカレントディレクトリに\n"
"mixfileが存在しない場合に起こります。\n"
"\n"
"プロジェクトが定義されていることを期待する場合、すなわち、\n"
"それがカレントタスクの要件である場合は、この関数ではなく`get!/0`を\n"
"呼び出すべきです。\n"

#. TRANSLATORS: def Mix.Project.compile_path(config \\ config())
#: lib/mix/project.ex:445
msgid ""
"Returns the paths this project compiles to.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.compile_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app/ebin\"\n"
"\n"
msgstr ""
"このプロジェクトをコンパイルしたコードが置かれるパスを返します。\n"
"\n"
"返されるパスは展開されます。\n"
"n\n"
"## 例\n"
"\n"
"    Mix.Project.compile_path\n"
"    #=> \"/path/to/project/_build/shared/lib/app/ebin\"\n"
"\n"

#. TRANSLATORS: def Mix.Project.ensure_structure(config \\ config(), opts \\ [])
#: lib/mix/project.ex:534
msgid ""
"Ensures the project structure exists.\n"
"\n"
"In case it does exist, it is a no-op. Otherwise, it is built.\n"
msgstr ""
"プロジェクト構造が存在することを保証します。\n"
"\n"
"プロジェクトが存在する場合は何もしません。そうでない場合はビルドします。\n"

#. TRANSLATORS: def Mix.Project.deps_path(config \\ config())
#: lib/mix/project.ex:325
msgid ""
"Returns the path where dependencies are stored for this project.\n"
"\n"
"The returned path will be expanded.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.deps_path\n"
"    #=> \"/path/to/project/deps\"\n"
"\n"
msgstr ""
"このプロジェクトの依存関係が格納されるパスを返します。\n"
"\n"
"返されるパスは展開されます。\n"
"\n"
"## 例\n"
"\n"
"    Mix.Project.deps_path\n"
"    #=> \"/path/to/project/deps\"\n"
"\n"

#. TRANSLATORS: def Mix.Project.umbrella?(config \\ config())
#: lib/mix/project.ex:219
msgid "Returns `true` if project is an umbrella project.\n"
msgstr "プロジェクトがアンプレラプロジェクトの場合、`true`を返します。\n"

#. TRANSLATORS: def Mix.Project.in_project(app, path, post_config \\ [], fun)
#: lib/mix/project.ex:279
msgid ""
"Runs the given `fun` inside the given project.\n"
"\n"
"This function changes the current working directory and\n"
"loads the project at the given directory onto the project\n"
"stack.\n"
"\n"
"A `post_config` can be passed that will be merged into\n"
"the project configuration.\n"
"\n"
"`fun` is called with the module name of the given `Mix.Project`.\n"
"The return value of this function is the return value of `fun`.\n"
"\n"
"## Examples\n"
"\n"
"    Mix.Project.in_project :my_app, \"/path/to/my_app\", fn module ->\n"
"      \"Mixfile is: #{inspect module}\"\n"
"    end\n"
"    #=> \"Mixfile is: MyApp.Mixfile\"\n"
"\n"
msgstr ""
"指定した`fun`を指定したプロジェクトで実行します。\n"
"\n"
"この関数はカレントワーキングディレクトリを変更し、\n"
"指定したディレクトリにあるプロジェクトをプロジェクト\n"
"スタックにロードします。\n"
"\n"
"プロジェクトの構成にマージされる`post_config`を\n"
"渡すことができます。\n"
"\n"
"`fun`は指定した`Mix.Project`のモジュール名を引数に\n"
"呼びされます。この関数の返り値は`fun`の返り値です。\n"
"\n"
"## 例\n"
"\n"
"    Mix.Project.in_project :my_app, \"/path/to/my_app\", fn module ->\n"
"      \"Mixfile is: #{inspect module}\"\n"
"    end\n"
"    #=> \"Mixfile is: MyApp.Mixfile\"\n"
"\n"

#. TRANSLATORS: Elixir.Mix.Project Summary
#: lib/mix/project.ex:2
msgid ""
"Defines and manipulates Mix projects.\n"
"\n"
"A Mix project is defined by calling `use Mix.Project` in a module, usually\n"
"placed in `mix.exs`:\n"
"\n"
"    defmodule MyApp.Mixfile do\n"
"      use Mix.Project\n"
"\n"
"      def project do\n"
"        [app: :my_app,\n"
"         version: \"0.6.0\"]\n"
"      end\n"
"    end\n"
"\n"
"## Configuration\n"
"\n"
"In order to configure Mix, the module that `use`s `Mix.Project` should "
"export\n"
"a `project/0` function that returns a keyword list representing "
"configuration\n"
"for the project.\n"
"\n"
"This configuration can be read using `Mix.Project.config/0`. Note that\n"
"`config/0` won't fail if a project is not defined; this allows many Mix "
"tasks\n"
"to work without a project.\n"
"\n"
"If a task requires a project to be defined or needs to access a\n"
"special function within the project, the task can call `Mix.Project.get!/0`\n"
"which fails with `Mix.NoProjectError` in the case a project is not\n"
"defined.\n"
"\n"
"There isn't a comprehensive list of all the options that can be returned by\n"
"`project/0` since many Mix tasks define their own options that they read "
"from\n"
"this configuration. For example, look at the \"Configuration\" section in "
"the\n"
"documentation for the `Mix.Tasks.Compile` task.\n"
"\n"
"These are a few options that are not used by just one Mix task (and will "
"thus\n"
"be documented here):\n"
"\n"
"  * `:build_per_environment` - if `true`, builds will be *per-environment*. "
"If\n"
"    `false`, builds will go in `_build/shared` regardless of the Mix\n"
"    environment. Defaults to `true`.\n"
"\n"
"  * `:aliases` - a list of task aliases. For more information, check out "
"the\n"
"    \"Aliases\" section in the documentation for the `Mix` module. Defaults "
"to\n"
"    `[]`.\n"
"\n"
"  * `:config_path` - a string representing the path of the main config\n"
"    file. See `config_files/0` for more information. Defaults to\n"
"    `\"config/config.exs\"`.\n"
"\n"
"  * `:default_task` - a string representing the default task to be run by\n"
"    `mix` when no task is specified. Defaults to `\"run\"`.\n"
"\n"
"  * `:deps` - a list of dependencies of this project. Refer to the\n"
"    documentation for the `Mix.Tasks.Deps` task for more information. "
"Defaults\n"
"    to `[]`.\n"
"\n"
"  * `:deps_path` - directory where dependencies are stored. Also see\n"
"    `deps_path/1`. Defaults to `\"deps\"`.\n"
"\n"
"  * `:lockfile` - the name of the lockfile used by the `mix deps.*` family "
"of\n"
"    tasks. Defaults to `\"mix.lock\"`.\n"
"\n"
"  * `:preferred_cli_env` - a keyword list of `{task, env}` tuples here "
"`task`\n"
"    is the task name as an atom (for example, `:\"deps.get\"`) and `env` is "
"the\n"
"    preferred environment (for example, `:test`). This option overrides "
"what\n"
"    specified by the single tasks with the `@preferred_cli_env` attribute "
"(see\n"
"    `Mix.Task`). Defaults to `[]`.\n"
"\n"
"For more options, keep an eye on the documentation for single Mix tasks; "
"good\n"
"examples are the `Mix.Tasks.Compile` task and all the specific compiler "
"tasks\n"
"(such as `Mix.Tasks.Compile.Elixir` or `Mix.Tasks.Compile.Erlang`).\n"
"\n"
"Note that sometimes the same configuration option is mentioned in the\n"
"documentation for different tasks; this is just because it's common for "
"many\n"
"tasks to read and use the same configuration option (for example,\n"
"`:erlc_paths` is used by `mix compile.erlang`, `mix compile.yecc`, and "
"other\n"
"tasks).\n"
"\n"
"## Erlang projects\n"
"\n"
"Mix can be used to manage Erlang projects that don't have any Elixir code. "
"To\n"
"ensure Mix tasks work correctly for an Erlang project, `language: :erlang` "
"has\n"
"to be part of the configuration returned by `project/0`. This setting also\n"
"makes sure Elixir is not added as a dependency to the generated `.app` file "
"or\n"
"to the escript generated with `mix escript.build`, and so on.\n"
msgstr ""
"Mixプロジェクトの定義と操作を行います。\n"
"\n"
"Mixプロジェクトはモジュールの中で`use Mix.Project`を呼び出すことで定義\n"
"されます。これは通常 `mix.exs`に置かれます:\n"
"\n"
"    defmodule MyApp.Mixfile do\n"
"      use Mix.Project\n"
"\n"
"      def project do\n"
"        [app: :my_app,\n"
"         version: \"0.6.0\"]\n"
"      end\n"
"    end\n"
"\n"
"## 構成\n"
"\n"
"MIxを構成するために`Mix.Project`を`use`したモジュールは、プロジェクトの\n"
"構成を表すキーワードリストを返す`project/0`関数をエクスポートしなければ\n"
"なりません。\n"
"\n"
"この構成は`Mix.Project.config/0`を使って読むことができます。`config/0`は\n"
"プロジェクトが定義されていなくても失敗しないことに注意してください。これは\n"
"プロジェクトなしで多くのMixタスクを稼働できるようにするためです。\n"
"\n"
"タスクがプロジェクトが定義されていることを要求する場合、またはプロジェクト内"
"の\n"
"特定の関数にアクセスする必要がある場合は、タスクは`Mix.Project.get!/0`を呼び"
"出す\n"
"ことができます。これはプロジェクトが定義されていないと`Mix.NoProjectError`\n"
"で失敗します。\n"
"\n"
"`project/0`が返すオプションはすべてのオプションの完全なリストではありませ"
"ん。\n"
"この構成から読み込まれる多くのMixタスクは独自のオプションを定義しているから\n"
"です。たとえば、`Mix.Tasks.Compile`タスクのドキュメントの”構成”セクションを\n"
"見てください。\n"
"\n"
"たった１つのMixタスクだけで使われるのではないオプションがいくつか存在します\n"
"（ですのでここに書いておきます）:\n"
"\n"
"  * `:build_per_environment` - `true`の場合、ビルドは*環境ごと*におこなわれれ"
"ます。\n"
"    `false`の場合はMix環境にかかわらず,`_build/shared`で行われます。\n"
"    デフォルトは`true`です。\n"
"\n"
"  * `:aliases` - タスクエイリアスのリスト。さらに詳しい情報は`Mix` モジュール"
"の\n"
"    ドキュメントの“エイリアス” セクションをチェックしてください。デフォルトは"
"`[]`です。\n"
"\n"
"  * `:config_path` - 主たる構成ファイルのパスを表す文字列。さらに詳しい情報"
"は\n"
"    `config_files/0`を参照してください。デフォルトは`\"config/config.exs\"`で"
"す。 \n"
"\n"
"  * `:default_task` - タスクが指定されない場合に`mix`により実行されるデフォル"
"トの\n"
"    タスクを表す文字列。デフォルトは`\"run\"`です。\n"
"\n"
"  * `:deps` - このプロジェクトの依存関係のリスト。さらに詳しい情報は\n"
"     `Mix.Tasks.Deps`タスクのドキュメントを参照してください。デフォルトは\n"
"     `[]`です。\n"
"\n"
"  * `:deps_path` - 依存関係が格納されているディレクトリ。`deps_path/1`も\n"
"     見てください。デフォルトは`\"deps\"`です。n\n"
"\n"
"  * `:lockfile` - タスクの`mix deps.*`ファミリが使用するロックファイルの名"
"前。\n"
"    デフォルトは`\"mix.lock\"`です。\n"
"\n"
"  * `:preferred_cli_env` - a keyword list of `{task, env}`タプルのキーワード"
"リスト。\n"
"    ここで、`task`はアトムによるタスク名（たとえば、`:\"deps.get”`）、`env` "
"は\n"
"    優先の環境（たとえば、`:test`）です。このオプションはタスクが"
"`@preferred_cli_env` \n"
"     属性で指定したものを上書きします（`Mix.Task`のドキュメントを参照）。\n"
"     デフォルトは`[]`です。\n"
"\n"
"さらなるオプションについては、個別のMixタスクのドキュメントに目を向けてくださ"
"い。\n"
"良い例は`Mix.Tasks.Compile` タスクとすべての特定のコンパイラータスク（たとえ"
"ば、\n"
"`Mix.Tasks.Compile.Elixir` や `Mix.Tasks.Compile.Erlang`）です。\n"
"\n"
"異なるタスクのドキュメントで同じ構成オプションに言及されている場合があること"
"に注意\n"
"してください。これは多くのタスクで同じ構成オプションが読み込まれ使用されるの"
"は\n"
"普通のことだからです（たとえば、`:erlc_paths`は`mix compile.erlang`や\n"
"`mix compile.yecc`などで使われています）。\n"
"\n"
"## Erlangプロジェクト\n"
"\n"
"MixはElixirコードをまったく含まないErlangプロジェクトの管理に使用することもで"
"きます。\n"
"ErlangプロジェクトでMixタスクが正しく動くようにするために、`project/0`が返す"
"構成に\n"
"`language: :erlang` が含まれるようにしなければなりません。また、この構成は、"
"生成される\n"
"`.app`ファイルや`mix escript.build`で生成されるescriptなどの依存関係にElixir"
"が追加\n"
"されないようにします。\n"

#. TRANSLATORS: def Mix.Project.load_paths(config \\ config())
#: lib/mix/project.ex:548
msgid "Returns all load paths for this project.\n"
msgstr "このプロジェクトのすべてのロードパスを返します。\n"
