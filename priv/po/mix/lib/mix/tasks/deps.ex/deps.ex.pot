#. TRANSLATORS: Elixir.Mix.Tasks.Deps Summary
#: lib/mix/tasks/deps.ex:8 
msgid ""
"Lists all dependencies and their status.\n"
"\n"
"Dependencies must be specified in the `mix.exs` file in one of\n"
"the following formats:\n"
"\n"
"    {app, requirement}\n"
"    {app, opts}\n"
"    {app, requirement, opts}\n"
"\n"
"Where:\n"
"\n"
"  * app is an atom\n"
"  * requirement is a version requirement or a regular expression\n"
"  * opts is a keyword list of options\n"
"\n"
"By default, dependencies are fetched using the [Hex package manager](https://hex.pm/):\n"
"\n"
"    {:plug, \">= 0.4.0\"}\n"
"\n"
"By specifying such dependencies, Mix will automatically install\n"
"Hex (if it wasn't previously installed) and download a package\n"
"suitable to your project.\n"
"\n"
"Mix also supports Git and path dependencies:\n"
"\n"
"    {:foobar, git: \"https://github.com/elixir-lang/foobar.git\", tag: \"0.1\"}\n"
"    {:foobar, path: \"path/to/foobar\"}\n"
"\n"
"And also in umbrella dependencies:\n"
"\n"
"    {:my_app, in_umbrella: true}\n"
"\n"
"Path and in umbrella dependencies are automatically recompiled by\n"
"the parent project whenever they change. While fetchable dependencies\n"
"like the ones using `:git` are recompiled only when fetched/updated.\n"
"\n"
"The dependencies' versions are expected to follow Semantic Versioning\n"
"and the requirements must be specified as defined in the `Version`\n"
"module.\n"
"\n"
"## Options\n"
"\n"
"Below we provide a more detailed look into the available options.\n"
"\n"
"### Dependency definition options\n"
"\n"
"  * `:app` - when set to `false`, does not read the app file for this\n"
"    dependency. By default, the app file is read\n"
"\n"
"  * `:env` - the environment (as an atom) to run the dependency on; defaults to `:prod`\n"
"\n"
"  * `:compile` - a command (string) to compile the dependency; defaults to a `mix`,\n"
"    `rebar` or `make` command\n"
"\n"
"  * `:optional` - marks the dependency as optional. In such cases, the\n"
"    current project will always include the optional dependency but any\n"
"    other project that depends on the current project won't be forced to\n"
"    use the optional dependency. However, if the other project includes\n"
"    the optional dependency on its own, the requirements and options\n"
"    specified here will also be applied.\n"
"\n"
"  * `:only` - the dependency is made available only in the given environments,\n"
"    useful when declaring dev- or test-only dependencies; by default the\n"
"    dependency will be available in all environments. The value of this option\n"
"    can either be a single environment (like `:dev`) or a list of environments\n"
"    (like `[:dev, :test]`)\n"
"\n"
"  * `:override` - if set to `true` the dependency will override any other\n"
"    definitions of itself by other dependencies\n"
"\n"
"  * `:manager` - Mix can also compile Rebar, Rebar3 and makefile projects\n"
"    and can fetch sub dependencies of Rebar and Rebar3 projects. Mix will\n"
"    try to infer the type of project but it can be overridden with this\n"
"    option by setting it to `:mix`, `:rebar`, `:rebar3` or `:make`\n"
"\n"
"  * `:runtime` - whether the dependency is part of runtime applications.\n"
"    Defaults to `true` which automatically adds the application to the list\n"
"    of apps that are started automatically and included in releases\n"
"\n"
"### Git options (`:git`)\n"
"\n"
"  * `:git`        - the Git repository URI\n"
"  * `:github`     - a shortcut for specifying Git repos from GitHub, uses `git:`\n"
"  * `:ref`        - the reference to checkout (may be a branch, a commit SHA or a tag)\n"
"  * `:branch`     - the Git branch to checkout\n"
"  * `:tag`        - the Git tag to checkout\n"
"  * `:submodules` - when `true`, initialize submodules for the repo\n"
"  * `:sparse`     - checkout a single directory inside the git repository and use it\n"
"    as your Mix dependency. Search \"sparse git checkouts\" for more information.\n"
"\n"
"### Path options (`:path`)\n"
"\n"
"  * `:path`        - the path for the dependency\n"
"  * `:in_umbrella` - when `true`, sets a path dependency pointing to\n"
"    \"../#{app}\", sharing the same environment as the current application\n"
"\n"
"## Deps task\n"
"\n"
"`mix deps` task lists all dependencies in the following format:\n"
"\n"
"    APP VERSION (SCM)\n"
"    [locked at REF]\n"
"    STATUS\n"
"\n"
"It supports the following options:\n"
"\n"
"  * `--all` - checks all dependencies, regardless of specified environment\n"
"\n"
msgstr ""
