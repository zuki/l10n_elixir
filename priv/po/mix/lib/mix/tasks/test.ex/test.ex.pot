#. TRANSLATORS: Elixir.Mix.Tasks.Test Summary
#: lib/mix/tasks/test.ex:36 
msgid ""
"Runs the tests for a project.\n"
"\n"
"This task starts the current application, loads up\n"
"`test/test_helper.exs` and then requires all files matching the\n"
"`test/**/_test.exs` pattern in parallel.\n"
"\n"
"A list of files can be given after the task name in order to select\n"
"the files to compile:\n"
"\n"
"    mix test test/some/particular/file_test.exs\n"
"\n"
"## Command line options\n"
"\n"
"  * `--color` - enables color in the output\n"
"  * `--cover` - the directory to include coverage results\n"
"  * `--exclude` - excludes tests that match the filter\n"
"  * `--force` - forces compilation regardless of modification times\n"
"  * `--formatter` - formatter module\n"
"  * `--include` - includes tests that match the filter\n"
"  * `--listen-on-stdin` - runs tests, and then listens on stdin. Receiving a newline will\n"
"    result in the tests being run again. Very useful when combined with `--stale` and\n"
"    external commands which produce output on stdout upon file system modification.\n"
"  * `--max-cases` - sets the maximum number of cases running async\n"
"  * `--no-archives-check` - does not check archives\n"
"  * `--no-color` - disables color in the output\n"
"  * `--no-compile` - does not compile, even if files require compilation\n"
"  * `--no-deps-check` - does not check dependencies\n"
"  * `--no-elixir-version-check` - does not check the Elixir version from mix.exs\n"
"  * `--no-start` - does not start applications after compilation\n"
"  * `--only` - runs only tests that match the filter\n"
"  * `--raise` - raises if the test suit failed\n"
"  * `--seed` - seeds the random number generator used to randomize tests order;\n"
"    `--seed 0` disables randomization\n"
"  * `--stale` - runs only tests which reference modules that changed since the\n"
"    last `test --stale`. You can read more about this option in the \"Stale\" section below.\n"
"  * `--timeout` - sets the timeout for the tests\n"
"  * `--trace` - runs tests with detailed reporting; automatically sets `--max-cases` to 1\n"
"\n"
"## Filters\n"
"\n"
"ExUnit provides tags and filtering functionality that allows developers\n"
"to select which tests to run. The most common functionality is to exclude\n"
"some particular tests from running by default in your test helper file:\n"
"\n"
"    # Exclude all external tests from running\n"
"    ExUnit.configure exclude: [external: true]\n"
"\n"
"Then, whenever desired, those tests could be included in the run via the\n"
"`--include` flag:\n"
"\n"
"    mix test --include external:true\n"
"\n"
"The example above will run all tests that have the external flag set to\n"
"`true`. It is also possible to include all examples that have a given tag,\n"
"regardless of its value:\n"
"\n"
"    mix test --include external\n"
"\n"
"Note that all tests are included by default, so unless they are excluded\n"
"first (either in the test helper or via the `--exclude` option), the\n"
"`--include` flag has no effect.\n"
"\n"
"For this reason, Mix also provides an `--only` option that excludes all\n"
"tests and includes only the given ones:\n"
"\n"
"    mix test --only external\n"
"\n"
"Which is equivalent to:\n"
"\n"
"    mix test --include external --exclude test\n"
"\n"
"In case a single file is being tested, it is possible pass a specific\n"
"line number:\n"
"\n"
"    mix test test/some/particular/file_test.exs:12\n"
"\n"
"Which is equivalent to:\n"
"\n"
"    mix test --only line:12 test/some/particular/file_test.exs\n"
"\n"
"Note that line filter takes the closest test on or before the given line number.\n"
"In the case a single file contains more than one test module (test case),\n"
"line filter applies to every test case before the given line number, thus more\n"
"than one test might be taken for the run.\n"
"\n"
"## Configuration\n"
"\n"
"  * `:test_paths` - list of paths containing test files, defaults to\n"
"    `[\"test\"]` if the `test` directory exists, otherwise it defaults to `[]`.\n"
"    It is expected all test paths to contain a `test_helper.exs` file.\n"
"\n"
"  * `:test_pattern` - a pattern to load test files, defaults to `*_test.exs`.\n"
"\n"
"  * `:warn_test_pattern` - a pattern to match potentially missed test files\n"
"    and display a warning, defaults to `*_test.ex`.\n"
"\n"
"  * `:test_coverage` - a set of options to be passed down to the coverage\n"
"    mechanism.\n"
"\n"
"## Coverage\n"
"\n"
"The `:test_coverage` configuration accepts the following options:\n"
"\n"
"  * `:output` - the output for cover results, defaults to `\"cover\"`\n"
"  * `:tool`   - the coverage tool\n"
"\n"
"By default, a very simple wrapper around OTP's `cover` is used as a tool,\n"
"but it can be overridden as follows:\n"
"\n"
"    test_coverage: [tool: CoverModule]\n"
"\n"
"`CoverModule` can be any module that exports `start/2`, receiving the\n"
"compilation path and the `test_coverage` options as arguments.\n"
"It must return either `nil` or an anonymous function of zero arity that will\n"
"be run after the test suite is done.\n"
"\n"
"## \"Stale\"\n"
"\n"
"The `--stale` command line option attempts to run only those test files which\n"
"reference modules that have changed since the last time you ran this task with\n"
"`--stale`.\n"
"\n"
"The first time this task is run with `--stale`, all tests are run and a manifest\n"
"is generated. On subsequent runs, a test file is marked \"stale\" if any modules it\n"
"references (and any modules those modules reference, recursively) were modified\n"
"since the last run with `--stale`. A test file is also marked \"stale\" if it has\n"
"been changed since the last run with `--stale`.\n"
msgstr ""
