msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-01-23 11:04+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Mix.Generator.create_directory(path)
#: lib/mix/generator.ex:34
msgid ""
"Creates a directory if one does not exist yet.\n"
"\n"
"This function does nothing if the given directory already exists; in this\n"
"case, it still logs the directory creation.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Mix.Generator.create_directory \"path/to/dir\"\n"
"    * creating path/to/dir\n"
"    :ok\n"
"\n"
msgstr ""
"ディレクトリがまだ存在しない場合、作成します。\n"
"\n"
"指定したディレクトリがすでに存在する場合、この関数は何もしません。\n"
"この場合も、作成するディレクトリをログ出力します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Mix.Generator.create_directory \"path/to/dir\"\n"
"    * creating path/to/dir\n"
"    :ok\n"
"\n"

#. TRANSLATORS: def Mix.Generator.create_file(path, contents, opts \\ [])
#: lib/mix/generator.ex:9
msgid ""
"Creates a file with the given contents.\n"
"If the file already exists, asks for user confirmation.\n"
"\n"
"## Options\n"
"\n"
"  * `:force` - forces installation without a shell prompt.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Mix.Generator.create_file \".gitignore\", \"_build\n"
"deps\n"
"\"\n"
"    * creating .gitignore\n"
"    :ok\n"
"\n"
msgstr ""
"指定した内容でファイルを作成します。\n"
"ファイルがすでに存在する場合、ユーザに確認します。\n"
"\n"
"## オプション\n"
"\n"
"  * `:force` - シェルプロンプトなしにインストールを強制します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Mix.Generator.create_file \".gitignore\", \"_build\\ndeps\\n”\n"
"    * creating .gitignore\n"
"    :ok\n"
"\n"

#. TRANSLATORS: defmacro Mix.Generator.embed_text(name, contents)
#: lib/mix/generator.ex:92
msgid ""
"Embeds a text given by `contents` into the current module.\n"
"\n"
"It will define a private function with the `name` followed by\n"
"`_text` that expects no arguments.\n"
"\n"
"## Examples\n"
"\n"
"    defmodule Mix.Tasks.MyTask do\n"
"      require Mix.Generator\n"
"      Mix.Generator.embed_text(:error, \"There was an error!\")\n"
"    end\n"
"\n"
msgstr ""
"`contents`に指定されたテキストを現在のモジュールに埋め込みます。\n"
"\n"
"引数をもたない`name`に`_text`が続くプライベート関数を\n"
"定義します。\n"
"\n"
"## 例\n"
"\n"
"    defmodule Mix.Tasks.MyTask do\n"
"      require Mix.Generator\n"
"      Mix.Generator.embed_text(:error, \"There was an error!\")\n"
"    end\n"
"\n"

#. TRANSLATORS: defmacro Mix.Generator.embed_template(name, contents)
#: lib/mix/generator.ex:53
msgid ""
"Embeds a template given by `contents` into the current module.\n"
"\n"
"It will define a private function with the `name` followed by\n"
"`_template` that expects assigns as arguments.\n"
"\n"
"This function must be invoked passing a keyword list.\n"
"Each key in the keyword list can be accessed in the\n"
"template using the `@` macro.\n"
"\n"
"For more information, check `EEx.SmartEngine`.\n"
"\n"
"## Examples\n"
"\n"
"    defmodule Mix.Tasks.MyTask do\n"
"      require Mix.Generator\n"
"      Mix.Generator.embed_template(:log, \"Log: <%= @log %>\")\n"
"    end\n"
"\n"
msgstr ""
"`contents`に指定されたテンプレートを現在のモジュールに埋め込みます。\n"
"\n"
"引数をもたない`name`に`_template`が続くプライベート関数を\n"
"定義します。\n"
"\n"
"この関数はキーワードリストを渡して実行されなければなりません。\n"
"キーワードリストの各キーはテンプレート中で`@` マクロを使って\n"
"アクセスできます。\n"
"\n"
"より詳しい情報は、`EEx.SmartEngine`をチェックしてください。\n"
"\n"
"## 例\n"
"\n"
"    defmodule Mix.Tasks.MyTask do\n"
"      require Mix.Generator\n"
"      Mix.Generator.embed_template(:log, \"Log: <%= @log %>\")\n"
"    end\n"
"\n"

#. TRANSLATORS: Elixir.Mix.Generator Summary
#: lib/mix/generator.ex:2
msgid ""
"Conveniences for working with paths and generating content.\n"
"\n"
"All of these functions are verbose, in the sense they log\n"
"the action to be performed via `Mix.shell/0`.\n"
msgstr ""
"パスを使ってコンテンツを生成する便利ツールです。\n"
"\n"
"これらの関数は、`Mix.shell/0`を介して実行されるアクションを\n"
"ログ出力するという意味で、すべて冗長です。\n"
