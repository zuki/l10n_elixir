msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-01-23 11:04+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: Elixir.Logger.Translator Summary
#: lib/logger/translator.ex:2
msgid ""
"Default translation for Erlang log messages.\n"
"\n"
"Logger allows developers to rewrite log messages provided by\n"
"Erlang applications into a format more compatible with Elixir\n"
"log messages by providing a translator.\n"
"\n"
"A translator is simply a tuple containing a module and a function\n"
"that can be added and removed via the `Logger.add_translator/1` and\n"
"`Logger.remove_translator/1` functions and is invoked for every Erlang\n"
"message above the minimum log level with four arguments:\n"
"\n"
"  * `min_level` - the current Logger level\n"
"  * `level` - the level of the message being translated\n"
"  * `kind` - if the message is a report or a format\n"
"  * `message` - the message to format. If it is a report, it is a tuple\n"
"    with `{report_type, report_data}`, if it is a format, it is a\n"
"    tuple with `{format_message, format_args}`\n"
"\n"
"The function must return:\n"
"\n"
"  * `{:ok, chardata}` - if the message was translated with its translation\n"
"  * `:skip` - if the message is not meant to be translated nor logged\n"
"  * `:none` - if there is no translation, which triggers the next "
"translator\n"
"\n"
"See the function `translate/4` in this module for an example implementation\n"
"and the default messages translated by Logger.\n"
msgstr ""
"Erlangログメッセージのデフォルトの変換です。\n"
"\n"
"Loggerは、開発者にトランスレータを提供することで、\n"
"Erlangアプリケーションから提供されたログメッセージをElixirログメッセージに\n"
"より互換性のあるフォーマットにリライトできるようにしています。\n"
"\n"
"translatorは単にモジュール名と関数名を含んだタプルであり、\n"
"`Logger.add_translation/1`と`Logger.remove_translation/1`関数で\n"
"追加、削除ができます。トランスレータは最低限のログレベル以上のErlang\n"
"メッセージに対して4つの引数を付けてで起動されます:\n"
"\n"
"  * `min_level` - 現在のロガーのレベル\n"
"  * `level` - 変換されるメッセージのレベル\n"
"  * `kind` - メッセージがreportかformatか\n"
"  * `message` - フォーマットするメッセージ。reportの場合は、\n"
"    タプル`{report_type, report_data}`、formatの場合は、\n"
"    タプル`{format_message, format_args}`です。\n"
"\n"
"関数は以下を返さなければなりません:\n"
"\n"
"  * `{:ok, chardata}` - メッセージが変換されたら、その変換済メッセージ\n"
"  * `:skip` - メッセージが変換やログの対象外の場合\n"
"  * `:none` - 変換がない場合に、次のtranslatorが起動されます\n"
"\n"
"サンプル実装とLoggerにより変換されるデフォルトメッセージについては、このモ"
"ジュール\n"
"の`translate/4`関数を参照してください。\n"
