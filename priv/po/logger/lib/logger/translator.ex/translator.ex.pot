#. TRANSLATORS: Elixir.Logger.Translator Summary
#: lib/logger/translator.ex:2 
msgid ""
"Default translation for Erlang log messages.\n"
"\n"
"Logger allows developers to rewrite log messages provided by\n"
"Erlang applications into a format more compatible with Elixir\n"
"log messages by providing a translator.\n"
"\n"
"A translator is simply a tuple containing a module and a function\n"
"that can be added and removed via the `Logger.add_translator/1` and\n"
"`Logger.remove_translator/1` functions and is invoked for every Erlang\n"
"message above the minimum log level with four arguments:\n"
"\n"
"  * `min_level` - the current Logger level\n"
"  * `level` - the level of the message being translated\n"
"  * `kind` - if the message is a report or a format\n"
"  * `message` - the message to format. If it is a report, it is a tuple\n"
"    with `{report_type, report_data}`, if it is a format, it is a\n"
"    tuple with `{format_message, format_args}`\n"
"\n"
"The function must return:\n"
"\n"
"  * `{:ok, chardata}` - if the message was translated with its translation\n"
"  * `:skip` - if the message is not meant to be translated nor logged\n"
"  * `:none` - if there is no translation, which triggers the next translator\n"
"\n"
"See the function `translate/4` in this module for an example implementation\n"
"and the default messages translated by Logger.\n"
msgstr ""
