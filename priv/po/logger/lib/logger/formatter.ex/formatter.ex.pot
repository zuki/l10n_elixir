#. TRANSLATORS: Elixir.Logger.Formatter Summary
#: lib/logger/formatter.ex:4 
msgid ""
"Conveniences for formatting data for logs.\n"
"\n"
"This module allows developers to specify a string that\n"
"serves as template for log messages, for example:\n"
"\n"
"    $time $metadata[$level] $message\\n\n"
"\n"
"Will print error messages as:\n"
"\n"
"    18:43:12.439 user_id=13 [error] Hello\\n\n"
"\n"
"The valid parameters you can use are:\n"
"\n"
"  * `$time`     - time the log message was sent\n"
"  * `$date`     - date the log message was sent\n"
"  * `$message`  - the log message\n"
"  * `$level`    - the log level\n"
"  * `$node`     - the node that prints the message\n"
"  * `$metadata` - user controlled data presented in `\"key=val key2=val2\"` format\n"
"  * `$levelpad` - sets to a single space if level is 4 characters long,\n"
"    otherwise set to the empty space. Used to align the message after level.\n"
"\n"
"Backends typically allow developers to supply such control\n"
"strings via configuration files. This module provides `compile/1`,\n"
"which compiles the string into a format for fast operations at\n"
"runtime and `format/5` to format the compiled pattern into an\n"
"actual IO data.\n"
"\n"
"## Metadata\n"
"\n"
"Metadata to be sent to the Logger can be read and written with\n"
"the `Logger.metadata/0` and `Logger.metadata/1` functions. For example,\n"
"you can set `Logger.metadata([user_id: 13])` to add user_id metadata\n"
"to the current process. The user can configure the backend to chose\n"
"which metadata it wants to print and it will replace the `$metadata`\n"
"value.\n"
msgstr ""
#. TRANSLATORS: def Logger.Formatter.prune(binary)
#: lib/logger/formatter.ex:49 
msgid ""
"Prune non-valid UTF-8 codepoints.\n"
"\n"
"Typically called after formatting when the data cannot be printed.\n"
msgstr ""
#. TRANSLATORS: def Logger.Formatter.compile(str)
#: lib/logger/formatter.ex:68 
msgid ""
"Compiles a format string into a data structure that the `format/5` can handle.\n"
"\n"
"Check the module doc for documentation on the valid parameters. If you\n"
"pass `nil`, it defaults to: `$time $metadata [$level] $levelpad$message\\n`\n"
"\n"
"If you would like to make your own custom formatter simply pass\n"
"`{module, function}` to `compile/1` and the rest is handled.\n"
"\n"
"    iex> Logger.Formatter.compile(\"$time $metadata [$level] $message\\n\")\n"
"    [:time, \" \", :metadata, \" [\", :level, \"] \", :message, \"\\n\"]\n"
msgstr ""
#. TRANSLATORS: def Logger.Formatter.format(config, level, msg, ts, md)
#: lib/logger/formatter.ex:100 
msgid ""
"Takes a compiled format and injects the, level, timestamp, message and\n"
"metadata listdict and returns a properly formatted string.\n"
msgstr ""
