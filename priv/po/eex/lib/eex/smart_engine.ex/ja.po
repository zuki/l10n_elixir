msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-01-23 11:03+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: Elixir.EEx.SmartEngine Summary
#: lib/eex/smart_engine.ex:2
msgid ""
"The default engine used by EEx.\n"
"\n"
"It includes assigns (like `@foo`) and possibly other\n"
"conveniences in the future.\n"
"\n"
"## Examples\n"
"\n"
"    iex> EEx.eval_string(\"<%= @foo %>\", assigns: [foo: 1])\n"
"    \"1\"\n"
"\n"
"In the example above, we can access the value `foo` under\n"
"the binding `assigns` using `@foo`. This is useful because\n"
"a template, after being compiled, can receive different\n"
"assigns and would not require recompilation for each\n"
"variable set.\n"
"\n"
"Assigns can also be used when compiled to a function:\n"
"\n"
"    # sample.eex\n"
"    <%= @a + @b %>\n"
"\n"
"    # sample.ex\n"
"    defmodule Sample do\n"
"      require EEx\n"
"      EEx.function_from_file :def, :sample, \"sample.eex\", [:assigns]\n"
"    end\n"
"\n"
"    # iex\n"
"    Sample.sample(a: 1, b: 2) #=> \"3\"\n"
"\n"
msgstr ""
"EExで使われるデフォルトのエンジンです。\n"
"\n"
"(`@foo`のような)代入と将来は多分ほかにも便利なものを\n"
"含みます。\n"
"\n"
"## 例\n"
"\n"
"    iex> EEx.eval_string(\"<%= @foo %>\", assigns: [foo: 1])\n"
"    \"1\"\n"
"\n"
"上の例では、`@foo`を使うことで`assigns`の束縛の下で\n"
"`foo`の値にアクセスできます。これは、コンパイル後に\n"
"テンプレートが異なる束縛を受け取ることができ、変数セット\n"
"毎に再コンパイルが不要になる点で\n"
"便利です。\n"
"\n"
"代入は関数をコンパイルするときにも使うことができます:\n"
"\n"
"    # sample.eex\n"
"    <%= @a + @b %>\n"
"\n"
"    # sample.ex\n"
"    defmodule Sample do\n"
"      require EEx\n"
"      EEx.function_from_file :def, :sample, \"sample.eex\", [:assigns]\n"
"    end\n"
"\n"
"    # iex\n"
"    Sample.sample(a: 1, b: 2) #=> \"3\"\n"
"\n"
