msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2017-01-23 11:03+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def EEx.Engine.handle_body(quoted)
#: lib/eex/engine.ex:107
msgid "The default implementation simply returns the given expression.\n"
msgstr "デフォルト実装は与えられた式を単純に返します。\n"

#. TRANSLATORS: def EEx.Engine.handle_text(buffer, text)
#: lib/eex/engine.ex:114
msgid "The default implementation simply concatenates text to the buffer.\n"
msgstr "デフォルト実装はtextをbufferへ単純に連結します。\n"

#. TRANSLATORS: def EEx.Engine.init(opts)
#: lib/eex/engine.ex:100
msgid "Returns an empty string as initial buffer.\n"
msgstr "初期バッファとして空の文字列を返します。\n"

#. TRANSLATORS: def EEx.Engine.handle_expr(buffer, binary, expr)
#: lib/eex/engine.ex:121
msgid ""
"Implements expressions according to the markers.\n"
"\n"
"    <% Elixir expression - inline with output %>\n"
"    <%= Elixir expression - replace with result %>\n"
"\n"
"All other markers are not implemented by this engine.\n"
msgstr ""
"マーカによる式の実装\n"
"\n"
"    <% Elixir expression - inline with output %>\n"
"    <%= Elixir expression - replace with result %>\n"
"\n"
"他のすべてのマーカはこのエンジンでは実装されていません。\n"

#. TRANSLATORS: def EEx.Engine.handle_assign(arg)
#: lib/eex/engine.ex:60
msgid ""
"Handles assigns in quoted expressions.\n"
"\n"
"A warning will be printed on missing assigns.\n"
"Future versions will raise.\n"
"\n"
"This can be added to any custom engine by invoking\n"
"`handle_assign/1` with `Macro.prewalk/2`:\n"
"\n"
"    def handle_expr(buffer, token, expr) do\n"
"      expr = Macro.prewalk(expr, &EEx.Engine.handle_assign/1)\n"
"      EEx.Engine.handle_expr(buffer, token, expr)\n"
"    end\n"
"\n"
msgstr ""
"quoteされた式の代入をハンドルします。\n"
"\n"
"代入が欠けていると警告がプリントされます。\n"
"将来のバージョンは例外を上げるでしょう。\n"
"\n"
"これは`Macro.prewalk/2`を伴って`handle_assign/1`を\n"
"起動することによって任意のカスタムエンジンに\n"
"追加することができます:\n"
"\n"
"    def handle_expr(buffer, token, expr) do\n"
"      expr = Macro.prewalk(expr, &EEx.Engine.handle_assign/1)\n"
"      EEx.Engine.handle_expr(buffer, token, expr)\n"
"    end\n"
"\n"

#. TRANSLATORS: Elixir.EEx.Engine Summary
#: lib/eex/engine.ex:2
msgid ""
"Basic EEx engine that ships with Elixir.\n"
"\n"
"An engine needs to implement four functions:\n"
"\n"
"  * `init(opts)` - returns the initial buffer\n"
"\n"
"  * `handle_body(quoted)` - receives the final built quoted\n"
"    expression, should do final post-processing and return a\n"
"    quoted expression.\n"
"\n"
"  * `handle_text(buffer, text)` - it receives the buffer,\n"
"    the text and must return a new quoted expression.\n"
"\n"
"  * `handle_expr(buffer, marker, expr)` - it receives the buffer,\n"
"    the marker, the expr and must return a new quoted expression.\n"
"\n"
"    The marker is what follows exactly after `<%`. For example,\n"
"    `<% foo %>` has an empty marker, but `<%= foo %>` has `\"=\"`\n"
"    as marker. The allowed markers so far are: `\"\"` and `\"=\"`.\n"
"\n"
"    Read `handle_expr/3` below for more information about the markers\n"
"    implemented by default by this engine.\n"
"\n"
"`EEx.Engine` can be used directly if one desires to use the\n"
"default implementations for the functions above.\n"
msgstr ""
"Elixirに同梱された基本的なEExエンジンです。\n"
"\n"
"エンジンは4つの関数を実装する必要があります:\n"
"\n"
"  * `init(opts)` - 初期バッファを返します\n"
"\n"
"  * `handle_body(quoted)` - 最終的に組み立てられたquoteされた\n"
"    式を受取り、最終的にポストプロセスしてquoteされた式を\n"
"    返します。\n"
"\n"
"  * `handle_text(buffer, text)` - bufferとtextを受取り、\n"
"    新たなquoteさえた式を返します。\n"
"\n"
"  * `handle_expr(buffer, marker, expr)` - buffer、marker、exprを\n"
"    受取り、新しくquoteされた式を返します。\n"
"\n"
"    markerは`<%`に続く直後の一文字です。例えば、`<% foo %>`では、\n"
"    markerは空ですが、`<%= foo %>`はmarkerとして`\"=\"`を持ちます。\n"
"    今のところ、以下のmarkerが許されます: `\"\"`と`\"=\"` です。\n"
"\n"
"    このエンジンでのmarkerの実装についての詳細な情報は、`handle_expr/3`\n"
"    を読んでください。\n"
"\n"
"上記の関数のデフォルト実装を望むなら`EEx.Engine`を直接\n"
"使うことができます。\n"
